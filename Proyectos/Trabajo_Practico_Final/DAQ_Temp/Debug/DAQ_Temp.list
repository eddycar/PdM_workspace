
DAQ_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006530  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080066e0  080066e0  000076e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f8  080068f8  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  080068f8  080068f8  000078f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006900  08006900  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006900  08006900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006904  08006904  00007904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08006908  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008080  2**0
                  CONTENTS
 10 .bss          000002e8  20000080  20000080  00008080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000368  20000368  00008080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b024  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000223b  00000000  00000000  000130d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  00015310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c6  00000000  00000000  00015d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c40  00000000  00000000  00016536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa18  00000000  00000000  0003c176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8476  00000000  00000000  0004bb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124004  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035f0  00000000  00000000  00124048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00127638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080066c8 	.word	0x080066c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	080066c8 	.word	0x080066c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "FINITE_STATE_MACHINE.h"

int main(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000efc:	f000 ff54 	bl	8001da8 <HAL_Init>

	/* Initialize Finite State Machine */
	SystemFSM_init();
 8000f00:	f000 fade 	bl	80014c0 <SystemFSM_init>

	/* Infinite loop */
	while (1) {
		SystemFSM_update();
 8000f04:	f000 faf6 	bl	80014f4 <SystemFSM_update>
 8000f08:	e7fc      	b.n	8000f04 <main+0xc>
	...

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a28      	ldr	r2, [pc, #160]	@ (800101c <HAL_SPI_MspInit+0xc0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d149      	bne.n	8001012 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b27      	ldr	r3, [pc, #156]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	4a26      	ldr	r2, [pc, #152]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000f88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8e:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a18      	ldr	r2, [pc, #96]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fd2:	2360      	movs	r3, #96	@ 0x60
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	480d      	ldr	r0, [pc, #52]	@ (8001024 <HAL_SPI_MspInit+0xc8>)
 8000fee:	f001 f857 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ff2:	2320      	movs	r3, #32
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001002:	2305      	movs	r3, #5
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4806      	ldr	r0, [pc, #24]	@ (8001028 <HAL_SPI_MspInit+0xcc>)
 800100e:	f001 f847 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	@ 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40013000 	.word	0x40013000
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a19      	ldr	r2, [pc, #100]	@ (80010b0 <HAL_UART_MspInit+0x84>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12c      	bne.n	80010a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 8001058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001086:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001098:	2307      	movs	r3, #7
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <HAL_UART_MspInit+0x8c>)
 80010a4:	f000 fffc 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	@ 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40004800 	.word	0x40004800
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020c00 	.word	0x40020c00

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <NMI_Handler+0x4>

080010c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <MemManage_Handler+0x4>

080010d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001112:	f000 fe9b 	bl	8001e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}

0800111a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e00a      	b.n	8001142 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800112c:	f3af 8000 	nop.w
 8001130:	4601      	mov	r1, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	60ba      	str	r2, [r7, #8]
 8001138:	b2ca      	uxtb	r2, r1
 800113a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	3301      	adds	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	429a      	cmp	r2, r3
 8001148:	dbf0      	blt.n	800112c <_read+0x12>
  }

  return len;
 800114a:	687b      	ldr	r3, [r7, #4]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e009      	b.n	800117a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	60ba      	str	r2, [r7, #8]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fd88 	bl	8001c84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	dbf1      	blt.n	8001166 <_write+0x12>
  }
  return len;
 8001182:	687b      	ldr	r3, [r7, #4]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_close>:

int _close(int file)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011b4:	605a      	str	r2, [r3, #4]
  return 0;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_isatty>:

int _isatty(int file)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011cc:	2301      	movs	r3, #1
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011da:	b480      	push	{r7}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011fc:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <_sbrk+0x5c>)
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <_sbrk+0x60>)
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <_sbrk+0x64>)
 8001212:	4a12      	ldr	r2, [pc, #72]	@ (800125c <_sbrk+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	d207      	bcs.n	8001234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001224:	f003 fbd8 	bl	80049d8 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	220c      	movs	r2, #12
 800122c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e009      	b.n	8001248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	4a05      	ldr	r2, [pc, #20]	@ (8001258 <_sbrk+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20030000 	.word	0x20030000
 8001254:	00000400 	.word	0x00000400
 8001258:	2000009c 	.word	0x2000009c
 800125c:	20000368 	.word	0x20000368

08001260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001288:	f7ff ffea 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	@ (80012c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f003 fb97 	bl	80049e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b6:	f7ff fe1f 	bl	8000ef8 <main>
  bx  lr    
 80012ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012c8:	08006908 	.word	0x08006908
  ldr r2, =_sbss
 80012cc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012d0:	20000368 	.word	0x20000368

080012d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC_IRQHandler>
	...

080012d8 <debounceFSM_init>:

static debounceState_t currentState;
static delay_t debounceDelay;
static bool_t buttonPressed = false;

void debounceFSM_init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	currentState = BUTTON_UP; //current state initializes
 80012dc:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <debounceFSM_init+0x18>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceDelay, DEBOUNCE_TIME); // 40 second timer initializes
 80012e2:	2128      	movs	r1, #40	@ 0x28
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <debounceFSM_init+0x1c>)
 80012e6:	f000 f887 	bl	80013f8 <delayInit>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000a0 	.word	0x200000a0
 80012f4:	200000a4 	.word	0x200000a4

080012f8 <debounceFSM_update>:

void debounceFSM_update(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	switch (currentState) {
 80012fc:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <debounceFSM_update+0xd8>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d863      	bhi.n	80013cc <debounceFSM_update+0xd4>
 8001304:	a201      	add	r2, pc, #4	@ (adr r2, 800130c <debounceFSM_update+0x14>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800131d 	.word	0x0800131d
 8001310:	0800133b 	.word	0x0800133b
 8001314:	0800136d 	.word	0x0800136d
 8001318:	0800138d 	.word	0x0800138d
	case BUTTON_UP: //initial state: Button Up - High Logic State
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) { // Read User Button state
 800131c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001320:	482c      	ldr	r0, [pc, #176]	@ (80013d4 <debounceFSM_update+0xdc>)
 8001322:	f001 f869 	bl	80023f8 <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	d148      	bne.n	80013be <debounceFSM_update+0xc6>
			delayRead(&debounceDelay); //Starts timing 40 seconds
 800132c:	482a      	ldr	r0, [pc, #168]	@ (80013d8 <debounceFSM_update+0xe0>)
 800132e:	f000 f87b 	bl	8001428 <delayRead>
			currentState = BUTTON_FALLING; //Changes State
 8001332:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <debounceFSM_update+0xd8>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001338:	e041      	b.n	80013be <debounceFSM_update+0xc6>
	case BUTTON_FALLING: // Button Pressed
		if (delayRead(&debounceDelay)) { // Was it 40 seconds?
 800133a:	4827      	ldr	r0, [pc, #156]	@ (80013d8 <debounceFSM_update+0xe0>)
 800133c:	f000 f874 	bl	8001428 <delayRead>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d03d      	beq.n	80013c2 <debounceFSM_update+0xca>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) { // Read User Button state
 8001346:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800134a:	4822      	ldr	r0, [pc, #136]	@ (80013d4 <debounceFSM_update+0xdc>)
 800134c:	f001 f854 	bl	80023f8 <HAL_GPIO_ReadPin>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d106      	bne.n	8001364 <debounceFSM_update+0x6c>
				currentState = BUTTON_DOWN; //Changes State
 8001356:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <debounceFSM_update+0xd8>)
 8001358:	2202      	movs	r2, #2
 800135a:	701a      	strb	r2, [r3, #0]
				buttonPressed= true;
 800135c:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <debounceFSM_update+0xe4>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
			} else {
				currentState = BUTTON_UP; //High Logic State
			}
		}
		break;
 8001362:	e02e      	b.n	80013c2 <debounceFSM_update+0xca>
				currentState = BUTTON_UP; //High Logic State
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <debounceFSM_update+0xd8>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
		break;
 800136a:	e02a      	b.n	80013c2 <debounceFSM_update+0xca>
	case BUTTON_DOWN: // Low Logic Level
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) { // Read User Button state
 800136c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001370:	4818      	ldr	r0, [pc, #96]	@ (80013d4 <debounceFSM_update+0xdc>)
 8001372:	f001 f841 	bl	80023f8 <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d124      	bne.n	80013c6 <debounceFSM_update+0xce>
			delayWrite(&debounceDelay, DEBOUNCE_TIME); // Restart timing 40 seconds
 800137c:	2128      	movs	r1, #40	@ 0x28
 800137e:	4816      	ldr	r0, [pc, #88]	@ (80013d8 <debounceFSM_update+0xe0>)
 8001380:	f000 f882 	bl	8001488 <delayWrite>
			currentState = BUTTON_RAISING; // Changes State
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <debounceFSM_update+0xd8>)
 8001386:	2203      	movs	r2, #3
 8001388:	701a      	strb	r2, [r3, #0]
		}
		break;
 800138a:	e01c      	b.n	80013c6 <debounceFSM_update+0xce>
	case BUTTON_RAISING: // Button Released
		if (delayRead(&debounceDelay)) { // Was it 40 seconds?
 800138c:	4812      	ldr	r0, [pc, #72]	@ (80013d8 <debounceFSM_update+0xe0>)
 800138e:	f000 f84b 	bl	8001428 <delayRead>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d018      	beq.n	80013ca <debounceFSM_update+0xd2>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) { // Read User Button state
 8001398:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800139c:	480d      	ldr	r0, [pc, #52]	@ (80013d4 <debounceFSM_update+0xdc>)
 800139e:	f001 f82b 	bl	80023f8 <HAL_GPIO_ReadPin>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d106      	bne.n	80013b6 <debounceFSM_update+0xbe>
				currentState = BUTTON_UP; // Changes State
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <debounceFSM_update+0xd8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
				buttonPressed= false;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <debounceFSM_update+0xe4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]

			} else {
				currentState = BUTTON_DOWN; // Low Logic State
			}
		}
		break;
 80013b4:	e009      	b.n	80013ca <debounceFSM_update+0xd2>
				currentState = BUTTON_DOWN; // Low Logic State
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <debounceFSM_update+0xd8>)
 80013b8:	2202      	movs	r2, #2
 80013ba:	701a      	strb	r2, [r3, #0]
		break;
 80013bc:	e005      	b.n	80013ca <debounceFSM_update+0xd2>
		break;
 80013be:	bf00      	nop
 80013c0:	e004      	b.n	80013cc <debounceFSM_update+0xd4>
		break;
 80013c2:	bf00      	nop
 80013c4:	e002      	b.n	80013cc <debounceFSM_update+0xd4>
		break;
 80013c6:	bf00      	nop
 80013c8:	e000      	b.n	80013cc <debounceFSM_update+0xd4>
		break;
 80013ca:	bf00      	nop
	}
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000a0 	.word	0x200000a0
 80013d4:	40020800 	.word	0x40020800
 80013d8:	200000a4 	.word	0x200000a4
 80013dc:	200000b0 	.word	0x200000b0

080013e0 <readKey>:

bool_t readKey(void) {
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	return buttonPressed;
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <readKey+0x14>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	200000b0 	.word	0x200000b0

080013f8 <delayInit>:
#include "API_delay.h"
#include "error_handler.h"

//Funcion para inicializar variables de delay
void delayInit(delay_t *delay, tick_t duration) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	if (delay == NULL) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <delayInit+0x16>
		write_error_flag(true);
 8001408:	2001      	movs	r0, #1
 800140a:	f003 f83d 	bl	8004488 <write_error_flag>
	}
	delay->running = false;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	721a      	strb	r2, [r3, #8]
	delay->duration = duration;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	605a      	str	r2, [r3, #4]
	delay->startTime = 0;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <delayRead>:

//Funcion para monitorear el estado del retardo
bool_t delayRead(delay_t *delay) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if (delay == NULL) {                // Se valida que delay se haya inicializado y que sus miembros no sean NULL
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <delayRead+0x14>
		write_error_flag(true);
 8001436:	2001      	movs	r0, #1
 8001438:	f003 f826 	bl	8004488 <write_error_flag>
	}

	tick_t currentTime = (tick_t) HAL_GetTick(); //Se obtiene la marca de tiempo
 800143c:	f000 fd1a 	bl	8001e74 <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

	if (delay->running == false) {               //Si el retarno no está en ejecución se inicia el retardo
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7a1b      	ldrb	r3, [r3, #8]
 8001446:	f083 0301 	eor.w	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <delayRead+0x38>
		delay->startTime = currentTime;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	721a      	strb	r2, [r3, #8]
		return false;
 800145c:	2300      	movs	r3, #0
 800145e:	e00f      	b.n	8001480 <delayRead+0x58>
	} else {
		tick_t timeElapsed = currentTime - delay->startTime;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	60bb      	str	r3, [r7, #8]

		if (timeElapsed >= delay->duration) {    // Se implementan acciones cuando el retardo se cumple:
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	429a      	cmp	r2, r3
 8001472:	d304      	bcc.n	800147e <delayRead+0x56>
			delay->running = false;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	721a      	strb	r2, [r3, #8]
			return true;
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <delayRead+0x58>
		} else {
			return false;                       // no se ha cumplido se retardo
 800147e:	2300      	movs	r3, #0
		}
	}
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <delayWrite>:

//Funcion para asignar un nuevo retardo
void delayWrite(delay_t *delay, tick_t duration) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	if (delay == NULL) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <delayWrite+0x18>
		write_error_flag(true);
 8001498:	2001      	movs	r0, #1
 800149a:	f002 fff5 	bl	8004488 <write_error_flag>
		return;
 800149e:	e00b      	b.n	80014b8 <delayWrite+0x30>
	}

	delay->duration = duration;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]

	// Reiniciar el retardo si estaba en ejecución
	if (delay->running == true) {
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7a1b      	ldrb	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <delayWrite+0x30>
		delay->startTime = (tick_t) HAL_GetTick();
 80014ae:	f000 fce1 	bl	8001e74 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	601a      	str	r2, [r3, #0]
	}
}
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <SystemFSM_init>:

void configPeripheral(void);
void data_sending(void);

// initialize FSM
void SystemFSM_init(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	delayInit(&delayDAQ, 500);
 80014c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80014c8:	4807      	ldr	r0, [pc, #28]	@ (80014e8 <SystemFSM_init+0x28>)
 80014ca:	f7ff ff95 	bl	80013f8 <delayInit>
	delayInit(&delaySend, 500);
 80014ce:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80014d2:	4806      	ldr	r0, [pc, #24]	@ (80014ec <SystemFSM_init+0x2c>)
 80014d4:	f7ff ff90 	bl	80013f8 <delayInit>

	debounceFSM_init();
 80014d8:	f7ff fefe 	bl	80012d8 <debounceFSM_init>
	currentState = STATE_CONFIG;
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <SystemFSM_init+0x30>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000158 	.word	0x20000158
 80014ec:	20000164 	.word	0x20000164
 80014f0:	200000b1 	.word	0x200000b1

080014f4 <SystemFSM_update>:

// state transition function
void SystemFSM_update(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	switch (currentState) {
 80014fa:	4b40      	ldr	r3, [pc, #256]	@ (80015fc <SystemFSM_update+0x108>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d871      	bhi.n	80015e6 <SystemFSM_update+0xf2>
 8001502:	a201      	add	r2, pc, #4	@ (adr r2, 8001508 <SystemFSM_update+0x14>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001521 	.word	0x08001521
 800150c:	0800153f 	.word	0x0800153f
 8001510:	0800154b 	.word	0x0800154b
 8001514:	0800157b 	.word	0x0800157b
 8001518:	080015bf 	.word	0x080015bf
 800151c:	080015cb 	.word	0x080015cb
	case STATE_CONFIG: /* Initialize peripherals */
		configPeripheral();
 8001520:	f000 f880 	bl	8001624 <configPeripheral>
		if (read_error_flag() == true) { //  errors?
 8001524:	f002 ffa4 	bl	8004470 <read_error_flag>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <SystemFSM_update+0x42>
			currentState = STATE_FAILURE;
 800152e:	4b33      	ldr	r3, [pc, #204]	@ (80015fc <SystemFSM_update+0x108>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
		} else {
			currentState = STATE_IDLE;
		}
		break;
 8001534:	e05e      	b.n	80015f4 <SystemFSM_update+0x100>
			currentState = STATE_IDLE;
 8001536:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <SystemFSM_update+0x108>)
 8001538:	2202      	movs	r2, #2
 800153a:	701a      	strb	r2, [r3, #0]
		break;
 800153c:	e05a      	b.n	80015f4 <SystemFSM_update+0x100>

	case STATE_FAILURE:   //Handle Errors
		Error_Handler();
 800153e:	f002 ffb3 	bl	80044a8 <Error_Handler>
		currentState = STATE_CONFIG;
 8001542:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <SystemFSM_update+0x108>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
		break;
 8001548:	e054      	b.n	80015f4 <SystemFSM_update+0x100>

	case STATE_IDLE:
		debounceFSM_update();
 800154a:	f7ff fed5 	bl	80012f8 <debounceFSM_update>
		if (readKey()) { // If button is pressed App To Start Recording
 800154e:	f7ff ff47 	bl	80013e0 <readKey>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d04a      	beq.n	80015ee <SystemFSM_update+0xfa>
			trigger = true;
 8001558:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <SystemFSM_update+0x10c>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_tx, "\rTrigger: %d\n", trigger);
 800155e:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <SystemFSM_update+0x10c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4927      	ldr	r1, [pc, #156]	@ (8001604 <SystemFSM_update+0x110>)
 8001566:	4828      	ldr	r0, [pc, #160]	@ (8001608 <SystemFSM_update+0x114>)
 8001568:	f003 f8f0 	bl	800474c <siprintf>
			uartSendString((uint8_t*) buffer_tx);
 800156c:	4826      	ldr	r0, [pc, #152]	@ (8001608 <SystemFSM_update+0x114>)
 800156e:	f000 fb55 	bl	8001c1c <uartSendString>
			currentState = STATE_DATA_ADQUISITION;
 8001572:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <SystemFSM_update+0x108>)
 8001574:	2203      	movs	r2, #3
 8001576:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001578:	e039      	b.n	80015ee <SystemFSM_update+0xfa>

	case STATE_DATA_ADQUISITION: // Get Temperature y Save in buffer
		PT100Temperature = MAX31865GetTemperature();
 800157a:	f000 f919 	bl	80017b0 <MAX31865GetTemperature>
 800157e:	ec53 2b10 	vmov	r2, r3, d0
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff faef 	bl	8000b68 <__aeabi_d2f>
 800158a:	4603      	mov	r3, r0
 800158c:	4a1f      	ldr	r2, [pc, #124]	@ (800160c <SystemFSM_update+0x118>)
 800158e:	6013      	str	r3, [r2, #0]
		sprintf(buffer_tx, "\rTemp: %d Trigger: %d\n",
				(uint8_t) PT100Temperature, trigger);
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <SystemFSM_update+0x118>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800159a:	edc7 7a01 	vstr	s15, [r7, #4]
 800159e:	793b      	ldrb	r3, [r7, #4]
 80015a0:	b2db      	uxtb	r3, r3
		sprintf(buffer_tx, "\rTemp: %d Trigger: %d\n",
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <SystemFSM_update+0x10c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4919      	ldr	r1, [pc, #100]	@ (8001610 <SystemFSM_update+0x11c>)
 80015aa:	4817      	ldr	r0, [pc, #92]	@ (8001608 <SystemFSM_update+0x114>)
 80015ac:	f003 f8ce 	bl	800474c <siprintf>
		delayRead(&delaySend);
 80015b0:	4818      	ldr	r0, [pc, #96]	@ (8001614 <SystemFSM_update+0x120>)
 80015b2:	f7ff ff39 	bl	8001428 <delayRead>
		currentState = STATE_DATA_SENDING;
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <SystemFSM_update+0x108>)
 80015b8:	2204      	movs	r2, #4
 80015ba:	701a      	strb	r2, [r3, #0]
		break;
 80015bc:	e01a      	b.n	80015f4 <SystemFSM_update+0x100>

	case STATE_DATA_SENDING:
		uartSendString((uint8_t*) buffer_tx);
 80015be:	4812      	ldr	r0, [pc, #72]	@ (8001608 <SystemFSM_update+0x114>)
 80015c0:	f000 fb2c 	bl	8001c1c <uartSendString>
		data_sending();
 80015c4:	f000 f840 	bl	8001648 <data_sending>
		break;
 80015c8:	e014      	b.n	80015f4 <SystemFSM_update+0x100>

	case STATE_DATA_STORAGE: // Saves Data and waita for flag to change to IDLE State
		uartReceiveStringSize((uint8_t*) buffer_rx, stringLength);
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <SystemFSM_update+0x124>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4812      	ldr	r0, [pc, #72]	@ (800161c <SystemFSM_update+0x128>)
 80015d2:	f000 fb43 	bl	8001c5c <uartReceiveStringSize>
		if (buffer_rx[0] == 'T') {
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <SystemFSM_update+0x128>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b54      	cmp	r3, #84	@ 0x54
 80015dc:	d109      	bne.n	80015f2 <SystemFSM_update+0xfe>
			currentState = STATE_IDLE;
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <SystemFSM_update+0x108>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80015e4:	e005      	b.n	80015f2 <SystemFSM_update+0xfe>

	default:
		printf("\rError Inesperado!\n");
 80015e6:	480e      	ldr	r0, [pc, #56]	@ (8001620 <SystemFSM_update+0x12c>)
 80015e8:	f003 f8a8 	bl	800473c <puts>
	}
}
 80015ec:	e002      	b.n	80015f4 <SystemFSM_update+0x100>
		break;
 80015ee:	bf00      	nop
 80015f0:	e000      	b.n	80015f4 <SystemFSM_update+0x100>
		break;
 80015f2:	bf00      	nop
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200000b1 	.word	0x200000b1
 8001600:	20000154 	.word	0x20000154
 8001604:	080066e0 	.word	0x080066e0
 8001608:	200000b4 	.word	0x200000b4
 800160c:	20000150 	.word	0x20000150
 8001610:	080066f0 	.word	0x080066f0
 8001614:	20000164 	.word	0x20000164
 8001618:	20000004 	.word	0x20000004
 800161c:	2000014c 	.word	0x2000014c
 8001620:	08006708 	.word	0x08006708

08001624 <configPeripheral>:

void configPeripheral(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8001628:	f002 fe28 	bl	800427c <SystemClock_Config>
	GPIO_Init();
 800162c:	f002 fe92 	bl	8004354 <GPIO_Init>
	uartInit();
 8001630:	f000 faae 	bl	8001b90 <uartInit>
	debounceFSM_init();
 8001634:	f7ff fe50 	bl	80012d8 <debounceFSM_init>
	SPI1_Init();
 8001638:	f000 fa4e 	bl	8001ad8 <SPI1_Init>
	MAX31865Init(NUM_WIRES);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f835 	bl	80016ac <MAX31865Init>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <data_sending>:

void data_sending(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	delayInit(&delayDAQ, 500);
 800164c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001650:	4811      	ldr	r0, [pc, #68]	@ (8001698 <data_sending+0x50>)
 8001652:	f7ff fed1 	bl	80013f8 <delayInit>
	debounceFSM_update();
 8001656:	f7ff fe4f 	bl	80012f8 <debounceFSM_update>
	if (readKey()) { // If Button is pressed  App To Stop Recording
 800165a:	f7ff fec1 	bl	80013e0 <readKey>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d010      	beq.n	8001686 <data_sending+0x3e>
		trigger = false;
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <data_sending+0x54>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_tx, "\rTrigger: %d\n", trigger);
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <data_sending+0x54>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	490b      	ldr	r1, [pc, #44]	@ (80016a0 <data_sending+0x58>)
 8001672:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <data_sending+0x5c>)
 8001674:	f003 f86a 	bl	800474c <siprintf>
		uartSendString((uint8_t*) buffer_tx);
 8001678:	480a      	ldr	r0, [pc, #40]	@ (80016a4 <data_sending+0x5c>)
 800167a:	f000 facf 	bl	8001c1c <uartSendString>
		currentState = STATE_DATA_STORAGE;
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <data_sending+0x60>)
 8001680:	2205      	movs	r2, #5
 8001682:	701a      	strb	r2, [r3, #0]
	} else {
		delayRead(&delayDAQ);
		currentState = STATE_DATA_ADQUISITION;
	}
}
 8001684:	e005      	b.n	8001692 <data_sending+0x4a>
		delayRead(&delayDAQ);
 8001686:	4804      	ldr	r0, [pc, #16]	@ (8001698 <data_sending+0x50>)
 8001688:	f7ff fece 	bl	8001428 <delayRead>
		currentState = STATE_DATA_ADQUISITION;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <data_sending+0x60>)
 800168e:	2203      	movs	r2, #3
 8001690:	701a      	strb	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000158 	.word	0x20000158
 800169c:	20000154 	.word	0x20000154
 80016a0:	080066e0 	.word	0x080066e0
 80016a4:	200000b4 	.word	0x200000b4
 80016a8:	200000b1 	.word	0x200000b1

080016ac <MAX31865Init>:
extern SPI_HandleTypeDef hspi1;

// Module configuration and initialization:
// | D7 -> VBIAS | D6 -> Conversion Mode | D5 -> 1-Shot | D4 -> Num. Wires
// | D3, D2 -> Fault detection | D1 -> Fault Status Clear | D0 -> 50/60 Hz Filter
void MAX31865Init(uint8_t num_wires) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
	// Module reset counter
	uint8_t MAX31865_Reinitialization_cnt = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]

	// index 1 contains the memory address of the configuration register
	// index 2 contains the value with which the configuration register will be loaded
	uint8_t MAX31865ConfigurationRegisterWrite[] = { 0x80, 0x00 };
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	81bb      	strh	r3, [r7, #12]

	// RTD configuration according to the number of threads
	if (num_wires == 2 || num_wires == 4) {
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d002      	beq.n	80016ca <MAX31865Init+0x1e>
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d102      	bne.n	80016d0 <MAX31865Init+0x24>
		MAX31865ConfigurationRegisterWrite[1] = 0xC2;
 80016ca:	23c2      	movs	r3, #194	@ 0xc2
 80016cc:	737b      	strb	r3, [r7, #13]
 80016ce:	e004      	b.n	80016da <MAX31865Init+0x2e>
	} else if (num_wires == 3) {
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d101      	bne.n	80016da <MAX31865Init+0x2e>
		MAX31865ConfigurationRegisterWrite[1] = 0xD2;
 80016d6:	23d2      	movs	r3, #210	@ 0xd2
 80016d8:	737b      	strb	r3, [r7, #13]
	}

	// Send configuration bytes to max31865
	CSSet();
 80016da:	f000 f9e5 	bl	8001aa8 <CSSet>
	SPI_Transmit(&hspi1, MAX31865ConfigurationRegisterWrite, 2, 100);
 80016de:	f107 010c 	add.w	r1, r7, #12
 80016e2:	2364      	movs	r3, #100	@ 0x64
 80016e4:	2202      	movs	r2, #2
 80016e6:	481c      	ldr	r0, [pc, #112]	@ (8001758 <MAX31865Init+0xac>)
 80016e8:	f000 fa2e 	bl	8001b48 <SPI_Transmit>
	CSReset();
 80016ec:	f000 f9e8 	bl	8001ac0 <CSReset>

	if (MAX31865ConfigurationInfo() == 0xD0) {
 80016f0:	f000 f838 	bl	8001764 <MAX31865ConfigurationInfo>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2bd0      	cmp	r3, #208	@ 0xd0
 80016f8:	d124      	bne.n	8001744 <MAX31865Init+0x98>
		printf("\rInitialization MAX31865 OK\r\n");
 80016fa:	4818      	ldr	r0, [pc, #96]	@ (800175c <MAX31865Init+0xb0>)
 80016fc:	f003 f81e 	bl	800473c <puts>
				printf("\rInitialization MAX31865 failed\r\n");
				break;
			}
		}
	}
}
 8001700:	e026      	b.n	8001750 <MAX31865Init+0xa4>
			MAX31865_Reinitialization_cnt++;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	3301      	adds	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
			CSSet();
 8001708:	f000 f9ce 	bl	8001aa8 <CSSet>
			SPI_Transmit(&hspi1, MAX31865ConfigurationRegisterWrite, 2, 100);
 800170c:	f107 010c 	add.w	r1, r7, #12
 8001710:	2364      	movs	r3, #100	@ 0x64
 8001712:	2202      	movs	r2, #2
 8001714:	4810      	ldr	r0, [pc, #64]	@ (8001758 <MAX31865Init+0xac>)
 8001716:	f000 fa17 	bl	8001b48 <SPI_Transmit>
			CSReset();
 800171a:	f000 f9d1 	bl	8001ac0 <CSReset>
			if (MAX31865ConfigurationInfo() == 0xD0) {
 800171e:	f000 f821 	bl	8001764 <MAX31865ConfigurationInfo>
 8001722:	4603      	mov	r3, r0
 8001724:	2bd0      	cmp	r3, #208	@ 0xd0
 8001726:	d103      	bne.n	8001730 <MAX31865Init+0x84>
				printf("\rInitialization MAX31865 OK\r\n");
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <MAX31865Init+0xb0>)
 800172a:	f003 f807 	bl	800473c <puts>
				break;
 800172e:	e00f      	b.n	8001750 <MAX31865Init+0xa4>
			} else if (MAX31865_Reinitialization_cnt == 10) { //If the initialization is not successful in 100 attempts, the error flag is set.
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	2b0a      	cmp	r3, #10
 8001734:	d106      	bne.n	8001744 <MAX31865Init+0x98>
				write_error_flag(true);
 8001736:	2001      	movs	r0, #1
 8001738:	f002 fea6 	bl	8004488 <write_error_flag>
				printf("\rInitialization MAX31865 failed\r\n");
 800173c:	4808      	ldr	r0, [pc, #32]	@ (8001760 <MAX31865Init+0xb4>)
 800173e:	f002 fffd 	bl	800473c <puts>
				break;
 8001742:	e005      	b.n	8001750 <MAX31865Init+0xa4>
		while (MAX31865ConfigurationInfo() != 0xD0) {
 8001744:	f000 f80e 	bl	8001764 <MAX31865ConfigurationInfo>
 8001748:	4603      	mov	r3, r0
 800174a:	2bd0      	cmp	r3, #208	@ 0xd0
 800174c:	d1d9      	bne.n	8001702 <MAX31865Init+0x56>
}
 800174e:	e7ff      	b.n	8001750 <MAX31865Init+0xa4>
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000174 	.word	0x20000174
 800175c:	0800671c 	.word	0x0800671c
 8001760:	0800673c 	.word	0x0800673c

08001764 <MAX31865ConfigurationInfo>:

// Get max31865 configuration info
uint8_t MAX31865ConfigurationInfo(void) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
	uint8_t readData = 0x00;
 800176a:	2300      	movs	r3, #0
 800176c:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration = 0x00;
 800176e:	2300      	movs	r3, #0
 8001770:	71bb      	strb	r3, [r7, #6]
	CSSet(); //
 8001772:	f000 f999 	bl	8001aa8 <CSSet>
	SPI_Transmit(&hspi1, &readData, 1, 100);
 8001776:	1df9      	adds	r1, r7, #7
 8001778:	2364      	movs	r3, #100	@ 0x64
 800177a:	2201      	movs	r2, #1
 800177c:	480a      	ldr	r0, [pc, #40]	@ (80017a8 <MAX31865ConfigurationInfo+0x44>)
 800177e:	f000 f9e3 	bl	8001b48 <SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100); // read configuration log
 8001782:	1db9      	adds	r1, r7, #6
 8001784:	2364      	movs	r3, #100	@ 0x64
 8001786:	2201      	movs	r2, #1
 8001788:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <MAX31865ConfigurationInfo+0x44>)
 800178a:	f001 fccb 	bl	8003124 <HAL_SPI_Receive>
	SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100);
 800178e:	1db9      	adds	r1, r7, #6
 8001790:	2364      	movs	r3, #100	@ 0x64
 8001792:	2201      	movs	r2, #1
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <MAX31865ConfigurationInfo+0x44>)
 8001796:	f000 f9e9 	bl	8001b6c <SPI_Receive>
	CSReset();
 800179a:	f000 f991 	bl	8001ac0 <CSReset>
	return MAX31865_Configuration;
 800179e:	79bb      	ldrb	r3, [r7, #6]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000174 	.word	0x20000174
 80017ac:	00000000 	.word	0x00000000

080017b0 <MAX31865GetTemperature>:

// Get Temperature
double MAX31865GetTemperature(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	// address of the register from which the data
	uint8_t MAX31865_start_address_of_the_poll = 0x01;
 80017b6:	2301      	movs	r3, #1
 80017b8:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_RX_Buffer[7];

	CSSet();
 80017ba:	f000 f975 	bl	8001aa8 <CSSet>
	SPI_Transmit(&hspi1, &MAX31865_start_address_of_the_poll, 1, 100);
 80017be:	1df9      	adds	r1, r7, #7
 80017c0:	2364      	movs	r3, #100	@ 0x64
 80017c2:	2201      	movs	r2, #1
 80017c4:	482e      	ldr	r0, [pc, #184]	@ (8001880 <MAX31865GetTemperature+0xd0>)
 80017c6:	f000 f9bf 	bl	8001b48 <SPI_Transmit>
	SPI_Receive(&hspi1, MAX31865_RX_Buffer, 7, 100);
 80017ca:	4639      	mov	r1, r7
 80017cc:	2364      	movs	r3, #100	@ 0x64
 80017ce:	2207      	movs	r2, #7
 80017d0:	482b      	ldr	r0, [pc, #172]	@ (8001880 <MAX31865GetTemperature+0xd0>)
 80017d2:	f000 f9cb 	bl	8001b6c <SPI_Receive>
	CSReset();
 80017d6:	f000 f973 	bl	8001ac0 <CSReset>

	// assigns information to each regiter in the structure
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_RX_Buffer[0]
 80017da:	783b      	ldrb	r3, [r7, #0]
			<< 8) | MAX31865_RX_Buffer[1]) >> 1;
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	787a      	ldrb	r2, [r7, #1]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	105b      	asrs	r3, r3, #1
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_RX_Buffer[0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_RX_Buffer[2] << 8)
 80017e8:	78bb      	ldrb	r3, [r7, #2]
 80017ea:	021b      	lsls	r3, r3, #8
			| MAX31865_RX_Buffer[3]) >> 1;
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	105b      	asrs	r3, r3, #1
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_RX_Buffer[2] << 8)
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_RX_Buffer[4] << 8)
 80017f6:	793b      	ldrb	r3, [r7, #4]
 80017f8:	021b      	lsls	r3, r3, #8
			| MAX31865_RX_Buffer[5];
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	797b      	ldrb	r3, [r7, #5]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b21b      	sxth	r3, r3
 8001804:	b29b      	uxth	r3, r3
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_RX_Buffer[4] << 8)
 8001806:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data.Fault_Status = MAX31865_RX_Buffer[6];
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	73bb      	strb	r3, [r7, #14]

	// error handling
	if (MAX31865_receieve_data.Fault_Status > 0x00) {
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00b      	beq.n	800182a <MAX31865GetTemperature+0x7a>

		MAX31865_Sensor_Error = true;
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <MAX31865GetTemperature+0xd4>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
		printf("\rSensor Error!\r\n");
 8001818:	481b      	ldr	r0, [pc, #108]	@ (8001888 <MAX31865GetTemperature+0xd8>)
 800181a:	f002 ff8f 	bl	800473c <puts>

		/*----Automatic error reset ----*/
		// Module is reset
		MAX31865Init(3);
 800181e:	2003      	movs	r0, #3
 8001820:	f7ff ff44 	bl	80016ac <MAX31865Init>
		MAX31865_Sensor_Error = false;
 8001824:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <MAX31865GetTemperature+0xd4>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
	}

	// convert ADC values to resistance
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers
 800182a:	893b      	ldrh	r3, [r7, #8]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe71 	bl	8000514 <__aeabi_ui2d>
			* MAX31865_Rref ) / (double) 32768.0; // ADC resolution 15 bits
 8001832:	a311      	add	r3, pc, #68	@ (adr r3, 8001878 <MAX31865GetTemperature+0xc8>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe fee6 	bl	8000608 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <MAX31865GetTemperature+0xdc>)
 800184a:	f7ff f807 	bl	800085c <__aeabi_ddiv>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("\rRrtd = %d\n", (int) data);

	// converts and returns temperature values
	return MAX31865GetTemperatureMath(data);
 8001856:	ed97 0b04 	vldr	d0, [r7, #16]
 800185a:	f000 f819 	bl	8001890 <MAX31865GetTemperatureMath>
 800185e:	eeb0 7a40 	vmov.f32	s14, s0
 8001862:	eef0 7a60 	vmov.f32	s15, s1
}
 8001866:	eeb0 0a47 	vmov.f32	s0, s14
 800186a:	eef0 0a67 	vmov.f32	s1, s15
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	f3af 8000 	nop.w
 8001878:	00000000 	.word	0x00000000
 800187c:	407ac800 	.word	0x407ac800
 8001880:	20000174 	.word	0x20000174
 8001884:	20000170 	.word	0x20000170
 8001888:	08006760 	.word	0x08006760
 800188c:	40e00000 	.word	0x40e00000

08001890 <MAX31865GetTemperatureMath>:

// Conversion of resistance to temperature
double MAX31865GetTemperatureMath(double PT100_Resistance) {
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	ed87 0b00 	vstr	d0, [r7]
	double MAX31865_PT100_T = 0.0;
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	//If the resistance is high (greater than or equal to 100 ohms) use:
	if (PT100_Resistance >= (double) 100.0) {
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b7d      	ldr	r3, [pc, #500]	@ (8001aa0 <MAX31865GetTemperatureMath+0x210>)
 80018ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018b0:	f7ff f930 	bl	8000b14 <__aeabi_dcmpge>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d03c      	beq.n	8001934 <MAX31865GetTemperatureMath+0xa4>
		double MAX31865MathDiscriminant = (double) 0.00001527480889
				- ((double) -0.00000231
						* (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b78      	ldr	r3, [pc, #480]	@ (8001aa0 <MAX31865GetTemperatureMath+0x210>)
 80018c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018c4:	f7fe ffca 	bl	800085c <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	f04f 0000 	mov.w	r0, #0
 80018d0:	4974      	ldr	r1, [pc, #464]	@ (8001aa4 <MAX31865GetTemperatureMath+0x214>)
 80018d2:	f7fe fce1 	bl	8000298 <__aeabi_dsub>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	a354      	add	r3, pc, #336	@ (adr r3, 8001a30 <MAX31865GetTemperatureMath+0x1a0>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe90 	bl	8000608 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
		double MAX31865MathDiscriminant = (double) 0.00001527480889
 80018f0:	a351      	add	r3, pc, #324	@ (adr r3, 8001a38 <MAX31865GetTemperatureMath+0x1a8>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fcd1 	bl	800029c <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T = ((double) -0.0039083
				+ sqrt(MAX31865MathDiscriminant)) / (double) -0.000001155;
 8001902:	ed97 0b02 	vldr	d0, [r7, #8]
 8001906:	f003 ffc3 	bl	8005890 <sqrt>
 800190a:	ec51 0b10 	vmov	r0, r1, d0
 800190e:	a34c      	add	r3, pc, #304	@ (adr r3, 8001a40 <MAX31865GetTemperatureMath+0x1b0>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fcc0 	bl	8000298 <__aeabi_dsub>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
		MAX31865_PT100_T = ((double) -0.0039083
 8001920:	a349      	add	r3, pc, #292	@ (adr r3, 8001a48 <MAX31865GetTemperatureMath+0x1b8>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe ff99 	bl	800085c <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001932:	e06f      	b.n	8001a14 <MAX31865GetTemperatureMath+0x184>
		// If the resistance is low (less than 100 ohms), another polynomial formula is used to calculate the temperature.
		// fifth degree polynomial approximation
	} else {
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5)
 8001934:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8001a50 <MAX31865GetTemperatureMath+0x1c0>
 8001938:	ed97 0b00 	vldr	d0, [r7]
 800193c:	f003 ff38 	bl	80057b0 <pow>
 8001940:	ec51 0b10 	vmov	r0, r1, d0
 8001944:	a344      	add	r3, pc, #272	@ (adr r3, 8001a58 <MAX31865GetTemperatureMath+0x1c8>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fe5d 	bl	8000608 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4614      	mov	r4, r2
 8001954:	461d      	mov	r5, r3
				- (double) 0.000000066245 * pow(PT100_Resistance, 4)
 8001956:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8001a60 <MAX31865GetTemperatureMath+0x1d0>
 800195a:	ed97 0b00 	vldr	d0, [r7]
 800195e:	f003 ff27 	bl	80057b0 <pow>
 8001962:	ec51 0b10 	vmov	r0, r1, d0
 8001966:	a340      	add	r3, pc, #256	@ (adr r3, 8001a68 <MAX31865GetTemperatureMath+0x1d8>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fe4c 	bl	8000608 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4620      	mov	r0, r4
 8001976:	4629      	mov	r1, r5
 8001978:	f7fe fc8e 	bl	8000298 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4614      	mov	r4, r2
 8001982:	461d      	mov	r5, r3
				- (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8001984:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 8001a70 <MAX31865GetTemperatureMath+0x1e0>
 8001988:	ed97 0b00 	vldr	d0, [r7]
 800198c:	f003 ff10 	bl	80057b0 <pow>
 8001990:	ec51 0b10 	vmov	r0, r1, d0
 8001994:	a338      	add	r3, pc, #224	@ (adr r3, 8001a78 <MAX31865GetTemperatureMath+0x1e8>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe fe35 	bl	8000608 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7fe fc77 	bl	8000298 <__aeabi_dsub>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4614      	mov	r4, r2
 80019b0:	461d      	mov	r5, r3
				+ (double) 0.002320232987 * pow(PT100_Resistance, 2)
 80019b2:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8001a80 <MAX31865GetTemperatureMath+0x1f0>
 80019b6:	ed97 0b00 	vldr	d0, [r7]
 80019ba:	f003 fef9 	bl	80057b0 <pow>
 80019be:	ec51 0b10 	vmov	r0, r1, d0
 80019c2:	a331      	add	r3, pc, #196	@ (adr r3, 8001a88 <MAX31865GetTemperatureMath+0x1f8>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fe1e 	bl	8000608 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fc62 	bl	800029c <__adddf3>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4614      	mov	r4, r2
 80019de:	461d      	mov	r5, r3
				+ (double) 2.229927824035 * PT100_Resistance
 80019e0:	a32b      	add	r3, pc, #172	@ (adr r3, 8001a90 <MAX31865GetTemperatureMath+0x200>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019ea:	f7fe fe0d 	bl	8000608 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4620      	mov	r0, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	f7fe fc51 	bl	800029c <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5)
 8001a02:	a325      	add	r3, pc, #148	@ (adr r3, 8001a98 <MAX31865GetTemperatureMath+0x208>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fc46 	bl	8000298 <__aeabi_dsub>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	e9c7 2304 	strd	r2, r3, [r7, #16]
				- (double) 242.090854986215;
	}
	return MAX31865_PT100_T;
 8001a14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a18:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a20:	eef0 0a67 	vmov.f32	s1, s15
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	f3af 8000 	nop.w
 8001a30:	ee19ce88 	.word	0xee19ce88
 8001a34:	3ec360af 	.word	0x3ec360af
 8001a38:	dfc928d8 	.word	0xdfc928d8
 8001a3c:	3ef0044c 	.word	0x3ef0044c
 8001a40:	4aed641c 	.word	0x4aed641c
 8001a44:	3f700226 	.word	0x3f700226
 8001a48:	ee19ce88 	.word	0xee19ce88
 8001a4c:	beb360af 	.word	0xbeb360af
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40140000 	.word	0x40140000
 8001a58:	e63e6cde 	.word	0xe63e6cde
 8001a5c:	3df28de3 	.word	0x3df28de3
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40100000 	.word	0x40100000
 8001a68:	5d50ae3a 	.word	0x5d50ae3a
 8001a6c:	3e71c852 	.word	0x3e71c852
 8001a70:	00000000 	.word	0x00000000
 8001a74:	40080000 	.word	0x40080000
 8001a78:	6e664b7f 	.word	0x6e664b7f
 8001a7c:	3e88c80b 	.word	0x3e88c80b
 8001a80:	00000000 	.word	0x00000000
 8001a84:	40000000 	.word	0x40000000
 8001a88:	998b63de 	.word	0x998b63de
 8001a8c:	3f6301e1 	.word	0x3f6301e1
 8001a90:	66255dbb 	.word	0x66255dbb
 8001a94:	4001d6e4 	.word	0x4001d6e4
 8001a98:	48b74f1a 	.word	0x48b74f1a
 8001a9c:	406e42e8 	.word	0x406e42e8
 8001aa0:	40590000 	.word	0x40590000
 8001aa4:	3ff00000 	.word	0x3ff00000

08001aa8 <CSSet>:

// CS GND
void CSSet() {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2110      	movs	r1, #16
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <CSSet+0x14>)
 8001ab2:	f000 fcb9 	bl	8002428 <HAL_GPIO_WritePin>
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40020000 	.word	0x40020000

08001ac0 <CSReset>:

// CS VDD
void CSReset() {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_Pin, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <CSReset+0x14>)
 8001aca:	f000 fcad 	bl	8002428 <HAL_GPIO_WritePin>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <SPI1_Init>:
#include "SPI.h"
#include "error_handler.h"

SPI_HandleTypeDef hspi1;

void SPI1_Init(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <SPI1_Init+0x68>)
 8001ade:	4a19      	ldr	r2, [pc, #100]	@ (8001b44 <SPI1_Init+0x6c>)
 8001ae0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <SPI1_Init+0x68>)
 8001ae4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ae8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <SPI1_Init+0x68>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <SPI1_Init+0x68>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af6:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <SPI1_Init+0x68>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001afc:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <SPI1_Init+0x68>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <SPI1_Init+0x68>)
 8001b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b08:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <SPI1_Init+0x68>)
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <SPI1_Init+0x68>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b16:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <SPI1_Init+0x68>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <SPI1_Init+0x68>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001b22:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <SPI1_Init+0x68>)
 8001b24:	220a      	movs	r2, #10
 8001b26:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001b28:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <SPI1_Init+0x68>)
 8001b2a:	f001 f92f 	bl	8002d8c <HAL_SPI_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <SPI1_Init+0x62>
		write_error_flag(true);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f002 fca7 	bl	8004488 <write_error_flag>
	}
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000174 	.word	0x20000174
 8001b44:	40013000 	.word	0x40013000

08001b48 <SPI_Transmit>:

void SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size,
		uint32_t Timeout) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4613      	mov	r3, r2
 8001b56:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(hspi, pData, Size, Timeout);
 8001b58:	88fa      	ldrh	r2, [r7, #6]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f001 f99d 	bl	8002e9e <HAL_SPI_Transmit>
}
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <SPI_Receive>:

void SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size,
		uint32_t Timeout) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive(hspi, pData, Size, Timeout);
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f001 face 	bl	8003124 <HAL_SPI_Receive>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <uartInit>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

static void printUARTConfiguration(UART_HandleTypeDef UartHandle); // function To print the UART configuratión

bool_t uartInit() {
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b92:	b091      	sub	sp, #68	@ 0x44
 8001b94:	af0e      	add	r7, sp, #56	@ 0x38
	bool_t isConnectionSuccesfull = true;
 8001b96:	2301      	movs	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
    // 8N1 cofiguration
	UartHandle3.Instance = USART3;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <uartInit+0x84>)
 8001b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001c18 <uartInit+0x88>)
 8001b9e:	601a      	str	r2, [r3, #0]
	UartHandle3.Init.BaudRate = 9600;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <uartInit+0x84>)
 8001ba2:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ba6:	605a      	str	r2, [r3, #4]
	UartHandle3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <uartInit+0x84>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
	UartHandle3.Init.StopBits = UART_STOPBITS_1;
 8001bae:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <uartInit+0x84>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
	UartHandle3.Init.Parity = UART_PARITY_NONE;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <uartInit+0x84>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
	UartHandle3.Init.Mode = UART_MODE_TX_RX;
 8001bba:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <uartInit+0x84>)
 8001bbc:	220c      	movs	r2, #12
 8001bbe:	615a      	str	r2, [r3, #20]
	UartHandle3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <uartInit+0x84>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
	UartHandle3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <uartInit+0x84>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle3) != HAL_OK) {
 8001bcc:	4811      	ldr	r0, [pc, #68]	@ (8001c14 <uartInit+0x84>)
 8001bce:	f001 feb3 	bl	8003938 <HAL_UART_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <uartInit+0x54>
		write_error_flag(true);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f002 fc55 	bl	8004488 <write_error_flag>
		isConnectionSuccesfull = false;
 8001bde:	2300      	movs	r3, #0
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	e011      	b.n	8001c08 <uartInit+0x78>
	} else {
		printUARTConfiguration(UartHandle3); // If the serial conection is successful, print uart configuration
 8001be4:	4e0b      	ldr	r6, [pc, #44]	@ (8001c14 <uartInit+0x84>)
 8001be6:	466d      	mov	r5, sp
 8001be8:	f106 0410 	add.w	r4, r6, #16
 8001bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c04:	f000 f850 	bl	8001ca8 <printUARTConfiguration>
	}
	return isConnectionSuccesfull;
 8001c08:	79fb      	ldrb	r3, [r7, #7]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200001cc 	.word	0x200001cc
 8001c18:	40004800 	.word	0x40004800

08001c1c <uartSendString>:

void uartSendString(uint8_t *pstring) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	if (pstring == NULL) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10c      	bne.n	8001c44 <uartSendString+0x28>
		write_error_flag(true);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f002 fc2c 	bl	8004488 <write_error_flag>
	}
	while (*pstring != '\0') {
 8001c30:	e008      	b.n	8001c44 <uartSendString+0x28>
		HAL_UART_Transmit(&UartHandle3, pstring++, 1, HAL_MAX_DELAY); // Prints character by character through serial port
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	1c4b      	adds	r3, r1, #1
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4806      	ldr	r0, [pc, #24]	@ (8001c58 <uartSendString+0x3c>)
 8001c40:	f001 feca 	bl	80039d8 <HAL_UART_Transmit>
	while (*pstring != '\0') {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f2      	bne.n	8001c32 <uartSendString+0x16>
	}
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200001cc 	.word	0x200001cc

08001c5c <uartReceiveStringSize>:
	for (uint16_t i = 0; i < size; i++) {
		HAL_UART_Transmit(&UartHandle3, pstring++, 1, HAL_MAX_DELAY); // Prints character by character up to user-defined length through serial port
	}
}

void uartReceiveStringSize(uint8_t *pString, uint16_t size) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&UartHandle3, pString, size, HAL_MAX_DELAY);
 8001c68:	887a      	ldrh	r2, [r7, #2]
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4803      	ldr	r0, [pc, #12]	@ (8001c80 <uartReceiveStringSize+0x24>)
 8001c72:	f001 ff3c 	bl	8003aee <HAL_UART_Receive>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200001cc 	.word	0x200001cc

08001c84 <__io_putchar>:

// Function to redirect the standar output to the usart module
PUTCHAR_PROTOTYPE {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UartHandle3, (uint8_t*) &ch, 1, 0xFFFF);
 8001c8c:	1d39      	adds	r1, r7, #4
 8001c8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c92:	2201      	movs	r2, #1
 8001c94:	4803      	ldr	r0, [pc, #12]	@ (8001ca4 <__io_putchar+0x20>)
 8001c96:	f001 fe9f 	bl	80039d8 <HAL_UART_Transmit>

	return ch;
 8001c9a:	687b      	ldr	r3, [r7, #4]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200001cc 	.word	0x200001cc

08001ca8 <printUARTConfiguration>:

static void printUARTConfiguration(UART_HandleTypeDef UartHandle) {
 8001ca8:	b084      	sub	sp, #16
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	f107 0c08 	add.w	ip, r7, #8
 8001cb2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// print configuration parameters through serial terminal
	printf("\rConfiguracion del UART:\n");
 8001cb6:	482a      	ldr	r0, [pc, #168]	@ (8001d60 <printUARTConfiguration+0xb8>)
 8001cb8:	f002 fd40 	bl	800473c <puts>
	printf("\rBaudRate: %lu\n", UartHandle.Init.BaudRate);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4828      	ldr	r0, [pc, #160]	@ (8001d64 <printUARTConfiguration+0xbc>)
 8001cc2:	f002 fcd3 	bl	800466c <iprintf>
	printf("\rWordLength: %d bits\n",
			(UartHandle.Init.WordLength == UART_WORDLENGTH_8B) ? 8 : 9);
 8001cc6:	693b      	ldr	r3, [r7, #16]
	printf("\rWordLength: %d bits\n",
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <printUARTConfiguration+0x28>
 8001ccc:	2308      	movs	r3, #8
 8001cce:	e000      	b.n	8001cd2 <printUARTConfiguration+0x2a>
 8001cd0:	2309      	movs	r3, #9
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4824      	ldr	r0, [pc, #144]	@ (8001d68 <printUARTConfiguration+0xc0>)
 8001cd6:	f002 fcc9 	bl	800466c <iprintf>
	printf("\rStopBits: %s\n",
			(UartHandle.Init.StopBits == UART_STOPBITS_1) ? "1 bit" : "2 bits");
 8001cda:	697b      	ldr	r3, [r7, #20]
	printf("\rStopBits: %s\n",
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <printUARTConfiguration+0x3c>
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <printUARTConfiguration+0xc4>)
 8001ce2:	e000      	b.n	8001ce6 <printUARTConfiguration+0x3e>
 8001ce4:	4b22      	ldr	r3, [pc, #136]	@ (8001d70 <printUARTConfiguration+0xc8>)
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4822      	ldr	r0, [pc, #136]	@ (8001d74 <printUARTConfiguration+0xcc>)
 8001cea:	f002 fcbf 	bl	800466c <iprintf>
	printf("\rParity: %s\n",
			(UartHandle.Init.Parity == UART_PARITY_NONE) ? "Ninguno" :
 8001cee:	69bb      	ldr	r3, [r7, #24]
	printf("\rParity: %s\n",
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <printUARTConfiguration+0x5c>
			(UartHandle.Init.Parity == UART_PARITY_EVEN) ? "Par" : "Impar");
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cfa:	d101      	bne.n	8001d00 <printUARTConfiguration+0x58>
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <printUARTConfiguration+0xd0>)
 8001cfe:	e002      	b.n	8001d06 <printUARTConfiguration+0x5e>
 8001d00:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <printUARTConfiguration+0xd4>)
 8001d02:	e000      	b.n	8001d06 <printUARTConfiguration+0x5e>
	printf("\rParity: %s\n",
 8001d04:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <printUARTConfiguration+0xd8>)
 8001d06:	4619      	mov	r1, r3
 8001d08:	481e      	ldr	r0, [pc, #120]	@ (8001d84 <printUARTConfiguration+0xdc>)
 8001d0a:	f002 fcaf 	bl	800466c <iprintf>
	printf("\rControl de flujo: %s\n",
			(UartHandle.Init.HwFlowCtl == UART_HWCONTROL_NONE) ?
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
	printf("\rControl de flujo: %s\n",
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <printUARTConfiguration+0x70>
 8001d14:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <printUARTConfiguration+0xe0>)
 8001d16:	e000      	b.n	8001d1a <printUARTConfiguration+0x72>
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <printUARTConfiguration+0xe4>)
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	481c      	ldr	r0, [pc, #112]	@ (8001d90 <printUARTConfiguration+0xe8>)
 8001d1e:	f002 fca5 	bl	800466c <iprintf>
					"Deshabilitado" : "Habilitado");
	printf("\rModo: %s\n",
			(UartHandle.Init.Mode == UART_MODE_TX) ? "Transmision" :
 8001d22:	69fb      	ldr	r3, [r7, #28]
	printf("\rModo: %s\n",
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d006      	beq.n	8001d36 <printUARTConfiguration+0x8e>
			(UartHandle.Init.Mode == UART_MODE_RX) ?
 8001d28:	69fb      	ldr	r3, [r7, #28]
					"Recepcion" : "Transmision y Recepcion");
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d101      	bne.n	8001d32 <printUARTConfiguration+0x8a>
 8001d2e:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <printUARTConfiguration+0xec>)
 8001d30:	e002      	b.n	8001d38 <printUARTConfiguration+0x90>
 8001d32:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <printUARTConfiguration+0xf0>)
 8001d34:	e000      	b.n	8001d38 <printUARTConfiguration+0x90>
	printf("\rModo: %s\n",
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <printUARTConfiguration+0xf4>)
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4819      	ldr	r0, [pc, #100]	@ (8001da0 <printUARTConfiguration+0xf8>)
 8001d3c:	f002 fc96 	bl	800466c <iprintf>
	printf("\rOversampling: %d\n",
			(UartHandle.Init.OverSampling == UART_OVERSAMPLING_16) ? 16 : 8);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	printf("\rOversampling: %d\n",
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <printUARTConfiguration+0xa2>
 8001d46:	2310      	movs	r3, #16
 8001d48:	e000      	b.n	8001d4c <printUARTConfiguration+0xa4>
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4815      	ldr	r0, [pc, #84]	@ (8001da4 <printUARTConfiguration+0xfc>)
 8001d50:	f002 fc8c 	bl	800466c <iprintf>
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d5c:	b004      	add	sp, #16
 8001d5e:	4770      	bx	lr
 8001d60:	08006770 	.word	0x08006770
 8001d64:	0800678c 	.word	0x0800678c
 8001d68:	0800679c 	.word	0x0800679c
 8001d6c:	080067b4 	.word	0x080067b4
 8001d70:	080067bc 	.word	0x080067bc
 8001d74:	080067c4 	.word	0x080067c4
 8001d78:	080067d4 	.word	0x080067d4
 8001d7c:	080067d8 	.word	0x080067d8
 8001d80:	080067e0 	.word	0x080067e0
 8001d84:	080067e8 	.word	0x080067e8
 8001d88:	080067f8 	.word	0x080067f8
 8001d8c:	08006808 	.word	0x08006808
 8001d90:	08006814 	.word	0x08006814
 8001d94:	0800682c 	.word	0x0800682c
 8001d98:	08006838 	.word	0x08006838
 8001d9c:	08006850 	.word	0x08006850
 8001da0:	0800685c 	.word	0x0800685c
 8001da4:	08006868 	.word	0x08006868

08001da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0d      	ldr	r2, [pc, #52]	@ (8001de8 <HAL_Init+0x40>)
 8001db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <HAL_Init+0x40>)
 8001dbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <HAL_Init+0x40>)
 8001dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f931 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f000 f808 	bl	8001dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ddc:	f7ff f896 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023c00 	.word	0x40023c00

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_InitTick+0x54>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <HAL_InitTick+0x58>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f93b 	bl	8002086 <HAL_SYSTICK_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00e      	b.n	8001e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d80a      	bhi.n	8001e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f000 f911 	bl	800204e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e2c:	4a06      	ldr	r2, [pc, #24]	@ (8001e48 <HAL_InitTick+0x5c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000000 	.word	0x20000000
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	20000008 	.word	0x20000008

08001e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_IncTick+0x20>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_IncTick+0x24>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	@ (8001e70 <HAL_IncTick+0x24>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2000000c 	.word	0x2000000c
 8001e70:	20000214 	.word	0x20000214

08001e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b03      	ldr	r3, [pc, #12]	@ (8001e88 <HAL_GetTick+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000214 	.word	0x20000214

08001e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff ffee 	bl	8001e74 <HAL_GetTick>
 8001e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d005      	beq.n	8001eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <HAL_Delay+0x44>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eb2:	bf00      	nop
 8001eb4:	f7ff ffde 	bl	8001e74 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d8f7      	bhi.n	8001eb4 <HAL_Delay+0x28>
  {
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000000c 	.word	0x2000000c

08001ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001efc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f06:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	60d3      	str	r3, [r2, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	@ (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	@ (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002004:	d301      	bcc.n	800200a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002006:	2301      	movs	r3, #1
 8002008:	e00f      	b.n	800202a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <SysTick_Config+0x40>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002012:	210f      	movs	r1, #15
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f7ff ff8e 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <SysTick_Config+0x40>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002022:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <SysTick_Config+0x40>)
 8002024:	2207      	movs	r2, #7
 8002026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	e000e010 	.word	0xe000e010

08002038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff47 	bl	8001ed4 <__NVIC_SetPriorityGrouping>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002060:	f7ff ff5c 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 8002064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f7ff ff8e 	bl	8001f8c <NVIC_EncodePriority>
 8002070:	4602      	mov	r2, r0
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <__NVIC_SetPriority>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffb0 	bl	8001ff4 <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	@ 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e177      	b.n	80023ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 8166 	bne.w	80023a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d005      	beq.n	80020f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d130      	bne.n	8002154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002128:	2201      	movs	r2, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 0201 	and.w	r2, r3, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b03      	cmp	r3, #3
 800215e:	d017      	beq.n	8002190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d123      	bne.n	80021e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3208      	adds	r2, #8
 80021a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	220f      	movs	r2, #15
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	08da      	lsrs	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3208      	adds	r2, #8
 80021de:	69b9      	ldr	r1, [r7, #24]
 80021e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0203 	and.w	r2, r3, #3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80c0 	beq.w	80023a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b66      	ldr	r3, [pc, #408]	@ (80023c4 <HAL_GPIO_Init+0x324>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	4a65      	ldr	r2, [pc, #404]	@ (80023c4 <HAL_GPIO_Init+0x324>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002234:	6453      	str	r3, [r2, #68]	@ 0x44
 8002236:	4b63      	ldr	r3, [pc, #396]	@ (80023c4 <HAL_GPIO_Init+0x324>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002242:	4a61      	ldr	r2, [pc, #388]	@ (80023c8 <HAL_GPIO_Init+0x328>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a58      	ldr	r2, [pc, #352]	@ (80023cc <HAL_GPIO_Init+0x32c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d037      	beq.n	80022de <HAL_GPIO_Init+0x23e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a57      	ldr	r2, [pc, #348]	@ (80023d0 <HAL_GPIO_Init+0x330>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d031      	beq.n	80022da <HAL_GPIO_Init+0x23a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a56      	ldr	r2, [pc, #344]	@ (80023d4 <HAL_GPIO_Init+0x334>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02b      	beq.n	80022d6 <HAL_GPIO_Init+0x236>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a55      	ldr	r2, [pc, #340]	@ (80023d8 <HAL_GPIO_Init+0x338>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d025      	beq.n	80022d2 <HAL_GPIO_Init+0x232>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a54      	ldr	r2, [pc, #336]	@ (80023dc <HAL_GPIO_Init+0x33c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <HAL_GPIO_Init+0x22e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a53      	ldr	r2, [pc, #332]	@ (80023e0 <HAL_GPIO_Init+0x340>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x22a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a52      	ldr	r2, [pc, #328]	@ (80023e4 <HAL_GPIO_Init+0x344>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x226>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a51      	ldr	r2, [pc, #324]	@ (80023e8 <HAL_GPIO_Init+0x348>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x222>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a50      	ldr	r2, [pc, #320]	@ (80023ec <HAL_GPIO_Init+0x34c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x21e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4f      	ldr	r2, [pc, #316]	@ (80023f0 <HAL_GPIO_Init+0x350>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x21a>
 80022b6:	2309      	movs	r3, #9
 80022b8:	e012      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022ba:	230a      	movs	r3, #10
 80022bc:	e010      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022be:	2308      	movs	r3, #8
 80022c0:	e00e      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e00c      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022c6:	2306      	movs	r3, #6
 80022c8:	e00a      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022ca:	2305      	movs	r3, #5
 80022cc:	e008      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022ce:	2304      	movs	r3, #4
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e004      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e002      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022de:	2300      	movs	r3, #0
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	f002 0203 	and.w	r2, r2, #3
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	4093      	lsls	r3, r2
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f0:	4935      	ldr	r1, [pc, #212]	@ (80023c8 <HAL_GPIO_Init+0x328>)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fe:	4b3d      	ldr	r3, [pc, #244]	@ (80023f4 <HAL_GPIO_Init+0x354>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002322:	4a34      	ldr	r2, [pc, #208]	@ (80023f4 <HAL_GPIO_Init+0x354>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002328:	4b32      	ldr	r3, [pc, #200]	@ (80023f4 <HAL_GPIO_Init+0x354>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800234c:	4a29      	ldr	r2, [pc, #164]	@ (80023f4 <HAL_GPIO_Init+0x354>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002352:	4b28      	ldr	r3, [pc, #160]	@ (80023f4 <HAL_GPIO_Init+0x354>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002376:	4a1f      	ldr	r2, [pc, #124]	@ (80023f4 <HAL_GPIO_Init+0x354>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237c:	4b1d      	ldr	r3, [pc, #116]	@ (80023f4 <HAL_GPIO_Init+0x354>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a0:	4a14      	ldr	r2, [pc, #80]	@ (80023f4 <HAL_GPIO_Init+0x354>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3301      	adds	r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	f67f ae84 	bls.w	80020bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3724      	adds	r7, #36	@ 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40013800 	.word	0x40013800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020c00 	.word	0x40020c00
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40021400 	.word	0x40021400
 80023e4:	40021800 	.word	0x40021800
 80023e8:	40021c00 	.word	0x40021c00
 80023ec:	40022000 	.word	0x40022000
 80023f0:	40022400 	.word	0x40022400
 80023f4:	40013c00 	.word	0x40013c00

080023f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e001      	b.n	800241a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
 8002434:	4613      	mov	r3, r2
 8002436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002438:	787b      	ldrb	r3, [r7, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002444:	e003      	b.n	800244e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	619a      	str	r2, [r3, #24]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e267      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d075      	beq.n	8002566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247a:	4b88      	ldr	r3, [pc, #544]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b04      	cmp	r3, #4
 8002484:	d00c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002486:	4b85      	ldr	r3, [pc, #532]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800248e:	2b08      	cmp	r3, #8
 8002490:	d112      	bne.n	80024b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002492:	4b82      	ldr	r3, [pc, #520]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800249e:	d10b      	bne.n	80024b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	4b7e      	ldr	r3, [pc, #504]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d05b      	beq.n	8002564 <HAL_RCC_OscConfig+0x108>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d157      	bne.n	8002564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e242      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c0:	d106      	bne.n	80024d0 <HAL_RCC_OscConfig+0x74>
 80024c2:	4b76      	ldr	r3, [pc, #472]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a75      	ldr	r2, [pc, #468]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e01d      	b.n	800250c <HAL_RCC_OscConfig+0xb0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x98>
 80024da:	4b70      	ldr	r3, [pc, #448]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6f      	ldr	r2, [pc, #444]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	4b6d      	ldr	r3, [pc, #436]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a6c      	ldr	r2, [pc, #432]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e00b      	b.n	800250c <HAL_RCC_OscConfig+0xb0>
 80024f4:	4b69      	ldr	r3, [pc, #420]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a68      	ldr	r2, [pc, #416]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80024fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b66      	ldr	r3, [pc, #408]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a65      	ldr	r2, [pc, #404]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800250a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7ff fcae 	bl	8001e74 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff fcaa 	bl	8001e74 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	@ 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e207      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b5b      	ldr	r3, [pc, #364]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0xc0>
 800253a:	e014      	b.n	8002566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff fc9a 	bl	8001e74 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff fc96 	bl	8001e74 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1f3      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	4b51      	ldr	r3, [pc, #324]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0xe8>
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d063      	beq.n	800263a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002572:	4b4a      	ldr	r3, [pc, #296]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b47      	ldr	r3, [pc, #284]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002586:	2b08      	cmp	r3, #8
 8002588:	d11c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258a:	4b44      	ldr	r3, [pc, #272]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d116      	bne.n	80025c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	4b41      	ldr	r3, [pc, #260]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_RCC_OscConfig+0x152>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e1c7      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ae:	4b3b      	ldr	r3, [pc, #236]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4937      	ldr	r1, [pc, #220]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	e03a      	b.n	800263a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d020      	beq.n	800260e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025cc:	4b34      	ldr	r3, [pc, #208]	@ (80026a0 <HAL_RCC_OscConfig+0x244>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7ff fc4f 	bl	8001e74 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025da:	f7ff fc4b 	bl	8001e74 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e1a8      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	4b2b      	ldr	r3, [pc, #172]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f8:	4b28      	ldr	r3, [pc, #160]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4925      	ldr	r1, [pc, #148]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]
 800260c:	e015      	b.n	800263a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260e:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <HAL_RCC_OscConfig+0x244>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7ff fc2e 	bl	8001e74 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261c:	f7ff fc2a 	bl	8001e74 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e187      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d036      	beq.n	80026b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <HAL_RCC_OscConfig+0x248>)
 8002650:	2201      	movs	r2, #1
 8002652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7ff fc0e 	bl	8001e74 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265c:	f7ff fc0a 	bl	8001e74 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e167      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_RCC_OscConfig+0x240>)
 8002670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x200>
 800267a:	e01b      	b.n	80026b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267c:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <HAL_RCC_OscConfig+0x248>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002682:	f7ff fbf7 	bl	8001e74 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	e00e      	b.n	80026a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268a:	f7ff fbf3 	bl	8001e74 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d907      	bls.n	80026a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e150      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
 800269c:	40023800 	.word	0x40023800
 80026a0:	42470000 	.word	0x42470000
 80026a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	4b88      	ldr	r3, [pc, #544]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80026aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ea      	bne.n	800268a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8097 	beq.w	80027f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c6:	4b81      	ldr	r3, [pc, #516]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	4b7d      	ldr	r3, [pc, #500]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	4a7c      	ldr	r2, [pc, #496]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e2:	4b7a      	ldr	r3, [pc, #488]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f2:	4b77      	ldr	r3, [pc, #476]	@ (80028d0 <HAL_RCC_OscConfig+0x474>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fe:	4b74      	ldr	r3, [pc, #464]	@ (80028d0 <HAL_RCC_OscConfig+0x474>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a73      	ldr	r2, [pc, #460]	@ (80028d0 <HAL_RCC_OscConfig+0x474>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7ff fbb3 	bl	8001e74 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7ff fbaf 	bl	8001e74 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e10c      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b6a      	ldr	r3, [pc, #424]	@ (80028d0 <HAL_RCC_OscConfig+0x474>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x2ea>
 8002738:	4b64      	ldr	r3, [pc, #400]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273c:	4a63      	ldr	r2, [pc, #396]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	@ 0x70
 8002744:	e01c      	b.n	8002780 <HAL_RCC_OscConfig+0x324>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x30c>
 800274e:	4b5f      	ldr	r3, [pc, #380]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	4a5e      	ldr	r2, [pc, #376]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	6713      	str	r3, [r2, #112]	@ 0x70
 800275a:	4b5c      	ldr	r3, [pc, #368]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	4a5b      	ldr	r2, [pc, #364]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	@ 0x70
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0x324>
 8002768:	4b58      	ldr	r3, [pc, #352]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276c:	4a57      	ldr	r2, [pc, #348]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6713      	str	r3, [r2, #112]	@ 0x70
 8002774:	4b55      	ldr	r3, [pc, #340]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	4a54      	ldr	r2, [pc, #336]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 800277a:	f023 0304 	bic.w	r3, r3, #4
 800277e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d015      	beq.n	80027b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7ff fb74 	bl	8001e74 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7ff fb70 	bl	8001e74 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0cb      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	4b49      	ldr	r3, [pc, #292]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ee      	beq.n	8002790 <HAL_RCC_OscConfig+0x334>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b4:	f7ff fb5e 	bl	8001e74 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7ff fb5a 	bl	8001e74 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0b5      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	4b3e      	ldr	r3, [pc, #248]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ee      	bne.n	80027bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e4:	4b39      	ldr	r3, [pc, #228]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	4a38      	ldr	r2, [pc, #224]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80027ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80a1 	beq.w	800293c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027fa:	4b34      	ldr	r3, [pc, #208]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b08      	cmp	r3, #8
 8002804:	d05c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d141      	bne.n	8002892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <HAL_RCC_OscConfig+0x478>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff fb2e 	bl	8001e74 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7ff fb2a 	bl	8001e74 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e087      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	4b27      	ldr	r3, [pc, #156]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	3b01      	subs	r3, #1
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	061b      	lsls	r3, r3, #24
 800285e:	491b      	ldr	r1, [pc, #108]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <HAL_RCC_OscConfig+0x478>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7ff fb03 	bl	8001e74 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002872:	f7ff faff 	bl	8001e74 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e05c      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x416>
 8002890:	e054      	b.n	800293c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002892:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <HAL_RCC_OscConfig+0x478>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff faec 	bl	8001e74 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a0:	f7ff fae8 	bl	8001e74 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e045      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_RCC_OscConfig+0x470>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x444>
 80028be:	e03d      	b.n	800293c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e038      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000
 80028d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <HAL_RCC_OscConfig+0x4ec>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d028      	beq.n	8002938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d121      	bne.n	8002938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d11a      	bne.n	8002938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002908:	4013      	ands	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800290e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002910:	4293      	cmp	r3, r2
 8002912:	d111      	bne.n	8002938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	3b01      	subs	r3, #1
 8002922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d107      	bne.n	8002938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800

0800294c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0cc      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002960:	4b68      	ldr	r3, [pc, #416]	@ (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d90c      	bls.n	8002988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b65      	ldr	r3, [pc, #404]	@ (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b63      	ldr	r3, [pc, #396]	@ (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0b8      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a0:	4b59      	ldr	r3, [pc, #356]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a58      	ldr	r2, [pc, #352]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b8:	4b53      	ldr	r3, [pc, #332]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a52      	ldr	r2, [pc, #328]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	4b50      	ldr	r3, [pc, #320]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	494d      	ldr	r1, [pc, #308]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d044      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	4b47      	ldr	r3, [pc, #284]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d119      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e07f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e06f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e067      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2a:	4b37      	ldr	r3, [pc, #220]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f023 0203 	bic.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4934      	ldr	r1, [pc, #208]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a3c:	f7ff fa1a 	bl	8001e74 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a44:	f7ff fa16 	bl	8001e74 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e04f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 020c 	and.w	r2, r3, #12
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1eb      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b25      	ldr	r3, [pc, #148]	@ (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d20c      	bcs.n	8002a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b22      	ldr	r3, [pc, #136]	@ (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e032      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4916      	ldr	r1, [pc, #88]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	490e      	ldr	r1, [pc, #56]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ad2:	f000 f821 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	490a      	ldr	r1, [pc, #40]	@ (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	5ccb      	ldrb	r3, [r1, r3]
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aee:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff f97a 	bl	8001dec <HAL_InitTick>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	0800687c 	.word	0x0800687c
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000008 	.word	0x20000008

08002b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b1c:	b094      	sub	sp, #80	@ 0x50
 8002b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b24:	2300      	movs	r3, #0
 8002b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b28:	2300      	movs	r3, #0
 8002b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b30:	4b79      	ldr	r3, [pc, #484]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d00d      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x40>
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	f200 80e1 	bhi.w	8002d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x34>
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b4a:	e0db      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b4c:	4b73      	ldr	r3, [pc, #460]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b50:	e0db      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b52:	4b73      	ldr	r3, [pc, #460]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b56:	e0d8      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b58:	4b6f      	ldr	r3, [pc, #444]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b60:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b62:	4b6d      	ldr	r3, [pc, #436]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d063      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	2200      	movs	r2, #0
 8002b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b82:	2300      	movs	r3, #0
 8002b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	462b      	mov	r3, r5
 8002b8e:	f04f 0000 	mov.w	r0, #0
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	0159      	lsls	r1, r3, #5
 8002b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9c:	0150      	lsls	r0, r2, #5
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	1a51      	subs	r1, r2, r1
 8002ba6:	6139      	str	r1, [r7, #16]
 8002ba8:	4629      	mov	r1, r5
 8002baa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	018b      	lsls	r3, r1, #6
 8002bc0:	4651      	mov	r1, sl
 8002bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	018a      	lsls	r2, r1, #6
 8002bca:	4651      	mov	r1, sl
 8002bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8002bd0:	4659      	mov	r1, fp
 8002bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bea:	4690      	mov	r8, r2
 8002bec:	4699      	mov	r9, r3
 8002bee:	4623      	mov	r3, r4
 8002bf0:	eb18 0303 	adds.w	r3, r8, r3
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	462b      	mov	r3, r5
 8002bf8:	eb49 0303 	adc.w	r3, r9, r3
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	024b      	lsls	r3, r1, #9
 8002c0e:	4621      	mov	r1, r4
 8002c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c14:	4621      	mov	r1, r4
 8002c16:	024a      	lsls	r2, r1, #9
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c1e:	2200      	movs	r2, #0
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c28:	f7fd ffee 	bl	8000c08 <__aeabi_uldivmod>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4613      	mov	r3, r2
 8002c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c34:	e058      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c36:	4b38      	ldr	r3, [pc, #224]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	4611      	mov	r1, r2
 8002c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c46:	623b      	str	r3, [r7, #32]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c50:	4642      	mov	r2, r8
 8002c52:	464b      	mov	r3, r9
 8002c54:	f04f 0000 	mov.w	r0, #0
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	0159      	lsls	r1, r3, #5
 8002c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c62:	0150      	lsls	r0, r2, #5
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4641      	mov	r1, r8
 8002c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c6e:	4649      	mov	r1, r9
 8002c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c88:	ebb2 040a 	subs.w	r4, r2, sl
 8002c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	00eb      	lsls	r3, r5, #3
 8002c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9e:	00e2      	lsls	r2, r4, #3
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	461d      	mov	r5, r3
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	18e3      	adds	r3, r4, r3
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	464b      	mov	r3, r9
 8002cac:	eb45 0303 	adc.w	r3, r5, r3
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	028b      	lsls	r3, r1, #10
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc8:	4621      	mov	r1, r4
 8002cca:	028a      	lsls	r2, r1, #10
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	61fa      	str	r2, [r7, #28]
 8002cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cdc:	f7fd ff94 	bl	8000c08 <__aeabi_uldivmod>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d02:	e002      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3750      	adds	r7, #80	@ 0x50
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	00f42400 	.word	0x00f42400
 8002d20:	007a1200 	.word	0x007a1200

08002d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d28:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000000 	.word	0x20000000

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d40:	f7ff fff0 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	0a9b      	lsrs	r3, r3, #10
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	@ (8002d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	0800688c 	.word	0x0800688c

08002d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d68:	f7ff ffdc 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0b5b      	lsrs	r3, r3, #13
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	@ (8002d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	0800688c 	.word	0x0800688c

08002d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07b      	b.n	8002e96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d108      	bne.n	8002db8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dae:	d009      	beq.n	8002dc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
 8002db6:	e005      	b.n	8002dc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe f8bc 	bl	8000f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e48:	ea42 0103 	orr.w	r1, r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	f003 0104 	and.w	r1, r3, #4
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	f003 0210 	and.w	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b088      	sub	sp, #32
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_SPI_Transmit+0x22>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e12d      	b.n	800311c <HAL_SPI_Transmit+0x27e>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ec8:	f7fe ffd4 	bl	8001e74 <HAL_GetTick>
 8002ecc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d002      	beq.n	8002ee4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ee2:	e116      	b.n	8003112 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_SPI_Transmit+0x52>
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ef4:	e10d      	b.n	8003112 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2203      	movs	r2, #3
 8002efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f3c:	d10f      	bne.n	8002f5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	d007      	beq.n	8002f7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f84:	d14f      	bne.n	8003026 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_SPI_Transmit+0xf6>
 8002f8e:	8afb      	ldrh	r3, [r7, #22]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d142      	bne.n	800301a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	881a      	ldrh	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	1c9a      	adds	r2, r3, #2
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fb8:	e02f      	b.n	800301a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d112      	bne.n	8002fee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fcc:	881a      	ldrh	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	1c9a      	adds	r2, r3, #2
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fec:	e015      	b.n	800301a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fee:	f7fe ff41 	bl	8001e74 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d803      	bhi.n	8003006 <HAL_SPI_Transmit+0x168>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d102      	bne.n	800300c <HAL_SPI_Transmit+0x16e>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003018:	e07b      	b.n	8003112 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1ca      	bne.n	8002fba <HAL_SPI_Transmit+0x11c>
 8003024:	e050      	b.n	80030c8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_SPI_Transmit+0x196>
 800302e:	8afb      	ldrh	r3, [r7, #22]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d144      	bne.n	80030be <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800305a:	e030      	b.n	80030be <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	d113      	bne.n	8003092 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	7812      	ldrb	r2, [r2, #0]
 8003076:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003090:	e015      	b.n	80030be <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003092:	f7fe feef 	bl	8001e74 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d803      	bhi.n	80030aa <HAL_SPI_Transmit+0x20c>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d102      	bne.n	80030b0 <HAL_SPI_Transmit+0x212>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80030bc:	e029      	b.n	8003112 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1c9      	bne.n	800305c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	6839      	ldr	r1, [r7, #0]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 fbdf 	bl	8003890 <SPI_EndRxTxTransaction>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e003      	b.n	8003112 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800311a:	7ffb      	ldrb	r3, [r7, #31]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003144:	2302      	movs	r3, #2
 8003146:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003148:	e0fb      	b.n	8003342 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003152:	d112      	bne.n	800317a <HAL_SPI_Receive+0x56>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10e      	bne.n	800317a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2204      	movs	r2, #4
 8003160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f8ef 	bl	8003354 <HAL_SPI_TransmitReceive>
 8003176:	4603      	mov	r3, r0
 8003178:	e0e8      	b.n	800334c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_SPI_Receive+0x64>
 8003184:	2302      	movs	r3, #2
 8003186:	e0e1      	b.n	800334c <HAL_SPI_Receive+0x228>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003190:	f7fe fe70 	bl	8001e74 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_SPI_Receive+0x7e>
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031a6:	e0cc      	b.n	8003342 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2204      	movs	r2, #4
 80031ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	88fa      	ldrh	r2, [r7, #6]
 80031c6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ee:	d10f      	bne.n	8003210 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800320e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321a:	2b40      	cmp	r3, #64	@ 0x40
 800321c:	d007      	beq.n	800322e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d16a      	bne.n	800330c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003236:	e032      	b.n	800329e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d115      	bne.n	8003272 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f103 020c 	add.w	r2, r3, #12
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003252:	7812      	ldrb	r2, [r2, #0]
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003270:	e015      	b.n	800329e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003272:	f7fe fdff 	bl	8001e74 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d803      	bhi.n	800328a <HAL_SPI_Receive+0x166>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d102      	bne.n	8003290 <HAL_SPI_Receive+0x16c>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800329c:	e051      	b.n	8003342 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1c7      	bne.n	8003238 <HAL_SPI_Receive+0x114>
 80032a8:	e035      	b.n	8003316 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d113      	bne.n	80032e0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c2:	b292      	uxth	r2, r2
 80032c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ca:	1c9a      	adds	r2, r3, #2
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032de:	e015      	b.n	800330c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032e0:	f7fe fdc8 	bl	8001e74 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d803      	bhi.n	80032f8 <HAL_SPI_Receive+0x1d4>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d102      	bne.n	80032fe <HAL_SPI_Receive+0x1da>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800330a:	e01a      	b.n	8003342 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1c9      	bne.n	80032aa <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa52 	bl	80037c4 <SPI_EndRxTransaction>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	75fb      	strb	r3, [r7, #23]
 8003338:	e003      	b.n	8003342 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800334a:	7dfb      	ldrb	r3, [r7, #23]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	@ 0x30
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003362:	2301      	movs	r3, #1
 8003364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_SPI_TransmitReceive+0x26>
 8003376:	2302      	movs	r3, #2
 8003378:	e198      	b.n	80036ac <HAL_SPI_TransmitReceive+0x358>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003382:	f7fe fd77 	bl	8001e74 <HAL_GetTick>
 8003386:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800339c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d00f      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x70>
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033aa:	d107      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x68>
 80033b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d003      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
 80033be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80033c2:	e16d      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x82>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x82>
 80033d0:	887b      	ldrh	r3, [r7, #2]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80033dc:	e160      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d003      	beq.n	80033f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2205      	movs	r2, #5
 80033ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	887a      	ldrh	r2, [r7, #2]
 8003402:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b40      	cmp	r3, #64	@ 0x40
 8003434:	d007      	beq.n	8003446 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800344e:	d17c      	bne.n	800354a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_SPI_TransmitReceive+0x10a>
 8003458:	8b7b      	ldrh	r3, [r7, #26]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d16a      	bne.n	8003534 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	881a      	ldrh	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	1c9a      	adds	r2, r3, #2
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003482:	e057      	b.n	8003534 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	d11b      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x176>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d016      	beq.n	80034ca <HAL_SPI_TransmitReceive+0x176>
 800349c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d113      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	881a      	ldrh	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	1c9a      	adds	r2, r3, #2
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d119      	bne.n	800350c <HAL_SPI_TransmitReceive+0x1b8>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d014      	beq.n	800350c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	b292      	uxth	r2, r2
 80034ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003508:	2301      	movs	r3, #1
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800350c:	f7fe fcb2 	bl	8001e74 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003518:	429a      	cmp	r2, r3
 800351a:	d80b      	bhi.n	8003534 <HAL_SPI_TransmitReceive+0x1e0>
 800351c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d007      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003532:	e0b5      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1a2      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x130>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d19d      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x130>
 8003548:	e080      	b.n	800364c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_SPI_TransmitReceive+0x204>
 8003552:	8b7b      	ldrh	r3, [r7, #26]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d16f      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	7812      	ldrb	r2, [r2, #0]
 8003564:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800357e:	e05b      	b.n	8003638 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d11c      	bne.n	80035c8 <HAL_SPI_TransmitReceive+0x274>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d017      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x274>
 8003598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d114      	bne.n	80035c8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	7812      	ldrb	r2, [r2, #0]
 80035aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d119      	bne.n	800360a <HAL_SPI_TransmitReceive+0x2b6>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d014      	beq.n	800360a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003606:	2301      	movs	r3, #1
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800360a:	f7fe fc33 	bl	8001e74 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003616:	429a      	cmp	r2, r3
 8003618:	d803      	bhi.n	8003622 <HAL_SPI_TransmitReceive+0x2ce>
 800361a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d102      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x2d4>
 8003622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003636:	e033      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d19e      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x22c>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d199      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800364c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f91d 	bl	8003890 <SPI_EndRxTxTransaction>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003668:	e01a      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003696:	e003      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80036a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3730      	adds	r7, #48	@ 0x30
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036c4:	f7fe fbd6 	bl	8001e74 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4413      	add	r3, r2
 80036d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036d4:	f7fe fbce 	bl	8001e74 <HAL_GetTick>
 80036d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036da:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	015b      	lsls	r3, r3, #5
 80036e0:	0d1b      	lsrs	r3, r3, #20
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ea:	e054      	b.n	8003796 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d050      	beq.n	8003796 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036f4:	f7fe fbbe 	bl	8001e74 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	429a      	cmp	r2, r3
 8003702:	d902      	bls.n	800370a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d13d      	bne.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003718:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003722:	d111      	bne.n	8003748 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800372c:	d004      	beq.n	8003738 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003736:	d107      	bne.n	8003748 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003746:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003750:	d10f      	bne.n	8003772 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003770:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e017      	b.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3b01      	subs	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d19b      	bne.n	80036ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000000 	.word	0x20000000

080037c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037d8:	d111      	bne.n	80037fe <SPI_EndRxTransaction+0x3a>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037e2:	d004      	beq.n	80037ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ec:	d107      	bne.n	80037fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003806:	d12a      	bne.n	800385e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003810:	d012      	beq.n	8003838 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2200      	movs	r2, #0
 800381a:	2180      	movs	r1, #128	@ 0x80
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff ff49 	bl	80036b4 <SPI_WaitFlagStateUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02d      	beq.n	8003884 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e026      	b.n	8003886 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2200      	movs	r2, #0
 8003840:	2101      	movs	r1, #1
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff ff36 	bl	80036b4 <SPI_WaitFlagStateUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01a      	beq.n	8003884 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	f043 0220 	orr.w	r2, r3, #32
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e013      	b.n	8003886 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2200      	movs	r2, #0
 8003866:	2101      	movs	r1, #1
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff ff23 	bl	80036b4 <SPI_WaitFlagStateUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e000      	b.n	8003886 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2201      	movs	r2, #1
 80038a4:	2102      	movs	r1, #2
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f7ff ff04 	bl	80036b4 <SPI_WaitFlagStateUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e032      	b.n	8003928 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003930 <SPI_EndRxTxTransaction+0xa0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003934 <SPI_EndRxTxTransaction+0xa4>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	0d5b      	lsrs	r3, r3, #21
 80038ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038e0:	d112      	bne.n	8003908 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2180      	movs	r1, #128	@ 0x80
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff fee1 	bl	80036b4 <SPI_WaitFlagStateUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d016      	beq.n	8003926 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e00f      	b.n	8003928 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3b01      	subs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391e:	2b80      	cmp	r3, #128	@ 0x80
 8003920:	d0f2      	beq.n	8003908 <SPI_EndRxTxTransaction+0x78>
 8003922:	e000      	b.n	8003926 <SPI_EndRxTxTransaction+0x96>
        break;
 8003924:	bf00      	nop
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000000 	.word	0x20000000
 8003934:	165e9f81 	.word	0x165e9f81

08003938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e042      	b.n	80039d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fb64 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	@ 0x24
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800397a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fa09 	bl	8003d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d175      	bne.n	8003ae4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_UART_Transmit+0x2c>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e06e      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2221      	movs	r2, #33	@ 0x21
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a16:	f7fe fa2d 	bl	8001e74 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a30:	d108      	bne.n	8003a44 <HAL_UART_Transmit+0x6c>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	e003      	b.n	8003a4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a4c:	e02e      	b.n	8003aac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2200      	movs	r2, #0
 8003a56:	2180      	movs	r1, #128	@ 0x80
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f8df 	bl	8003c1c <UART_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e03a      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10b      	bne.n	8003a8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	3302      	adds	r3, #2
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e007      	b.n	8003a9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1cb      	bne.n	8003a4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	2140      	movs	r1, #64	@ 0x40
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f8ab 	bl	8003c1c <UART_WaitOnFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e006      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b08a      	sub	sp, #40	@ 0x28
 8003af2:	af02      	add	r7, sp, #8
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	f040 8081 	bne.w	8003c12 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_UART_Receive+0x2e>
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e079      	b.n	8003c14 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2222      	movs	r2, #34	@ 0x22
 8003b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b34:	f7fe f99e 	bl	8001e74 <HAL_GetTick>
 8003b38:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4e:	d108      	bne.n	8003b62 <HAL_UART_Receive+0x74>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e003      	b.n	8003b6a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b6a:	e047      	b.n	8003bfc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2120      	movs	r1, #32
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f850 	bl	8003c1c <UART_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e042      	b.n	8003c14 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10c      	bne.n	8003bae <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	3302      	adds	r3, #2
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	e01f      	b.n	8003bee <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb6:	d007      	beq.n	8003bc8 <HAL_UART_Receive+0xda>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <HAL_UART_Receive+0xe8>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e008      	b.n	8003be8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	3301      	adds	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1b2      	bne.n	8003b6c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e000      	b.n	8003c14 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
  }
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2c:	e03b      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d037      	beq.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c36:	f7fe f91d 	bl	8001e74 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d302      	bcc.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e03a      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d023      	beq.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b80      	cmp	r3, #128	@ 0x80
 8003c62:	d020      	beq.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b40      	cmp	r3, #64	@ 0x40
 8003c68:	d01d      	beq.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d116      	bne.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f81d 	bl	8003cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2208      	movs	r2, #8
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00f      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d0b4      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b095      	sub	sp, #84	@ 0x54
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cf6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e5      	bne.n	8003cd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3314      	adds	r3, #20
 8003d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e5      	bne.n	8003d0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d119      	bne.n	8003d7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f023 0310 	bic.w	r3, r3, #16
 8003d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d66:	61ba      	str	r2, [r7, #24]
 8003d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6979      	ldr	r1, [r7, #20]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	613b      	str	r3, [r7, #16]
   return(result);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e5      	bne.n	8003d46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d88:	bf00      	nop
 8003d8a:	3754      	adds	r7, #84	@ 0x54
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d98:	b0c0      	sub	sp, #256	@ 0x100
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	68d9      	ldr	r1, [r3, #12]
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	ea40 0301 	orr.w	r3, r0, r1
 8003dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003dec:	f021 010c 	bic.w	r1, r1, #12
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0e:	6999      	ldr	r1, [r3, #24]
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	ea40 0301 	orr.w	r3, r0, r1
 8003e1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4b8f      	ldr	r3, [pc, #572]	@ (8004060 <UART_SetConfig+0x2cc>)
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d005      	beq.n	8003e34 <UART_SetConfig+0xa0>
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8004064 <UART_SetConfig+0x2d0>)
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d104      	bne.n	8003e3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e34:	f7fe ff96 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 8003e38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e3c:	e003      	b.n	8003e46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e3e:	f7fe ff7d 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8003e42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e50:	f040 810c 	bne.w	800406c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e66:	4622      	mov	r2, r4
 8003e68:	462b      	mov	r3, r5
 8003e6a:	1891      	adds	r1, r2, r2
 8003e6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e6e:	415b      	adcs	r3, r3
 8003e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e76:	4621      	mov	r1, r4
 8003e78:	eb12 0801 	adds.w	r8, r2, r1
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	eb43 0901 	adc.w	r9, r3, r1
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e96:	4690      	mov	r8, r2
 8003e98:	4699      	mov	r9, r3
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	eb18 0303 	adds.w	r3, r8, r3
 8003ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ea4:	462b      	mov	r3, r5
 8003ea6:	eb49 0303 	adc.w	r3, r9, r3
 8003eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003eba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	18db      	adds	r3, r3, r3
 8003ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ec8:	4613      	mov	r3, r2
 8003eca:	eb42 0303 	adc.w	r3, r2, r3
 8003ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ed0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ed4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ed8:	f7fc fe96 	bl	8000c08 <__aeabi_uldivmod>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4b61      	ldr	r3, [pc, #388]	@ (8004068 <UART_SetConfig+0x2d4>)
 8003ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	011c      	lsls	r4, r3, #4
 8003eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ef4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ef8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003efc:	4642      	mov	r2, r8
 8003efe:	464b      	mov	r3, r9
 8003f00:	1891      	adds	r1, r2, r2
 8003f02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f04:	415b      	adcs	r3, r3
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f12:	4649      	mov	r1, r9
 8003f14:	eb43 0b01 	adc.w	fp, r3, r1
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2c:	4692      	mov	sl, r2
 8003f2e:	469b      	mov	fp, r3
 8003f30:	4643      	mov	r3, r8
 8003f32:	eb1a 0303 	adds.w	r3, sl, r3
 8003f36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	18db      	adds	r3, r3, r3
 8003f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f5e:	4613      	mov	r3, r2
 8003f60:	eb42 0303 	adc.w	r3, r2, r3
 8003f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f6e:	f7fc fe4b 	bl	8000c08 <__aeabi_uldivmod>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4611      	mov	r1, r2
 8003f78:	4b3b      	ldr	r3, [pc, #236]	@ (8004068 <UART_SetConfig+0x2d4>)
 8003f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2264      	movs	r2, #100	@ 0x64
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	1acb      	subs	r3, r1, r3
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f8e:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <UART_SetConfig+0x2d4>)
 8003f90:	fba3 2302 	umull	r2, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f9c:	441c      	add	r4, r3
 8003f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fa8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	1891      	adds	r1, r2, r2
 8003fb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fb8:	415b      	adcs	r3, r3
 8003fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	1851      	adds	r1, r2, r1
 8003fc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	414b      	adcs	r3, r1
 8003fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fd8:	4659      	mov	r1, fp
 8003fda:	00cb      	lsls	r3, r1, #3
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	00ca      	lsls	r2, r1, #3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	4642      	mov	r2, r8
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	eb42 0303 	adc.w	r3, r2, r3
 8003ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800400c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004010:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004014:	460b      	mov	r3, r1
 8004016:	18db      	adds	r3, r3, r3
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800401a:	4613      	mov	r3, r2
 800401c:	eb42 0303 	adc.w	r3, r2, r3
 8004020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004022:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004026:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800402a:	f7fc fded 	bl	8000c08 <__aeabi_uldivmod>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4b0d      	ldr	r3, [pc, #52]	@ (8004068 <UART_SetConfig+0x2d4>)
 8004034:	fba3 1302 	umull	r1, r3, r3, r2
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	2164      	movs	r1, #100	@ 0x64
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	3332      	adds	r3, #50	@ 0x32
 8004046:	4a08      	ldr	r2, [pc, #32]	@ (8004068 <UART_SetConfig+0x2d4>)
 8004048:	fba2 2303 	umull	r2, r3, r2, r3
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	f003 0207 	and.w	r2, r3, #7
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4422      	add	r2, r4
 800405a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800405c:	e106      	b.n	800426c <UART_SetConfig+0x4d8>
 800405e:	bf00      	nop
 8004060:	40011000 	.word	0x40011000
 8004064:	40011400 	.word	0x40011400
 8004068:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800406c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004070:	2200      	movs	r2, #0
 8004072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004076:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800407a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800407e:	4642      	mov	r2, r8
 8004080:	464b      	mov	r3, r9
 8004082:	1891      	adds	r1, r2, r2
 8004084:	6239      	str	r1, [r7, #32]
 8004086:	415b      	adcs	r3, r3
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
 800408a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800408e:	4641      	mov	r1, r8
 8004090:	1854      	adds	r4, r2, r1
 8004092:	4649      	mov	r1, r9
 8004094:	eb43 0501 	adc.w	r5, r3, r1
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	00eb      	lsls	r3, r5, #3
 80040a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a6:	00e2      	lsls	r2, r4, #3
 80040a8:	4614      	mov	r4, r2
 80040aa:	461d      	mov	r5, r3
 80040ac:	4643      	mov	r3, r8
 80040ae:	18e3      	adds	r3, r4, r3
 80040b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040b4:	464b      	mov	r3, r9
 80040b6:	eb45 0303 	adc.w	r3, r5, r3
 80040ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040da:	4629      	mov	r1, r5
 80040dc:	008b      	lsls	r3, r1, #2
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e4:	4621      	mov	r1, r4
 80040e6:	008a      	lsls	r2, r1, #2
 80040e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040ec:	f7fc fd8c 	bl	8000c08 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4b60      	ldr	r3, [pc, #384]	@ (8004278 <UART_SetConfig+0x4e4>)
 80040f6:	fba3 2302 	umull	r2, r3, r3, r2
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	011c      	lsls	r4, r3, #4
 80040fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004108:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800410c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	1891      	adds	r1, r2, r2
 8004116:	61b9      	str	r1, [r7, #24]
 8004118:	415b      	adcs	r3, r3
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004120:	4641      	mov	r1, r8
 8004122:	1851      	adds	r1, r2, r1
 8004124:	6139      	str	r1, [r7, #16]
 8004126:	4649      	mov	r1, r9
 8004128:	414b      	adcs	r3, r1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004138:	4659      	mov	r1, fp
 800413a:	00cb      	lsls	r3, r1, #3
 800413c:	4651      	mov	r1, sl
 800413e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004142:	4651      	mov	r1, sl
 8004144:	00ca      	lsls	r2, r1, #3
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	4603      	mov	r3, r0
 800414c:	4642      	mov	r2, r8
 800414e:	189b      	adds	r3, r3, r2
 8004150:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004154:	464b      	mov	r3, r9
 8004156:	460a      	mov	r2, r1
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	67bb      	str	r3, [r7, #120]	@ 0x78
 800416a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004178:	4649      	mov	r1, r9
 800417a:	008b      	lsls	r3, r1, #2
 800417c:	4641      	mov	r1, r8
 800417e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004182:	4641      	mov	r1, r8
 8004184:	008a      	lsls	r2, r1, #2
 8004186:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800418a:	f7fc fd3d 	bl	8000c08 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4611      	mov	r1, r2
 8004194:	4b38      	ldr	r3, [pc, #224]	@ (8004278 <UART_SetConfig+0x4e4>)
 8004196:	fba3 2301 	umull	r2, r3, r3, r1
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2264      	movs	r2, #100	@ 0x64
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	1acb      	subs	r3, r1, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	3332      	adds	r3, #50	@ 0x32
 80041a8:	4a33      	ldr	r2, [pc, #204]	@ (8004278 <UART_SetConfig+0x4e4>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b4:	441c      	add	r4, r3
 80041b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ba:	2200      	movs	r2, #0
 80041bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80041be:	677a      	str	r2, [r7, #116]	@ 0x74
 80041c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041c4:	4642      	mov	r2, r8
 80041c6:	464b      	mov	r3, r9
 80041c8:	1891      	adds	r1, r2, r2
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	415b      	adcs	r3, r3
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041d4:	4641      	mov	r1, r8
 80041d6:	1851      	adds	r1, r2, r1
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	4649      	mov	r1, r9
 80041dc:	414b      	adcs	r3, r1
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041ec:	4659      	mov	r1, fp
 80041ee:	00cb      	lsls	r3, r1, #3
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f6:	4651      	mov	r1, sl
 80041f8:	00ca      	lsls	r2, r1, #3
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	4603      	mov	r3, r0
 8004200:	4642      	mov	r2, r8
 8004202:	189b      	adds	r3, r3, r2
 8004204:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004206:	464b      	mov	r3, r9
 8004208:	460a      	mov	r2, r1
 800420a:	eb42 0303 	adc.w	r3, r2, r3
 800420e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	663b      	str	r3, [r7, #96]	@ 0x60
 800421a:	667a      	str	r2, [r7, #100]	@ 0x64
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004228:	4649      	mov	r1, r9
 800422a:	008b      	lsls	r3, r1, #2
 800422c:	4641      	mov	r1, r8
 800422e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004232:	4641      	mov	r1, r8
 8004234:	008a      	lsls	r2, r1, #2
 8004236:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800423a:	f7fc fce5 	bl	8000c08 <__aeabi_uldivmod>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <UART_SetConfig+0x4e4>)
 8004244:	fba3 1302 	umull	r1, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	2164      	movs	r1, #100	@ 0x64
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	3332      	adds	r3, #50	@ 0x32
 8004256:	4a08      	ldr	r2, [pc, #32]	@ (8004278 <UART_SetConfig+0x4e4>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	f003 020f 	and.w	r2, r3, #15
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4422      	add	r2, r4
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004272:	46bd      	mov	sp, r7
 8004274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004278:	51eb851f 	.word	0x51eb851f

0800427c <SystemClock_Config>:

/*
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b094      	sub	sp, #80	@ 0x50
 8004280:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004282:	f107 0320 	add.w	r3, r7, #32
 8004286:	2230      	movs	r2, #48	@ 0x30
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fb56 	bl	800493c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004290:	f107 030c 	add.w	r3, r7, #12
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80042a0:	2300      	movs	r3, #0
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	4b29      	ldr	r3, [pc, #164]	@ (800434c <SystemClock_Config+0xd0>)
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	4a28      	ldr	r2, [pc, #160]	@ (800434c <SystemClock_Config+0xd0>)
 80042aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80042b0:	4b26      	ldr	r3, [pc, #152]	@ (800434c <SystemClock_Config+0xd0>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042bc:	2300      	movs	r3, #0
 80042be:	607b      	str	r3, [r7, #4]
 80042c0:	4b23      	ldr	r3, [pc, #140]	@ (8004350 <SystemClock_Config+0xd4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a22      	ldr	r2, [pc, #136]	@ (8004350 <SystemClock_Config+0xd4>)
 80042c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <SystemClock_Config+0xd4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042d8:	2301      	movs	r3, #1
 80042da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80042dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042e2:	2302      	movs	r3, #2
 80042e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80042ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80042ec:	2304      	movs	r3, #4
 80042ee:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80042f0:	23a8      	movs	r3, #168	@ 0xa8
 80042f2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042f4:	2302      	movs	r3, #2
 80042f6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80042f8:	2304      	movs	r3, #4
 80042fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80042fc:	f107 0320 	add.w	r3, r7, #32
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe f8ab 	bl	800245c <HAL_RCC_OscConfig>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <SystemClock_Config+0x96>
		write_error_flag(true);
 800430c:	2001      	movs	r0, #1
 800430e:	f000 f8bb 	bl	8004488 <write_error_flag>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004312:	230f      	movs	r3, #15
 8004314:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004316:	2302      	movs	r3, #2
 8004318:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800431e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004322:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004328:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800432a:	f107 030c 	add.w	r3, r7, #12
 800432e:	2105      	movs	r1, #5
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fb0b 	bl	800294c <HAL_RCC_ClockConfig>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <SystemClock_Config+0xc6>
		write_error_flag(true);
 800433c:	2001      	movs	r0, #1
 800433e:	f000 f8a3 	bl	8004488 <write_error_flag>
	}
}
 8004342:	bf00      	nop
 8004344:	3750      	adds	r7, #80	@ 0x50
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	40007000 	.word	0x40007000

08004354 <GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void GPIO_Init(void) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b08a      	sub	sp, #40	@ 0x28
 8004358:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800435a:	f107 0314 	add.w	r3, r7, #20
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	605a      	str	r2, [r3, #4]
 8004364:	609a      	str	r2, [r3, #8]
 8004366:	60da      	str	r2, [r3, #12]
 8004368:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	4b3c      	ldr	r3, [pc, #240]	@ (8004460 <GPIO_Init+0x10c>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	4a3b      	ldr	r2, [pc, #236]	@ (8004460 <GPIO_Init+0x10c>)
 8004374:	f043 0304 	orr.w	r3, r3, #4
 8004378:	6313      	str	r3, [r2, #48]	@ 0x30
 800437a:	4b39      	ldr	r3, [pc, #228]	@ (8004460 <GPIO_Init+0x10c>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	4b35      	ldr	r3, [pc, #212]	@ (8004460 <GPIO_Init+0x10c>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	4a34      	ldr	r2, [pc, #208]	@ (8004460 <GPIO_Init+0x10c>)
 8004390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004394:	6313      	str	r3, [r2, #48]	@ 0x30
 8004396:	4b32      	ldr	r3, [pc, #200]	@ (8004460 <GPIO_Init+0x10c>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004460 <GPIO_Init+0x10c>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004460 <GPIO_Init+0x10c>)
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004460 <GPIO_Init+0x10c>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	4b27      	ldr	r3, [pc, #156]	@ (8004460 <GPIO_Init+0x10c>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	4a26      	ldr	r2, [pc, #152]	@ (8004460 <GPIO_Init+0x10c>)
 80043c8:	f043 0308 	orr.w	r3, r3, #8
 80043cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ce:	4b24      	ldr	r3, [pc, #144]	@ (8004460 <GPIO_Init+0x10c>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	607b      	str	r3, [r7, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4b20      	ldr	r3, [pc, #128]	@ (8004460 <GPIO_Init+0x10c>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <GPIO_Init+0x10c>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004460 <GPIO_Init+0x10c>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80043f6:	2200      	movs	r2, #0
 80043f8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80043fc:	4819      	ldr	r0, [pc, #100]	@ (8004464 <GPIO_Init+0x110>)
 80043fe:	f7fe f813 	bl	8002428 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004402:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004406:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004408:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800440c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	4619      	mov	r1, r3
 8004418:	4813      	ldr	r0, [pc, #76]	@ (8004468 <GPIO_Init+0x114>)
 800441a:	f7fd fe41 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800441e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8004422:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004424:	2301      	movs	r3, #1
 8004426:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004428:	2300      	movs	r3, #0
 800442a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442c:	2300      	movs	r3, #0
 800442e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	4619      	mov	r1, r3
 8004436:	480b      	ldr	r0, [pc, #44]	@ (8004464 <GPIO_Init+0x110>)
 8004438:	f7fd fe32 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800443c:	2310      	movs	r3, #16
 800443e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004440:	2301      	movs	r3, #1
 8004442:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004448:	2300      	movs	r3, #0
 800444a:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	4619      	mov	r1, r3
 8004452:	4806      	ldr	r0, [pc, #24]	@ (800446c <GPIO_Init+0x118>)
 8004454:	f7fd fe24 	bl	80020a0 <HAL_GPIO_Init>
}
 8004458:	bf00      	nop
 800445a:	3728      	adds	r7, #40	@ 0x28
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	40020400 	.word	0x40020400
 8004468:	40020800 	.word	0x40020800
 800446c:	40020000 	.word	0x40020000

08004470 <read_error_flag>:
 * @retval None
 */

static bool_t handle_error_flag = false;

bool_t read_error_flag(void) {
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
	return handle_error_flag;
 8004474:	4b03      	ldr	r3, [pc, #12]	@ (8004484 <read_error_flag+0x14>)
 8004476:	781b      	ldrb	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000218 	.word	0x20000218

08004488 <write_error_flag>:
void write_error_flag(bool_t value) {
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
	handle_error_flag = value;
 8004492:	4a04      	ldr	r2, [pc, #16]	@ (80044a4 <write_error_flag+0x1c>)
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	7013      	strb	r3, [r2, #0]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	20000218 	.word	0x20000218

080044a8 <Error_Handler>:

void Error_Handler(void) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044ac:	b672      	cpsid	i
}
 80044ae:	bf00      	nop
	__disable_irq();
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80044b0:	2201      	movs	r2, #1
 80044b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80044b6:	480a      	ldr	r0, [pc, #40]	@ (80044e0 <Error_Handler+0x38>)
 80044b8:	f7fd ffb6 	bl	8002428 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80044bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80044c0:	f7fd fce4 	bl	8001e8c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80044c4:	2200      	movs	r2, #0
 80044c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80044ca:	4805      	ldr	r0, [pc, #20]	@ (80044e0 <Error_Handler+0x38>)
 80044cc:	f7fd ffac 	bl	8002428 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80044d0:	b662      	cpsie	i
}
 80044d2:	bf00      	nop
	__enable_irq();
	handle_error_flag = false;
 80044d4:	4b03      	ldr	r3, [pc, #12]	@ (80044e4 <Error_Handler+0x3c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40020400 	.word	0x40020400
 80044e4:	20000218 	.word	0x20000218

080044e8 <std>:
 80044e8:	2300      	movs	r3, #0
 80044ea:	b510      	push	{r4, lr}
 80044ec:	4604      	mov	r4, r0
 80044ee:	e9c0 3300 	strd	r3, r3, [r0]
 80044f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044f6:	6083      	str	r3, [r0, #8]
 80044f8:	8181      	strh	r1, [r0, #12]
 80044fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80044fc:	81c2      	strh	r2, [r0, #14]
 80044fe:	6183      	str	r3, [r0, #24]
 8004500:	4619      	mov	r1, r3
 8004502:	2208      	movs	r2, #8
 8004504:	305c      	adds	r0, #92	@ 0x5c
 8004506:	f000 fa19 	bl	800493c <memset>
 800450a:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <std+0x58>)
 800450c:	6263      	str	r3, [r4, #36]	@ 0x24
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <std+0x5c>)
 8004510:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004512:	4b0d      	ldr	r3, [pc, #52]	@ (8004548 <std+0x60>)
 8004514:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004516:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <std+0x64>)
 8004518:	6323      	str	r3, [r4, #48]	@ 0x30
 800451a:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <std+0x68>)
 800451c:	6224      	str	r4, [r4, #32]
 800451e:	429c      	cmp	r4, r3
 8004520:	d006      	beq.n	8004530 <std+0x48>
 8004522:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004526:	4294      	cmp	r4, r2
 8004528:	d002      	beq.n	8004530 <std+0x48>
 800452a:	33d0      	adds	r3, #208	@ 0xd0
 800452c:	429c      	cmp	r4, r3
 800452e:	d105      	bne.n	800453c <std+0x54>
 8004530:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004538:	f000 ba78 	b.w	8004a2c <__retarget_lock_init_recursive>
 800453c:	bd10      	pop	{r4, pc}
 800453e:	bf00      	nop
 8004540:	0800478d 	.word	0x0800478d
 8004544:	080047af 	.word	0x080047af
 8004548:	080047e7 	.word	0x080047e7
 800454c:	0800480b 	.word	0x0800480b
 8004550:	2000021c 	.word	0x2000021c

08004554 <stdio_exit_handler>:
 8004554:	4a02      	ldr	r2, [pc, #8]	@ (8004560 <stdio_exit_handler+0xc>)
 8004556:	4903      	ldr	r1, [pc, #12]	@ (8004564 <stdio_exit_handler+0x10>)
 8004558:	4803      	ldr	r0, [pc, #12]	@ (8004568 <stdio_exit_handler+0x14>)
 800455a:	f000 b869 	b.w	8004630 <_fwalk_sglue>
 800455e:	bf00      	nop
 8004560:	20000010 	.word	0x20000010
 8004564:	0800557d 	.word	0x0800557d
 8004568:	20000020 	.word	0x20000020

0800456c <cleanup_stdio>:
 800456c:	6841      	ldr	r1, [r0, #4]
 800456e:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <cleanup_stdio+0x34>)
 8004570:	4299      	cmp	r1, r3
 8004572:	b510      	push	{r4, lr}
 8004574:	4604      	mov	r4, r0
 8004576:	d001      	beq.n	800457c <cleanup_stdio+0x10>
 8004578:	f001 f800 	bl	800557c <_fflush_r>
 800457c:	68a1      	ldr	r1, [r4, #8]
 800457e:	4b09      	ldr	r3, [pc, #36]	@ (80045a4 <cleanup_stdio+0x38>)
 8004580:	4299      	cmp	r1, r3
 8004582:	d002      	beq.n	800458a <cleanup_stdio+0x1e>
 8004584:	4620      	mov	r0, r4
 8004586:	f000 fff9 	bl	800557c <_fflush_r>
 800458a:	68e1      	ldr	r1, [r4, #12]
 800458c:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <cleanup_stdio+0x3c>)
 800458e:	4299      	cmp	r1, r3
 8004590:	d004      	beq.n	800459c <cleanup_stdio+0x30>
 8004592:	4620      	mov	r0, r4
 8004594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004598:	f000 bff0 	b.w	800557c <_fflush_r>
 800459c:	bd10      	pop	{r4, pc}
 800459e:	bf00      	nop
 80045a0:	2000021c 	.word	0x2000021c
 80045a4:	20000284 	.word	0x20000284
 80045a8:	200002ec 	.word	0x200002ec

080045ac <global_stdio_init.part.0>:
 80045ac:	b510      	push	{r4, lr}
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <global_stdio_init.part.0+0x30>)
 80045b0:	4c0b      	ldr	r4, [pc, #44]	@ (80045e0 <global_stdio_init.part.0+0x34>)
 80045b2:	4a0c      	ldr	r2, [pc, #48]	@ (80045e4 <global_stdio_init.part.0+0x38>)
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	4620      	mov	r0, r4
 80045b8:	2200      	movs	r2, #0
 80045ba:	2104      	movs	r1, #4
 80045bc:	f7ff ff94 	bl	80044e8 <std>
 80045c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045c4:	2201      	movs	r2, #1
 80045c6:	2109      	movs	r1, #9
 80045c8:	f7ff ff8e 	bl	80044e8 <std>
 80045cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045d0:	2202      	movs	r2, #2
 80045d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d6:	2112      	movs	r1, #18
 80045d8:	f7ff bf86 	b.w	80044e8 <std>
 80045dc:	20000354 	.word	0x20000354
 80045e0:	2000021c 	.word	0x2000021c
 80045e4:	08004555 	.word	0x08004555

080045e8 <__sfp_lock_acquire>:
 80045e8:	4801      	ldr	r0, [pc, #4]	@ (80045f0 <__sfp_lock_acquire+0x8>)
 80045ea:	f000 ba20 	b.w	8004a2e <__retarget_lock_acquire_recursive>
 80045ee:	bf00      	nop
 80045f0:	2000035d 	.word	0x2000035d

080045f4 <__sfp_lock_release>:
 80045f4:	4801      	ldr	r0, [pc, #4]	@ (80045fc <__sfp_lock_release+0x8>)
 80045f6:	f000 ba1b 	b.w	8004a30 <__retarget_lock_release_recursive>
 80045fa:	bf00      	nop
 80045fc:	2000035d 	.word	0x2000035d

08004600 <__sinit>:
 8004600:	b510      	push	{r4, lr}
 8004602:	4604      	mov	r4, r0
 8004604:	f7ff fff0 	bl	80045e8 <__sfp_lock_acquire>
 8004608:	6a23      	ldr	r3, [r4, #32]
 800460a:	b11b      	cbz	r3, 8004614 <__sinit+0x14>
 800460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004610:	f7ff bff0 	b.w	80045f4 <__sfp_lock_release>
 8004614:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <__sinit+0x28>)
 8004616:	6223      	str	r3, [r4, #32]
 8004618:	4b04      	ldr	r3, [pc, #16]	@ (800462c <__sinit+0x2c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f5      	bne.n	800460c <__sinit+0xc>
 8004620:	f7ff ffc4 	bl	80045ac <global_stdio_init.part.0>
 8004624:	e7f2      	b.n	800460c <__sinit+0xc>
 8004626:	bf00      	nop
 8004628:	0800456d 	.word	0x0800456d
 800462c:	20000354 	.word	0x20000354

08004630 <_fwalk_sglue>:
 8004630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004634:	4607      	mov	r7, r0
 8004636:	4688      	mov	r8, r1
 8004638:	4614      	mov	r4, r2
 800463a:	2600      	movs	r6, #0
 800463c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004640:	f1b9 0901 	subs.w	r9, r9, #1
 8004644:	d505      	bpl.n	8004652 <_fwalk_sglue+0x22>
 8004646:	6824      	ldr	r4, [r4, #0]
 8004648:	2c00      	cmp	r4, #0
 800464a:	d1f7      	bne.n	800463c <_fwalk_sglue+0xc>
 800464c:	4630      	mov	r0, r6
 800464e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004652:	89ab      	ldrh	r3, [r5, #12]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d907      	bls.n	8004668 <_fwalk_sglue+0x38>
 8004658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800465c:	3301      	adds	r3, #1
 800465e:	d003      	beq.n	8004668 <_fwalk_sglue+0x38>
 8004660:	4629      	mov	r1, r5
 8004662:	4638      	mov	r0, r7
 8004664:	47c0      	blx	r8
 8004666:	4306      	orrs	r6, r0
 8004668:	3568      	adds	r5, #104	@ 0x68
 800466a:	e7e9      	b.n	8004640 <_fwalk_sglue+0x10>

0800466c <iprintf>:
 800466c:	b40f      	push	{r0, r1, r2, r3}
 800466e:	b507      	push	{r0, r1, r2, lr}
 8004670:	4906      	ldr	r1, [pc, #24]	@ (800468c <iprintf+0x20>)
 8004672:	ab04      	add	r3, sp, #16
 8004674:	6808      	ldr	r0, [r1, #0]
 8004676:	f853 2b04 	ldr.w	r2, [r3], #4
 800467a:	6881      	ldr	r1, [r0, #8]
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	f000 fc53 	bl	8004f28 <_vfiprintf_r>
 8004682:	b003      	add	sp, #12
 8004684:	f85d eb04 	ldr.w	lr, [sp], #4
 8004688:	b004      	add	sp, #16
 800468a:	4770      	bx	lr
 800468c:	2000001c 	.word	0x2000001c

08004690 <_puts_r>:
 8004690:	6a03      	ldr	r3, [r0, #32]
 8004692:	b570      	push	{r4, r5, r6, lr}
 8004694:	6884      	ldr	r4, [r0, #8]
 8004696:	4605      	mov	r5, r0
 8004698:	460e      	mov	r6, r1
 800469a:	b90b      	cbnz	r3, 80046a0 <_puts_r+0x10>
 800469c:	f7ff ffb0 	bl	8004600 <__sinit>
 80046a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046a2:	07db      	lsls	r3, r3, #31
 80046a4:	d405      	bmi.n	80046b2 <_puts_r+0x22>
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	0598      	lsls	r0, r3, #22
 80046aa:	d402      	bmi.n	80046b2 <_puts_r+0x22>
 80046ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046ae:	f000 f9be 	bl	8004a2e <__retarget_lock_acquire_recursive>
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	0719      	lsls	r1, r3, #28
 80046b6:	d502      	bpl.n	80046be <_puts_r+0x2e>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d135      	bne.n	800472a <_puts_r+0x9a>
 80046be:	4621      	mov	r1, r4
 80046c0:	4628      	mov	r0, r5
 80046c2:	f000 f8e5 	bl	8004890 <__swsetup_r>
 80046c6:	b380      	cbz	r0, 800472a <_puts_r+0x9a>
 80046c8:	f04f 35ff 	mov.w	r5, #4294967295
 80046cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046ce:	07da      	lsls	r2, r3, #31
 80046d0:	d405      	bmi.n	80046de <_puts_r+0x4e>
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	059b      	lsls	r3, r3, #22
 80046d6:	d402      	bmi.n	80046de <_puts_r+0x4e>
 80046d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046da:	f000 f9a9 	bl	8004a30 <__retarget_lock_release_recursive>
 80046de:	4628      	mov	r0, r5
 80046e0:	bd70      	pop	{r4, r5, r6, pc}
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da04      	bge.n	80046f0 <_puts_r+0x60>
 80046e6:	69a2      	ldr	r2, [r4, #24]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	dc17      	bgt.n	800471c <_puts_r+0x8c>
 80046ec:	290a      	cmp	r1, #10
 80046ee:	d015      	beq.n	800471c <_puts_r+0x8c>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	6022      	str	r2, [r4, #0]
 80046f6:	7019      	strb	r1, [r3, #0]
 80046f8:	68a3      	ldr	r3, [r4, #8]
 80046fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046fe:	3b01      	subs	r3, #1
 8004700:	60a3      	str	r3, [r4, #8]
 8004702:	2900      	cmp	r1, #0
 8004704:	d1ed      	bne.n	80046e2 <_puts_r+0x52>
 8004706:	2b00      	cmp	r3, #0
 8004708:	da11      	bge.n	800472e <_puts_r+0x9e>
 800470a:	4622      	mov	r2, r4
 800470c:	210a      	movs	r1, #10
 800470e:	4628      	mov	r0, r5
 8004710:	f000 f87f 	bl	8004812 <__swbuf_r>
 8004714:	3001      	adds	r0, #1
 8004716:	d0d7      	beq.n	80046c8 <_puts_r+0x38>
 8004718:	250a      	movs	r5, #10
 800471a:	e7d7      	b.n	80046cc <_puts_r+0x3c>
 800471c:	4622      	mov	r2, r4
 800471e:	4628      	mov	r0, r5
 8004720:	f000 f877 	bl	8004812 <__swbuf_r>
 8004724:	3001      	adds	r0, #1
 8004726:	d1e7      	bne.n	80046f8 <_puts_r+0x68>
 8004728:	e7ce      	b.n	80046c8 <_puts_r+0x38>
 800472a:	3e01      	subs	r6, #1
 800472c:	e7e4      	b.n	80046f8 <_puts_r+0x68>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	6022      	str	r2, [r4, #0]
 8004734:	220a      	movs	r2, #10
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e7ee      	b.n	8004718 <_puts_r+0x88>
	...

0800473c <puts>:
 800473c:	4b02      	ldr	r3, [pc, #8]	@ (8004748 <puts+0xc>)
 800473e:	4601      	mov	r1, r0
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	f7ff bfa5 	b.w	8004690 <_puts_r>
 8004746:	bf00      	nop
 8004748:	2000001c 	.word	0x2000001c

0800474c <siprintf>:
 800474c:	b40e      	push	{r1, r2, r3}
 800474e:	b500      	push	{lr}
 8004750:	b09c      	sub	sp, #112	@ 0x70
 8004752:	ab1d      	add	r3, sp, #116	@ 0x74
 8004754:	9002      	str	r0, [sp, #8]
 8004756:	9006      	str	r0, [sp, #24]
 8004758:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800475c:	4809      	ldr	r0, [pc, #36]	@ (8004784 <siprintf+0x38>)
 800475e:	9107      	str	r1, [sp, #28]
 8004760:	9104      	str	r1, [sp, #16]
 8004762:	4909      	ldr	r1, [pc, #36]	@ (8004788 <siprintf+0x3c>)
 8004764:	f853 2b04 	ldr.w	r2, [r3], #4
 8004768:	9105      	str	r1, [sp, #20]
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	a902      	add	r1, sp, #8
 8004770:	f000 fab4 	bl	8004cdc <_svfiprintf_r>
 8004774:	9b02      	ldr	r3, [sp, #8]
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	b01c      	add	sp, #112	@ 0x70
 800477c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004780:	b003      	add	sp, #12
 8004782:	4770      	bx	lr
 8004784:	2000001c 	.word	0x2000001c
 8004788:	ffff0208 	.word	0xffff0208

0800478c <__sread>:
 800478c:	b510      	push	{r4, lr}
 800478e:	460c      	mov	r4, r1
 8004790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004794:	f000 f8fc 	bl	8004990 <_read_r>
 8004798:	2800      	cmp	r0, #0
 800479a:	bfab      	itete	ge
 800479c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800479e:	89a3      	ldrhlt	r3, [r4, #12]
 80047a0:	181b      	addge	r3, r3, r0
 80047a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047a6:	bfac      	ite	ge
 80047a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047aa:	81a3      	strhlt	r3, [r4, #12]
 80047ac:	bd10      	pop	{r4, pc}

080047ae <__swrite>:
 80047ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b2:	461f      	mov	r7, r3
 80047b4:	898b      	ldrh	r3, [r1, #12]
 80047b6:	05db      	lsls	r3, r3, #23
 80047b8:	4605      	mov	r5, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	4616      	mov	r6, r2
 80047be:	d505      	bpl.n	80047cc <__swrite+0x1e>
 80047c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c4:	2302      	movs	r3, #2
 80047c6:	2200      	movs	r2, #0
 80047c8:	f000 f8d0 	bl	800496c <_lseek_r>
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047d6:	81a3      	strh	r3, [r4, #12]
 80047d8:	4632      	mov	r2, r6
 80047da:	463b      	mov	r3, r7
 80047dc:	4628      	mov	r0, r5
 80047de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047e2:	f000 b8e7 	b.w	80049b4 <_write_r>

080047e6 <__sseek>:
 80047e6:	b510      	push	{r4, lr}
 80047e8:	460c      	mov	r4, r1
 80047ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ee:	f000 f8bd 	bl	800496c <_lseek_r>
 80047f2:	1c43      	adds	r3, r0, #1
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	bf15      	itete	ne
 80047f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004802:	81a3      	strheq	r3, [r4, #12]
 8004804:	bf18      	it	ne
 8004806:	81a3      	strhne	r3, [r4, #12]
 8004808:	bd10      	pop	{r4, pc}

0800480a <__sclose>:
 800480a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480e:	f000 b89d 	b.w	800494c <_close_r>

08004812 <__swbuf_r>:
 8004812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004814:	460e      	mov	r6, r1
 8004816:	4614      	mov	r4, r2
 8004818:	4605      	mov	r5, r0
 800481a:	b118      	cbz	r0, 8004824 <__swbuf_r+0x12>
 800481c:	6a03      	ldr	r3, [r0, #32]
 800481e:	b90b      	cbnz	r3, 8004824 <__swbuf_r+0x12>
 8004820:	f7ff feee 	bl	8004600 <__sinit>
 8004824:	69a3      	ldr	r3, [r4, #24]
 8004826:	60a3      	str	r3, [r4, #8]
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	071a      	lsls	r2, r3, #28
 800482c:	d501      	bpl.n	8004832 <__swbuf_r+0x20>
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	b943      	cbnz	r3, 8004844 <__swbuf_r+0x32>
 8004832:	4621      	mov	r1, r4
 8004834:	4628      	mov	r0, r5
 8004836:	f000 f82b 	bl	8004890 <__swsetup_r>
 800483a:	b118      	cbz	r0, 8004844 <__swbuf_r+0x32>
 800483c:	f04f 37ff 	mov.w	r7, #4294967295
 8004840:	4638      	mov	r0, r7
 8004842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	6922      	ldr	r2, [r4, #16]
 8004848:	1a98      	subs	r0, r3, r2
 800484a:	6963      	ldr	r3, [r4, #20]
 800484c:	b2f6      	uxtb	r6, r6
 800484e:	4283      	cmp	r3, r0
 8004850:	4637      	mov	r7, r6
 8004852:	dc05      	bgt.n	8004860 <__swbuf_r+0x4e>
 8004854:	4621      	mov	r1, r4
 8004856:	4628      	mov	r0, r5
 8004858:	f000 fe90 	bl	800557c <_fflush_r>
 800485c:	2800      	cmp	r0, #0
 800485e:	d1ed      	bne.n	800483c <__swbuf_r+0x2a>
 8004860:	68a3      	ldr	r3, [r4, #8]
 8004862:	3b01      	subs	r3, #1
 8004864:	60a3      	str	r3, [r4, #8]
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	6022      	str	r2, [r4, #0]
 800486c:	701e      	strb	r6, [r3, #0]
 800486e:	6962      	ldr	r2, [r4, #20]
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	429a      	cmp	r2, r3
 8004874:	d004      	beq.n	8004880 <__swbuf_r+0x6e>
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	07db      	lsls	r3, r3, #31
 800487a:	d5e1      	bpl.n	8004840 <__swbuf_r+0x2e>
 800487c:	2e0a      	cmp	r6, #10
 800487e:	d1df      	bne.n	8004840 <__swbuf_r+0x2e>
 8004880:	4621      	mov	r1, r4
 8004882:	4628      	mov	r0, r5
 8004884:	f000 fe7a 	bl	800557c <_fflush_r>
 8004888:	2800      	cmp	r0, #0
 800488a:	d0d9      	beq.n	8004840 <__swbuf_r+0x2e>
 800488c:	e7d6      	b.n	800483c <__swbuf_r+0x2a>
	...

08004890 <__swsetup_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4b29      	ldr	r3, [pc, #164]	@ (8004938 <__swsetup_r+0xa8>)
 8004894:	4605      	mov	r5, r0
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	460c      	mov	r4, r1
 800489a:	b118      	cbz	r0, 80048a4 <__swsetup_r+0x14>
 800489c:	6a03      	ldr	r3, [r0, #32]
 800489e:	b90b      	cbnz	r3, 80048a4 <__swsetup_r+0x14>
 80048a0:	f7ff feae 	bl	8004600 <__sinit>
 80048a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a8:	0719      	lsls	r1, r3, #28
 80048aa:	d422      	bmi.n	80048f2 <__swsetup_r+0x62>
 80048ac:	06da      	lsls	r2, r3, #27
 80048ae:	d407      	bmi.n	80048c0 <__swsetup_r+0x30>
 80048b0:	2209      	movs	r2, #9
 80048b2:	602a      	str	r2, [r5, #0]
 80048b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048b8:	81a3      	strh	r3, [r4, #12]
 80048ba:	f04f 30ff 	mov.w	r0, #4294967295
 80048be:	e033      	b.n	8004928 <__swsetup_r+0x98>
 80048c0:	0758      	lsls	r0, r3, #29
 80048c2:	d512      	bpl.n	80048ea <__swsetup_r+0x5a>
 80048c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048c6:	b141      	cbz	r1, 80048da <__swsetup_r+0x4a>
 80048c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048cc:	4299      	cmp	r1, r3
 80048ce:	d002      	beq.n	80048d6 <__swsetup_r+0x46>
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 f8af 	bl	8004a34 <_free_r>
 80048d6:	2300      	movs	r3, #0
 80048d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80048e0:	81a3      	strh	r3, [r4, #12]
 80048e2:	2300      	movs	r3, #0
 80048e4:	6063      	str	r3, [r4, #4]
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	f043 0308 	orr.w	r3, r3, #8
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	b94b      	cbnz	r3, 800490a <__swsetup_r+0x7a>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004900:	d003      	beq.n	800490a <__swsetup_r+0x7a>
 8004902:	4621      	mov	r1, r4
 8004904:	4628      	mov	r0, r5
 8004906:	f000 fe87 	bl	8005618 <__smakebuf_r>
 800490a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490e:	f013 0201 	ands.w	r2, r3, #1
 8004912:	d00a      	beq.n	800492a <__swsetup_r+0x9a>
 8004914:	2200      	movs	r2, #0
 8004916:	60a2      	str	r2, [r4, #8]
 8004918:	6962      	ldr	r2, [r4, #20]
 800491a:	4252      	negs	r2, r2
 800491c:	61a2      	str	r2, [r4, #24]
 800491e:	6922      	ldr	r2, [r4, #16]
 8004920:	b942      	cbnz	r2, 8004934 <__swsetup_r+0xa4>
 8004922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004926:	d1c5      	bne.n	80048b4 <__swsetup_r+0x24>
 8004928:	bd38      	pop	{r3, r4, r5, pc}
 800492a:	0799      	lsls	r1, r3, #30
 800492c:	bf58      	it	pl
 800492e:	6962      	ldrpl	r2, [r4, #20]
 8004930:	60a2      	str	r2, [r4, #8]
 8004932:	e7f4      	b.n	800491e <__swsetup_r+0x8e>
 8004934:	2000      	movs	r0, #0
 8004936:	e7f7      	b.n	8004928 <__swsetup_r+0x98>
 8004938:	2000001c 	.word	0x2000001c

0800493c <memset>:
 800493c:	4402      	add	r2, r0
 800493e:	4603      	mov	r3, r0
 8004940:	4293      	cmp	r3, r2
 8004942:	d100      	bne.n	8004946 <memset+0xa>
 8004944:	4770      	bx	lr
 8004946:	f803 1b01 	strb.w	r1, [r3], #1
 800494a:	e7f9      	b.n	8004940 <memset+0x4>

0800494c <_close_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d06      	ldr	r5, [pc, #24]	@ (8004968 <_close_r+0x1c>)
 8004950:	2300      	movs	r3, #0
 8004952:	4604      	mov	r4, r0
 8004954:	4608      	mov	r0, r1
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	f7fc fc18 	bl	800118c <_close>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_close_r+0x1a>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_close_r+0x1a>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000358 	.word	0x20000358

0800496c <_lseek_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4d07      	ldr	r5, [pc, #28]	@ (800498c <_lseek_r+0x20>)
 8004970:	4604      	mov	r4, r0
 8004972:	4608      	mov	r0, r1
 8004974:	4611      	mov	r1, r2
 8004976:	2200      	movs	r2, #0
 8004978:	602a      	str	r2, [r5, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	f7fc fc2d 	bl	80011da <_lseek>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_lseek_r+0x1e>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_lseek_r+0x1e>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	20000358 	.word	0x20000358

08004990 <_read_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d07      	ldr	r5, [pc, #28]	@ (80049b0 <_read_r+0x20>)
 8004994:	4604      	mov	r4, r0
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	2200      	movs	r2, #0
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f7fc fbbb 	bl	800111a <_read>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_read_r+0x1e>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_read_r+0x1e>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	20000358 	.word	0x20000358

080049b4 <_write_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d07      	ldr	r5, [pc, #28]	@ (80049d4 <_write_r+0x20>)
 80049b8:	4604      	mov	r4, r0
 80049ba:	4608      	mov	r0, r1
 80049bc:	4611      	mov	r1, r2
 80049be:	2200      	movs	r2, #0
 80049c0:	602a      	str	r2, [r5, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f7fc fbc6 	bl	8001154 <_write>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_write_r+0x1e>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_write_r+0x1e>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	20000358 	.word	0x20000358

080049d8 <__errno>:
 80049d8:	4b01      	ldr	r3, [pc, #4]	@ (80049e0 <__errno+0x8>)
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	2000001c 	.word	0x2000001c

080049e4 <__libc_init_array>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	4d0d      	ldr	r5, [pc, #52]	@ (8004a1c <__libc_init_array+0x38>)
 80049e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004a20 <__libc_init_array+0x3c>)
 80049ea:	1b64      	subs	r4, r4, r5
 80049ec:	10a4      	asrs	r4, r4, #2
 80049ee:	2600      	movs	r6, #0
 80049f0:	42a6      	cmp	r6, r4
 80049f2:	d109      	bne.n	8004a08 <__libc_init_array+0x24>
 80049f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004a24 <__libc_init_array+0x40>)
 80049f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004a28 <__libc_init_array+0x44>)
 80049f8:	f001 fe66 	bl	80066c8 <_init>
 80049fc:	1b64      	subs	r4, r4, r5
 80049fe:	10a4      	asrs	r4, r4, #2
 8004a00:	2600      	movs	r6, #0
 8004a02:	42a6      	cmp	r6, r4
 8004a04:	d105      	bne.n	8004a12 <__libc_init_array+0x2e>
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0c:	4798      	blx	r3
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7ee      	b.n	80049f0 <__libc_init_array+0xc>
 8004a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a16:	4798      	blx	r3
 8004a18:	3601      	adds	r6, #1
 8004a1a:	e7f2      	b.n	8004a02 <__libc_init_array+0x1e>
 8004a1c:	08006900 	.word	0x08006900
 8004a20:	08006900 	.word	0x08006900
 8004a24:	08006900 	.word	0x08006900
 8004a28:	08006904 	.word	0x08006904

08004a2c <__retarget_lock_init_recursive>:
 8004a2c:	4770      	bx	lr

08004a2e <__retarget_lock_acquire_recursive>:
 8004a2e:	4770      	bx	lr

08004a30 <__retarget_lock_release_recursive>:
 8004a30:	4770      	bx	lr
	...

08004a34 <_free_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4605      	mov	r5, r0
 8004a38:	2900      	cmp	r1, #0
 8004a3a:	d041      	beq.n	8004ac0 <_free_r+0x8c>
 8004a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a40:	1f0c      	subs	r4, r1, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bfb8      	it	lt
 8004a46:	18e4      	addlt	r4, r4, r3
 8004a48:	f000 f8e0 	bl	8004c0c <__malloc_lock>
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac4 <_free_r+0x90>)
 8004a4e:	6813      	ldr	r3, [r2, #0]
 8004a50:	b933      	cbnz	r3, 8004a60 <_free_r+0x2c>
 8004a52:	6063      	str	r3, [r4, #4]
 8004a54:	6014      	str	r4, [r2, #0]
 8004a56:	4628      	mov	r0, r5
 8004a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a5c:	f000 b8dc 	b.w	8004c18 <__malloc_unlock>
 8004a60:	42a3      	cmp	r3, r4
 8004a62:	d908      	bls.n	8004a76 <_free_r+0x42>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	1821      	adds	r1, r4, r0
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	bf01      	itttt	eq
 8004a6c:	6819      	ldreq	r1, [r3, #0]
 8004a6e:	685b      	ldreq	r3, [r3, #4]
 8004a70:	1809      	addeq	r1, r1, r0
 8004a72:	6021      	streq	r1, [r4, #0]
 8004a74:	e7ed      	b.n	8004a52 <_free_r+0x1e>
 8004a76:	461a      	mov	r2, r3
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	b10b      	cbz	r3, 8004a80 <_free_r+0x4c>
 8004a7c:	42a3      	cmp	r3, r4
 8004a7e:	d9fa      	bls.n	8004a76 <_free_r+0x42>
 8004a80:	6811      	ldr	r1, [r2, #0]
 8004a82:	1850      	adds	r0, r2, r1
 8004a84:	42a0      	cmp	r0, r4
 8004a86:	d10b      	bne.n	8004aa0 <_free_r+0x6c>
 8004a88:	6820      	ldr	r0, [r4, #0]
 8004a8a:	4401      	add	r1, r0
 8004a8c:	1850      	adds	r0, r2, r1
 8004a8e:	4283      	cmp	r3, r0
 8004a90:	6011      	str	r1, [r2, #0]
 8004a92:	d1e0      	bne.n	8004a56 <_free_r+0x22>
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	6053      	str	r3, [r2, #4]
 8004a9a:	4408      	add	r0, r1
 8004a9c:	6010      	str	r0, [r2, #0]
 8004a9e:	e7da      	b.n	8004a56 <_free_r+0x22>
 8004aa0:	d902      	bls.n	8004aa8 <_free_r+0x74>
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	e7d6      	b.n	8004a56 <_free_r+0x22>
 8004aa8:	6820      	ldr	r0, [r4, #0]
 8004aaa:	1821      	adds	r1, r4, r0
 8004aac:	428b      	cmp	r3, r1
 8004aae:	bf04      	itt	eq
 8004ab0:	6819      	ldreq	r1, [r3, #0]
 8004ab2:	685b      	ldreq	r3, [r3, #4]
 8004ab4:	6063      	str	r3, [r4, #4]
 8004ab6:	bf04      	itt	eq
 8004ab8:	1809      	addeq	r1, r1, r0
 8004aba:	6021      	streq	r1, [r4, #0]
 8004abc:	6054      	str	r4, [r2, #4]
 8004abe:	e7ca      	b.n	8004a56 <_free_r+0x22>
 8004ac0:	bd38      	pop	{r3, r4, r5, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000364 	.word	0x20000364

08004ac8 <sbrk_aligned>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	4e0f      	ldr	r6, [pc, #60]	@ (8004b08 <sbrk_aligned+0x40>)
 8004acc:	460c      	mov	r4, r1
 8004ace:	6831      	ldr	r1, [r6, #0]
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	b911      	cbnz	r1, 8004ada <sbrk_aligned+0x12>
 8004ad4:	f000 fe18 	bl	8005708 <_sbrk_r>
 8004ad8:	6030      	str	r0, [r6, #0]
 8004ada:	4621      	mov	r1, r4
 8004adc:	4628      	mov	r0, r5
 8004ade:	f000 fe13 	bl	8005708 <_sbrk_r>
 8004ae2:	1c43      	adds	r3, r0, #1
 8004ae4:	d103      	bne.n	8004aee <sbrk_aligned+0x26>
 8004ae6:	f04f 34ff 	mov.w	r4, #4294967295
 8004aea:	4620      	mov	r0, r4
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
 8004aee:	1cc4      	adds	r4, r0, #3
 8004af0:	f024 0403 	bic.w	r4, r4, #3
 8004af4:	42a0      	cmp	r0, r4
 8004af6:	d0f8      	beq.n	8004aea <sbrk_aligned+0x22>
 8004af8:	1a21      	subs	r1, r4, r0
 8004afa:	4628      	mov	r0, r5
 8004afc:	f000 fe04 	bl	8005708 <_sbrk_r>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d1f2      	bne.n	8004aea <sbrk_aligned+0x22>
 8004b04:	e7ef      	b.n	8004ae6 <sbrk_aligned+0x1e>
 8004b06:	bf00      	nop
 8004b08:	20000360 	.word	0x20000360

08004b0c <_malloc_r>:
 8004b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b10:	1ccd      	adds	r5, r1, #3
 8004b12:	f025 0503 	bic.w	r5, r5, #3
 8004b16:	3508      	adds	r5, #8
 8004b18:	2d0c      	cmp	r5, #12
 8004b1a:	bf38      	it	cc
 8004b1c:	250c      	movcc	r5, #12
 8004b1e:	2d00      	cmp	r5, #0
 8004b20:	4606      	mov	r6, r0
 8004b22:	db01      	blt.n	8004b28 <_malloc_r+0x1c>
 8004b24:	42a9      	cmp	r1, r5
 8004b26:	d904      	bls.n	8004b32 <_malloc_r+0x26>
 8004b28:	230c      	movs	r3, #12
 8004b2a:	6033      	str	r3, [r6, #0]
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c08 <_malloc_r+0xfc>
 8004b36:	f000 f869 	bl	8004c0c <__malloc_lock>
 8004b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b3e:	461c      	mov	r4, r3
 8004b40:	bb44      	cbnz	r4, 8004b94 <_malloc_r+0x88>
 8004b42:	4629      	mov	r1, r5
 8004b44:	4630      	mov	r0, r6
 8004b46:	f7ff ffbf 	bl	8004ac8 <sbrk_aligned>
 8004b4a:	1c43      	adds	r3, r0, #1
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	d158      	bne.n	8004c02 <_malloc_r+0xf6>
 8004b50:	f8d8 4000 	ldr.w	r4, [r8]
 8004b54:	4627      	mov	r7, r4
 8004b56:	2f00      	cmp	r7, #0
 8004b58:	d143      	bne.n	8004be2 <_malloc_r+0xd6>
 8004b5a:	2c00      	cmp	r4, #0
 8004b5c:	d04b      	beq.n	8004bf6 <_malloc_r+0xea>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	4639      	mov	r1, r7
 8004b62:	4630      	mov	r0, r6
 8004b64:	eb04 0903 	add.w	r9, r4, r3
 8004b68:	f000 fdce 	bl	8005708 <_sbrk_r>
 8004b6c:	4581      	cmp	r9, r0
 8004b6e:	d142      	bne.n	8004bf6 <_malloc_r+0xea>
 8004b70:	6821      	ldr	r1, [r4, #0]
 8004b72:	1a6d      	subs	r5, r5, r1
 8004b74:	4629      	mov	r1, r5
 8004b76:	4630      	mov	r0, r6
 8004b78:	f7ff ffa6 	bl	8004ac8 <sbrk_aligned>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d03a      	beq.n	8004bf6 <_malloc_r+0xea>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	442b      	add	r3, r5
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	f8d8 3000 	ldr.w	r3, [r8]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	bb62      	cbnz	r2, 8004be8 <_malloc_r+0xdc>
 8004b8e:	f8c8 7000 	str.w	r7, [r8]
 8004b92:	e00f      	b.n	8004bb4 <_malloc_r+0xa8>
 8004b94:	6822      	ldr	r2, [r4, #0]
 8004b96:	1b52      	subs	r2, r2, r5
 8004b98:	d420      	bmi.n	8004bdc <_malloc_r+0xd0>
 8004b9a:	2a0b      	cmp	r2, #11
 8004b9c:	d917      	bls.n	8004bce <_malloc_r+0xc2>
 8004b9e:	1961      	adds	r1, r4, r5
 8004ba0:	42a3      	cmp	r3, r4
 8004ba2:	6025      	str	r5, [r4, #0]
 8004ba4:	bf18      	it	ne
 8004ba6:	6059      	strne	r1, [r3, #4]
 8004ba8:	6863      	ldr	r3, [r4, #4]
 8004baa:	bf08      	it	eq
 8004bac:	f8c8 1000 	streq.w	r1, [r8]
 8004bb0:	5162      	str	r2, [r4, r5]
 8004bb2:	604b      	str	r3, [r1, #4]
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	f000 f82f 	bl	8004c18 <__malloc_unlock>
 8004bba:	f104 000b 	add.w	r0, r4, #11
 8004bbe:	1d23      	adds	r3, r4, #4
 8004bc0:	f020 0007 	bic.w	r0, r0, #7
 8004bc4:	1ac2      	subs	r2, r0, r3
 8004bc6:	bf1c      	itt	ne
 8004bc8:	1a1b      	subne	r3, r3, r0
 8004bca:	50a3      	strne	r3, [r4, r2]
 8004bcc:	e7af      	b.n	8004b2e <_malloc_r+0x22>
 8004bce:	6862      	ldr	r2, [r4, #4]
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	bf0c      	ite	eq
 8004bd4:	f8c8 2000 	streq.w	r2, [r8]
 8004bd8:	605a      	strne	r2, [r3, #4]
 8004bda:	e7eb      	b.n	8004bb4 <_malloc_r+0xa8>
 8004bdc:	4623      	mov	r3, r4
 8004bde:	6864      	ldr	r4, [r4, #4]
 8004be0:	e7ae      	b.n	8004b40 <_malloc_r+0x34>
 8004be2:	463c      	mov	r4, r7
 8004be4:	687f      	ldr	r7, [r7, #4]
 8004be6:	e7b6      	b.n	8004b56 <_malloc_r+0x4a>
 8004be8:	461a      	mov	r2, r3
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	d1fb      	bne.n	8004be8 <_malloc_r+0xdc>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6053      	str	r3, [r2, #4]
 8004bf4:	e7de      	b.n	8004bb4 <_malloc_r+0xa8>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	6033      	str	r3, [r6, #0]
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f000 f80c 	bl	8004c18 <__malloc_unlock>
 8004c00:	e794      	b.n	8004b2c <_malloc_r+0x20>
 8004c02:	6005      	str	r5, [r0, #0]
 8004c04:	e7d6      	b.n	8004bb4 <_malloc_r+0xa8>
 8004c06:	bf00      	nop
 8004c08:	20000364 	.word	0x20000364

08004c0c <__malloc_lock>:
 8004c0c:	4801      	ldr	r0, [pc, #4]	@ (8004c14 <__malloc_lock+0x8>)
 8004c0e:	f7ff bf0e 	b.w	8004a2e <__retarget_lock_acquire_recursive>
 8004c12:	bf00      	nop
 8004c14:	2000035c 	.word	0x2000035c

08004c18 <__malloc_unlock>:
 8004c18:	4801      	ldr	r0, [pc, #4]	@ (8004c20 <__malloc_unlock+0x8>)
 8004c1a:	f7ff bf09 	b.w	8004a30 <__retarget_lock_release_recursive>
 8004c1e:	bf00      	nop
 8004c20:	2000035c 	.word	0x2000035c

08004c24 <__ssputs_r>:
 8004c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c28:	688e      	ldr	r6, [r1, #8]
 8004c2a:	461f      	mov	r7, r3
 8004c2c:	42be      	cmp	r6, r7
 8004c2e:	680b      	ldr	r3, [r1, #0]
 8004c30:	4682      	mov	sl, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	4690      	mov	r8, r2
 8004c36:	d82d      	bhi.n	8004c94 <__ssputs_r+0x70>
 8004c38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c40:	d026      	beq.n	8004c90 <__ssputs_r+0x6c>
 8004c42:	6965      	ldr	r5, [r4, #20]
 8004c44:	6909      	ldr	r1, [r1, #16]
 8004c46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c4a:	eba3 0901 	sub.w	r9, r3, r1
 8004c4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c52:	1c7b      	adds	r3, r7, #1
 8004c54:	444b      	add	r3, r9
 8004c56:	106d      	asrs	r5, r5, #1
 8004c58:	429d      	cmp	r5, r3
 8004c5a:	bf38      	it	cc
 8004c5c:	461d      	movcc	r5, r3
 8004c5e:	0553      	lsls	r3, r2, #21
 8004c60:	d527      	bpl.n	8004cb2 <__ssputs_r+0x8e>
 8004c62:	4629      	mov	r1, r5
 8004c64:	f7ff ff52 	bl	8004b0c <_malloc_r>
 8004c68:	4606      	mov	r6, r0
 8004c6a:	b360      	cbz	r0, 8004cc6 <__ssputs_r+0xa2>
 8004c6c:	6921      	ldr	r1, [r4, #16]
 8004c6e:	464a      	mov	r2, r9
 8004c70:	f000 fd5a 	bl	8005728 <memcpy>
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c7e:	81a3      	strh	r3, [r4, #12]
 8004c80:	6126      	str	r6, [r4, #16]
 8004c82:	6165      	str	r5, [r4, #20]
 8004c84:	444e      	add	r6, r9
 8004c86:	eba5 0509 	sub.w	r5, r5, r9
 8004c8a:	6026      	str	r6, [r4, #0]
 8004c8c:	60a5      	str	r5, [r4, #8]
 8004c8e:	463e      	mov	r6, r7
 8004c90:	42be      	cmp	r6, r7
 8004c92:	d900      	bls.n	8004c96 <__ssputs_r+0x72>
 8004c94:	463e      	mov	r6, r7
 8004c96:	6820      	ldr	r0, [r4, #0]
 8004c98:	4632      	mov	r2, r6
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	f000 fcf8 	bl	8005690 <memmove>
 8004ca0:	68a3      	ldr	r3, [r4, #8]
 8004ca2:	1b9b      	subs	r3, r3, r6
 8004ca4:	60a3      	str	r3, [r4, #8]
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	4433      	add	r3, r6
 8004caa:	6023      	str	r3, [r4, #0]
 8004cac:	2000      	movs	r0, #0
 8004cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb2:	462a      	mov	r2, r5
 8004cb4:	f000 fd46 	bl	8005744 <_realloc_r>
 8004cb8:	4606      	mov	r6, r0
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d1e0      	bne.n	8004c80 <__ssputs_r+0x5c>
 8004cbe:	6921      	ldr	r1, [r4, #16]
 8004cc0:	4650      	mov	r0, sl
 8004cc2:	f7ff feb7 	bl	8004a34 <_free_r>
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	f8ca 3000 	str.w	r3, [sl]
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cd2:	81a3      	strh	r3, [r4, #12]
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	e7e9      	b.n	8004cae <__ssputs_r+0x8a>
	...

08004cdc <_svfiprintf_r>:
 8004cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	4698      	mov	r8, r3
 8004ce2:	898b      	ldrh	r3, [r1, #12]
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	b09d      	sub	sp, #116	@ 0x74
 8004ce8:	4607      	mov	r7, r0
 8004cea:	460d      	mov	r5, r1
 8004cec:	4614      	mov	r4, r2
 8004cee:	d510      	bpl.n	8004d12 <_svfiprintf_r+0x36>
 8004cf0:	690b      	ldr	r3, [r1, #16]
 8004cf2:	b973      	cbnz	r3, 8004d12 <_svfiprintf_r+0x36>
 8004cf4:	2140      	movs	r1, #64	@ 0x40
 8004cf6:	f7ff ff09 	bl	8004b0c <_malloc_r>
 8004cfa:	6028      	str	r0, [r5, #0]
 8004cfc:	6128      	str	r0, [r5, #16]
 8004cfe:	b930      	cbnz	r0, 8004d0e <_svfiprintf_r+0x32>
 8004d00:	230c      	movs	r3, #12
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	b01d      	add	sp, #116	@ 0x74
 8004d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0e:	2340      	movs	r3, #64	@ 0x40
 8004d10:	616b      	str	r3, [r5, #20]
 8004d12:	2300      	movs	r3, #0
 8004d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d16:	2320      	movs	r3, #32
 8004d18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d20:	2330      	movs	r3, #48	@ 0x30
 8004d22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ec0 <_svfiprintf_r+0x1e4>
 8004d26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d2a:	f04f 0901 	mov.w	r9, #1
 8004d2e:	4623      	mov	r3, r4
 8004d30:	469a      	mov	sl, r3
 8004d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d36:	b10a      	cbz	r2, 8004d3c <_svfiprintf_r+0x60>
 8004d38:	2a25      	cmp	r2, #37	@ 0x25
 8004d3a:	d1f9      	bne.n	8004d30 <_svfiprintf_r+0x54>
 8004d3c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d40:	d00b      	beq.n	8004d5a <_svfiprintf_r+0x7e>
 8004d42:	465b      	mov	r3, fp
 8004d44:	4622      	mov	r2, r4
 8004d46:	4629      	mov	r1, r5
 8004d48:	4638      	mov	r0, r7
 8004d4a:	f7ff ff6b 	bl	8004c24 <__ssputs_r>
 8004d4e:	3001      	adds	r0, #1
 8004d50:	f000 80a7 	beq.w	8004ea2 <_svfiprintf_r+0x1c6>
 8004d54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d56:	445a      	add	r2, fp
 8004d58:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 809f 	beq.w	8004ea2 <_svfiprintf_r+0x1c6>
 8004d64:	2300      	movs	r3, #0
 8004d66:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d6e:	f10a 0a01 	add.w	sl, sl, #1
 8004d72:	9304      	str	r3, [sp, #16]
 8004d74:	9307      	str	r3, [sp, #28]
 8004d76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d7c:	4654      	mov	r4, sl
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d84:	484e      	ldr	r0, [pc, #312]	@ (8004ec0 <_svfiprintf_r+0x1e4>)
 8004d86:	f7fb fa33 	bl	80001f0 <memchr>
 8004d8a:	9a04      	ldr	r2, [sp, #16]
 8004d8c:	b9d8      	cbnz	r0, 8004dc6 <_svfiprintf_r+0xea>
 8004d8e:	06d0      	lsls	r0, r2, #27
 8004d90:	bf44      	itt	mi
 8004d92:	2320      	movmi	r3, #32
 8004d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d98:	0711      	lsls	r1, r2, #28
 8004d9a:	bf44      	itt	mi
 8004d9c:	232b      	movmi	r3, #43	@ 0x2b
 8004d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004da2:	f89a 3000 	ldrb.w	r3, [sl]
 8004da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004da8:	d015      	beq.n	8004dd6 <_svfiprintf_r+0xfa>
 8004daa:	9a07      	ldr	r2, [sp, #28]
 8004dac:	4654      	mov	r4, sl
 8004dae:	2000      	movs	r0, #0
 8004db0:	f04f 0c0a 	mov.w	ip, #10
 8004db4:	4621      	mov	r1, r4
 8004db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dba:	3b30      	subs	r3, #48	@ 0x30
 8004dbc:	2b09      	cmp	r3, #9
 8004dbe:	d94b      	bls.n	8004e58 <_svfiprintf_r+0x17c>
 8004dc0:	b1b0      	cbz	r0, 8004df0 <_svfiprintf_r+0x114>
 8004dc2:	9207      	str	r2, [sp, #28]
 8004dc4:	e014      	b.n	8004df0 <_svfiprintf_r+0x114>
 8004dc6:	eba0 0308 	sub.w	r3, r0, r8
 8004dca:	fa09 f303 	lsl.w	r3, r9, r3
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	46a2      	mov	sl, r4
 8004dd4:	e7d2      	b.n	8004d7c <_svfiprintf_r+0xa0>
 8004dd6:	9b03      	ldr	r3, [sp, #12]
 8004dd8:	1d19      	adds	r1, r3, #4
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	9103      	str	r1, [sp, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bfbb      	ittet	lt
 8004de2:	425b      	neglt	r3, r3
 8004de4:	f042 0202 	orrlt.w	r2, r2, #2
 8004de8:	9307      	strge	r3, [sp, #28]
 8004dea:	9307      	strlt	r3, [sp, #28]
 8004dec:	bfb8      	it	lt
 8004dee:	9204      	strlt	r2, [sp, #16]
 8004df0:	7823      	ldrb	r3, [r4, #0]
 8004df2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004df4:	d10a      	bne.n	8004e0c <_svfiprintf_r+0x130>
 8004df6:	7863      	ldrb	r3, [r4, #1]
 8004df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dfa:	d132      	bne.n	8004e62 <_svfiprintf_r+0x186>
 8004dfc:	9b03      	ldr	r3, [sp, #12]
 8004dfe:	1d1a      	adds	r2, r3, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	9203      	str	r2, [sp, #12]
 8004e04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e08:	3402      	adds	r4, #2
 8004e0a:	9305      	str	r3, [sp, #20]
 8004e0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ed0 <_svfiprintf_r+0x1f4>
 8004e10:	7821      	ldrb	r1, [r4, #0]
 8004e12:	2203      	movs	r2, #3
 8004e14:	4650      	mov	r0, sl
 8004e16:	f7fb f9eb 	bl	80001f0 <memchr>
 8004e1a:	b138      	cbz	r0, 8004e2c <_svfiprintf_r+0x150>
 8004e1c:	9b04      	ldr	r3, [sp, #16]
 8004e1e:	eba0 000a 	sub.w	r0, r0, sl
 8004e22:	2240      	movs	r2, #64	@ 0x40
 8004e24:	4082      	lsls	r2, r0
 8004e26:	4313      	orrs	r3, r2
 8004e28:	3401      	adds	r4, #1
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e30:	4824      	ldr	r0, [pc, #144]	@ (8004ec4 <_svfiprintf_r+0x1e8>)
 8004e32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e36:	2206      	movs	r2, #6
 8004e38:	f7fb f9da 	bl	80001f0 <memchr>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d036      	beq.n	8004eae <_svfiprintf_r+0x1d2>
 8004e40:	4b21      	ldr	r3, [pc, #132]	@ (8004ec8 <_svfiprintf_r+0x1ec>)
 8004e42:	bb1b      	cbnz	r3, 8004e8c <_svfiprintf_r+0x1b0>
 8004e44:	9b03      	ldr	r3, [sp, #12]
 8004e46:	3307      	adds	r3, #7
 8004e48:	f023 0307 	bic.w	r3, r3, #7
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	9303      	str	r3, [sp, #12]
 8004e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e52:	4433      	add	r3, r6
 8004e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e56:	e76a      	b.n	8004d2e <_svfiprintf_r+0x52>
 8004e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	2001      	movs	r0, #1
 8004e60:	e7a8      	b.n	8004db4 <_svfiprintf_r+0xd8>
 8004e62:	2300      	movs	r3, #0
 8004e64:	3401      	adds	r4, #1
 8004e66:	9305      	str	r3, [sp, #20]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f04f 0c0a 	mov.w	ip, #10
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e74:	3a30      	subs	r2, #48	@ 0x30
 8004e76:	2a09      	cmp	r2, #9
 8004e78:	d903      	bls.n	8004e82 <_svfiprintf_r+0x1a6>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0c6      	beq.n	8004e0c <_svfiprintf_r+0x130>
 8004e7e:	9105      	str	r1, [sp, #20]
 8004e80:	e7c4      	b.n	8004e0c <_svfiprintf_r+0x130>
 8004e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e86:	4604      	mov	r4, r0
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e7f0      	b.n	8004e6e <_svfiprintf_r+0x192>
 8004e8c:	ab03      	add	r3, sp, #12
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	462a      	mov	r2, r5
 8004e92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ecc <_svfiprintf_r+0x1f0>)
 8004e94:	a904      	add	r1, sp, #16
 8004e96:	4638      	mov	r0, r7
 8004e98:	f3af 8000 	nop.w
 8004e9c:	1c42      	adds	r2, r0, #1
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	d1d6      	bne.n	8004e50 <_svfiprintf_r+0x174>
 8004ea2:	89ab      	ldrh	r3, [r5, #12]
 8004ea4:	065b      	lsls	r3, r3, #25
 8004ea6:	f53f af2d 	bmi.w	8004d04 <_svfiprintf_r+0x28>
 8004eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004eac:	e72c      	b.n	8004d08 <_svfiprintf_r+0x2c>
 8004eae:	ab03      	add	r3, sp, #12
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	462a      	mov	r2, r5
 8004eb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ecc <_svfiprintf_r+0x1f0>)
 8004eb6:	a904      	add	r1, sp, #16
 8004eb8:	4638      	mov	r0, r7
 8004eba:	f000 f9bb 	bl	8005234 <_printf_i>
 8004ebe:	e7ed      	b.n	8004e9c <_svfiprintf_r+0x1c0>
 8004ec0:	08006894 	.word	0x08006894
 8004ec4:	0800689e 	.word	0x0800689e
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	08004c25 	.word	0x08004c25
 8004ed0:	0800689a 	.word	0x0800689a

08004ed4 <__sfputc_r>:
 8004ed4:	6893      	ldr	r3, [r2, #8]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	b410      	push	{r4}
 8004edc:	6093      	str	r3, [r2, #8]
 8004ede:	da08      	bge.n	8004ef2 <__sfputc_r+0x1e>
 8004ee0:	6994      	ldr	r4, [r2, #24]
 8004ee2:	42a3      	cmp	r3, r4
 8004ee4:	db01      	blt.n	8004eea <__sfputc_r+0x16>
 8004ee6:	290a      	cmp	r1, #10
 8004ee8:	d103      	bne.n	8004ef2 <__sfputc_r+0x1e>
 8004eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eee:	f7ff bc90 	b.w	8004812 <__swbuf_r>
 8004ef2:	6813      	ldr	r3, [r2, #0]
 8004ef4:	1c58      	adds	r0, r3, #1
 8004ef6:	6010      	str	r0, [r2, #0]
 8004ef8:	7019      	strb	r1, [r3, #0]
 8004efa:	4608      	mov	r0, r1
 8004efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <__sfputs_r>:
 8004f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f04:	4606      	mov	r6, r0
 8004f06:	460f      	mov	r7, r1
 8004f08:	4614      	mov	r4, r2
 8004f0a:	18d5      	adds	r5, r2, r3
 8004f0c:	42ac      	cmp	r4, r5
 8004f0e:	d101      	bne.n	8004f14 <__sfputs_r+0x12>
 8004f10:	2000      	movs	r0, #0
 8004f12:	e007      	b.n	8004f24 <__sfputs_r+0x22>
 8004f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f18:	463a      	mov	r2, r7
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff ffda 	bl	8004ed4 <__sfputc_r>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d1f3      	bne.n	8004f0c <__sfputs_r+0xa>
 8004f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f28 <_vfiprintf_r>:
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	460d      	mov	r5, r1
 8004f2e:	b09d      	sub	sp, #116	@ 0x74
 8004f30:	4614      	mov	r4, r2
 8004f32:	4698      	mov	r8, r3
 8004f34:	4606      	mov	r6, r0
 8004f36:	b118      	cbz	r0, 8004f40 <_vfiprintf_r+0x18>
 8004f38:	6a03      	ldr	r3, [r0, #32]
 8004f3a:	b90b      	cbnz	r3, 8004f40 <_vfiprintf_r+0x18>
 8004f3c:	f7ff fb60 	bl	8004600 <__sinit>
 8004f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f42:	07d9      	lsls	r1, r3, #31
 8004f44:	d405      	bmi.n	8004f52 <_vfiprintf_r+0x2a>
 8004f46:	89ab      	ldrh	r3, [r5, #12]
 8004f48:	059a      	lsls	r2, r3, #22
 8004f4a:	d402      	bmi.n	8004f52 <_vfiprintf_r+0x2a>
 8004f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f4e:	f7ff fd6e 	bl	8004a2e <__retarget_lock_acquire_recursive>
 8004f52:	89ab      	ldrh	r3, [r5, #12]
 8004f54:	071b      	lsls	r3, r3, #28
 8004f56:	d501      	bpl.n	8004f5c <_vfiprintf_r+0x34>
 8004f58:	692b      	ldr	r3, [r5, #16]
 8004f5a:	b99b      	cbnz	r3, 8004f84 <_vfiprintf_r+0x5c>
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7ff fc96 	bl	8004890 <__swsetup_r>
 8004f64:	b170      	cbz	r0, 8004f84 <_vfiprintf_r+0x5c>
 8004f66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f68:	07dc      	lsls	r4, r3, #31
 8004f6a:	d504      	bpl.n	8004f76 <_vfiprintf_r+0x4e>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	b01d      	add	sp, #116	@ 0x74
 8004f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f76:	89ab      	ldrh	r3, [r5, #12]
 8004f78:	0598      	lsls	r0, r3, #22
 8004f7a:	d4f7      	bmi.n	8004f6c <_vfiprintf_r+0x44>
 8004f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f7e:	f7ff fd57 	bl	8004a30 <__retarget_lock_release_recursive>
 8004f82:	e7f3      	b.n	8004f6c <_vfiprintf_r+0x44>
 8004f84:	2300      	movs	r3, #0
 8004f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f88:	2320      	movs	r3, #32
 8004f8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f92:	2330      	movs	r3, #48	@ 0x30
 8004f94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005144 <_vfiprintf_r+0x21c>
 8004f98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f9c:	f04f 0901 	mov.w	r9, #1
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	469a      	mov	sl, r3
 8004fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa8:	b10a      	cbz	r2, 8004fae <_vfiprintf_r+0x86>
 8004faa:	2a25      	cmp	r2, #37	@ 0x25
 8004fac:	d1f9      	bne.n	8004fa2 <_vfiprintf_r+0x7a>
 8004fae:	ebba 0b04 	subs.w	fp, sl, r4
 8004fb2:	d00b      	beq.n	8004fcc <_vfiprintf_r+0xa4>
 8004fb4:	465b      	mov	r3, fp
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f7ff ffa1 	bl	8004f02 <__sfputs_r>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f000 80a7 	beq.w	8005114 <_vfiprintf_r+0x1ec>
 8004fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fc8:	445a      	add	r2, fp
 8004fca:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 809f 	beq.w	8005114 <_vfiprintf_r+0x1ec>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fe0:	f10a 0a01 	add.w	sl, sl, #1
 8004fe4:	9304      	str	r3, [sp, #16]
 8004fe6:	9307      	str	r3, [sp, #28]
 8004fe8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fec:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fee:	4654      	mov	r4, sl
 8004ff0:	2205      	movs	r2, #5
 8004ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff6:	4853      	ldr	r0, [pc, #332]	@ (8005144 <_vfiprintf_r+0x21c>)
 8004ff8:	f7fb f8fa 	bl	80001f0 <memchr>
 8004ffc:	9a04      	ldr	r2, [sp, #16]
 8004ffe:	b9d8      	cbnz	r0, 8005038 <_vfiprintf_r+0x110>
 8005000:	06d1      	lsls	r1, r2, #27
 8005002:	bf44      	itt	mi
 8005004:	2320      	movmi	r3, #32
 8005006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800500a:	0713      	lsls	r3, r2, #28
 800500c:	bf44      	itt	mi
 800500e:	232b      	movmi	r3, #43	@ 0x2b
 8005010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005014:	f89a 3000 	ldrb.w	r3, [sl]
 8005018:	2b2a      	cmp	r3, #42	@ 0x2a
 800501a:	d015      	beq.n	8005048 <_vfiprintf_r+0x120>
 800501c:	9a07      	ldr	r2, [sp, #28]
 800501e:	4654      	mov	r4, sl
 8005020:	2000      	movs	r0, #0
 8005022:	f04f 0c0a 	mov.w	ip, #10
 8005026:	4621      	mov	r1, r4
 8005028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800502c:	3b30      	subs	r3, #48	@ 0x30
 800502e:	2b09      	cmp	r3, #9
 8005030:	d94b      	bls.n	80050ca <_vfiprintf_r+0x1a2>
 8005032:	b1b0      	cbz	r0, 8005062 <_vfiprintf_r+0x13a>
 8005034:	9207      	str	r2, [sp, #28]
 8005036:	e014      	b.n	8005062 <_vfiprintf_r+0x13a>
 8005038:	eba0 0308 	sub.w	r3, r0, r8
 800503c:	fa09 f303 	lsl.w	r3, r9, r3
 8005040:	4313      	orrs	r3, r2
 8005042:	9304      	str	r3, [sp, #16]
 8005044:	46a2      	mov	sl, r4
 8005046:	e7d2      	b.n	8004fee <_vfiprintf_r+0xc6>
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	1d19      	adds	r1, r3, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	9103      	str	r1, [sp, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	bfbb      	ittet	lt
 8005054:	425b      	neglt	r3, r3
 8005056:	f042 0202 	orrlt.w	r2, r2, #2
 800505a:	9307      	strge	r3, [sp, #28]
 800505c:	9307      	strlt	r3, [sp, #28]
 800505e:	bfb8      	it	lt
 8005060:	9204      	strlt	r2, [sp, #16]
 8005062:	7823      	ldrb	r3, [r4, #0]
 8005064:	2b2e      	cmp	r3, #46	@ 0x2e
 8005066:	d10a      	bne.n	800507e <_vfiprintf_r+0x156>
 8005068:	7863      	ldrb	r3, [r4, #1]
 800506a:	2b2a      	cmp	r3, #42	@ 0x2a
 800506c:	d132      	bne.n	80050d4 <_vfiprintf_r+0x1ac>
 800506e:	9b03      	ldr	r3, [sp, #12]
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	9203      	str	r2, [sp, #12]
 8005076:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800507a:	3402      	adds	r4, #2
 800507c:	9305      	str	r3, [sp, #20]
 800507e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005154 <_vfiprintf_r+0x22c>
 8005082:	7821      	ldrb	r1, [r4, #0]
 8005084:	2203      	movs	r2, #3
 8005086:	4650      	mov	r0, sl
 8005088:	f7fb f8b2 	bl	80001f0 <memchr>
 800508c:	b138      	cbz	r0, 800509e <_vfiprintf_r+0x176>
 800508e:	9b04      	ldr	r3, [sp, #16]
 8005090:	eba0 000a 	sub.w	r0, r0, sl
 8005094:	2240      	movs	r2, #64	@ 0x40
 8005096:	4082      	lsls	r2, r0
 8005098:	4313      	orrs	r3, r2
 800509a:	3401      	adds	r4, #1
 800509c:	9304      	str	r3, [sp, #16]
 800509e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a2:	4829      	ldr	r0, [pc, #164]	@ (8005148 <_vfiprintf_r+0x220>)
 80050a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050a8:	2206      	movs	r2, #6
 80050aa:	f7fb f8a1 	bl	80001f0 <memchr>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d03f      	beq.n	8005132 <_vfiprintf_r+0x20a>
 80050b2:	4b26      	ldr	r3, [pc, #152]	@ (800514c <_vfiprintf_r+0x224>)
 80050b4:	bb1b      	cbnz	r3, 80050fe <_vfiprintf_r+0x1d6>
 80050b6:	9b03      	ldr	r3, [sp, #12]
 80050b8:	3307      	adds	r3, #7
 80050ba:	f023 0307 	bic.w	r3, r3, #7
 80050be:	3308      	adds	r3, #8
 80050c0:	9303      	str	r3, [sp, #12]
 80050c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050c4:	443b      	add	r3, r7
 80050c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80050c8:	e76a      	b.n	8004fa0 <_vfiprintf_r+0x78>
 80050ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80050ce:	460c      	mov	r4, r1
 80050d0:	2001      	movs	r0, #1
 80050d2:	e7a8      	b.n	8005026 <_vfiprintf_r+0xfe>
 80050d4:	2300      	movs	r3, #0
 80050d6:	3401      	adds	r4, #1
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	4619      	mov	r1, r3
 80050dc:	f04f 0c0a 	mov.w	ip, #10
 80050e0:	4620      	mov	r0, r4
 80050e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050e6:	3a30      	subs	r2, #48	@ 0x30
 80050e8:	2a09      	cmp	r2, #9
 80050ea:	d903      	bls.n	80050f4 <_vfiprintf_r+0x1cc>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0c6      	beq.n	800507e <_vfiprintf_r+0x156>
 80050f0:	9105      	str	r1, [sp, #20]
 80050f2:	e7c4      	b.n	800507e <_vfiprintf_r+0x156>
 80050f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80050f8:	4604      	mov	r4, r0
 80050fa:	2301      	movs	r3, #1
 80050fc:	e7f0      	b.n	80050e0 <_vfiprintf_r+0x1b8>
 80050fe:	ab03      	add	r3, sp, #12
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	462a      	mov	r2, r5
 8005104:	4b12      	ldr	r3, [pc, #72]	@ (8005150 <_vfiprintf_r+0x228>)
 8005106:	a904      	add	r1, sp, #16
 8005108:	4630      	mov	r0, r6
 800510a:	f3af 8000 	nop.w
 800510e:	4607      	mov	r7, r0
 8005110:	1c78      	adds	r0, r7, #1
 8005112:	d1d6      	bne.n	80050c2 <_vfiprintf_r+0x19a>
 8005114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005116:	07d9      	lsls	r1, r3, #31
 8005118:	d405      	bmi.n	8005126 <_vfiprintf_r+0x1fe>
 800511a:	89ab      	ldrh	r3, [r5, #12]
 800511c:	059a      	lsls	r2, r3, #22
 800511e:	d402      	bmi.n	8005126 <_vfiprintf_r+0x1fe>
 8005120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005122:	f7ff fc85 	bl	8004a30 <__retarget_lock_release_recursive>
 8005126:	89ab      	ldrh	r3, [r5, #12]
 8005128:	065b      	lsls	r3, r3, #25
 800512a:	f53f af1f 	bmi.w	8004f6c <_vfiprintf_r+0x44>
 800512e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005130:	e71e      	b.n	8004f70 <_vfiprintf_r+0x48>
 8005132:	ab03      	add	r3, sp, #12
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	462a      	mov	r2, r5
 8005138:	4b05      	ldr	r3, [pc, #20]	@ (8005150 <_vfiprintf_r+0x228>)
 800513a:	a904      	add	r1, sp, #16
 800513c:	4630      	mov	r0, r6
 800513e:	f000 f879 	bl	8005234 <_printf_i>
 8005142:	e7e4      	b.n	800510e <_vfiprintf_r+0x1e6>
 8005144:	08006894 	.word	0x08006894
 8005148:	0800689e 	.word	0x0800689e
 800514c:	00000000 	.word	0x00000000
 8005150:	08004f03 	.word	0x08004f03
 8005154:	0800689a 	.word	0x0800689a

08005158 <_printf_common>:
 8005158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800515c:	4616      	mov	r6, r2
 800515e:	4698      	mov	r8, r3
 8005160:	688a      	ldr	r2, [r1, #8]
 8005162:	690b      	ldr	r3, [r1, #16]
 8005164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005168:	4293      	cmp	r3, r2
 800516a:	bfb8      	it	lt
 800516c:	4613      	movlt	r3, r2
 800516e:	6033      	str	r3, [r6, #0]
 8005170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005174:	4607      	mov	r7, r0
 8005176:	460c      	mov	r4, r1
 8005178:	b10a      	cbz	r2, 800517e <_printf_common+0x26>
 800517a:	3301      	adds	r3, #1
 800517c:	6033      	str	r3, [r6, #0]
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	0699      	lsls	r1, r3, #26
 8005182:	bf42      	ittt	mi
 8005184:	6833      	ldrmi	r3, [r6, #0]
 8005186:	3302      	addmi	r3, #2
 8005188:	6033      	strmi	r3, [r6, #0]
 800518a:	6825      	ldr	r5, [r4, #0]
 800518c:	f015 0506 	ands.w	r5, r5, #6
 8005190:	d106      	bne.n	80051a0 <_printf_common+0x48>
 8005192:	f104 0a19 	add.w	sl, r4, #25
 8005196:	68e3      	ldr	r3, [r4, #12]
 8005198:	6832      	ldr	r2, [r6, #0]
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	42ab      	cmp	r3, r5
 800519e:	dc26      	bgt.n	80051ee <_printf_common+0x96>
 80051a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	3b00      	subs	r3, #0
 80051a8:	bf18      	it	ne
 80051aa:	2301      	movne	r3, #1
 80051ac:	0692      	lsls	r2, r2, #26
 80051ae:	d42b      	bmi.n	8005208 <_printf_common+0xb0>
 80051b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051b4:	4641      	mov	r1, r8
 80051b6:	4638      	mov	r0, r7
 80051b8:	47c8      	blx	r9
 80051ba:	3001      	adds	r0, #1
 80051bc:	d01e      	beq.n	80051fc <_printf_common+0xa4>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	6922      	ldr	r2, [r4, #16]
 80051c2:	f003 0306 	and.w	r3, r3, #6
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	bf02      	ittt	eq
 80051ca:	68e5      	ldreq	r5, [r4, #12]
 80051cc:	6833      	ldreq	r3, [r6, #0]
 80051ce:	1aed      	subeq	r5, r5, r3
 80051d0:	68a3      	ldr	r3, [r4, #8]
 80051d2:	bf0c      	ite	eq
 80051d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d8:	2500      	movne	r5, #0
 80051da:	4293      	cmp	r3, r2
 80051dc:	bfc4      	itt	gt
 80051de:	1a9b      	subgt	r3, r3, r2
 80051e0:	18ed      	addgt	r5, r5, r3
 80051e2:	2600      	movs	r6, #0
 80051e4:	341a      	adds	r4, #26
 80051e6:	42b5      	cmp	r5, r6
 80051e8:	d11a      	bne.n	8005220 <_printf_common+0xc8>
 80051ea:	2000      	movs	r0, #0
 80051ec:	e008      	b.n	8005200 <_printf_common+0xa8>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4652      	mov	r2, sl
 80051f2:	4641      	mov	r1, r8
 80051f4:	4638      	mov	r0, r7
 80051f6:	47c8      	blx	r9
 80051f8:	3001      	adds	r0, #1
 80051fa:	d103      	bne.n	8005204 <_printf_common+0xac>
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005204:	3501      	adds	r5, #1
 8005206:	e7c6      	b.n	8005196 <_printf_common+0x3e>
 8005208:	18e1      	adds	r1, r4, r3
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	2030      	movs	r0, #48	@ 0x30
 800520e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005212:	4422      	add	r2, r4
 8005214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800521c:	3302      	adds	r3, #2
 800521e:	e7c7      	b.n	80051b0 <_printf_common+0x58>
 8005220:	2301      	movs	r3, #1
 8005222:	4622      	mov	r2, r4
 8005224:	4641      	mov	r1, r8
 8005226:	4638      	mov	r0, r7
 8005228:	47c8      	blx	r9
 800522a:	3001      	adds	r0, #1
 800522c:	d0e6      	beq.n	80051fc <_printf_common+0xa4>
 800522e:	3601      	adds	r6, #1
 8005230:	e7d9      	b.n	80051e6 <_printf_common+0x8e>
	...

08005234 <_printf_i>:
 8005234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005238:	7e0f      	ldrb	r7, [r1, #24]
 800523a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800523c:	2f78      	cmp	r7, #120	@ 0x78
 800523e:	4691      	mov	r9, r2
 8005240:	4680      	mov	r8, r0
 8005242:	460c      	mov	r4, r1
 8005244:	469a      	mov	sl, r3
 8005246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800524a:	d807      	bhi.n	800525c <_printf_i+0x28>
 800524c:	2f62      	cmp	r7, #98	@ 0x62
 800524e:	d80a      	bhi.n	8005266 <_printf_i+0x32>
 8005250:	2f00      	cmp	r7, #0
 8005252:	f000 80d2 	beq.w	80053fa <_printf_i+0x1c6>
 8005256:	2f58      	cmp	r7, #88	@ 0x58
 8005258:	f000 80b9 	beq.w	80053ce <_printf_i+0x19a>
 800525c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005264:	e03a      	b.n	80052dc <_printf_i+0xa8>
 8005266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800526a:	2b15      	cmp	r3, #21
 800526c:	d8f6      	bhi.n	800525c <_printf_i+0x28>
 800526e:	a101      	add	r1, pc, #4	@ (adr r1, 8005274 <_printf_i+0x40>)
 8005270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005274:	080052cd 	.word	0x080052cd
 8005278:	080052e1 	.word	0x080052e1
 800527c:	0800525d 	.word	0x0800525d
 8005280:	0800525d 	.word	0x0800525d
 8005284:	0800525d 	.word	0x0800525d
 8005288:	0800525d 	.word	0x0800525d
 800528c:	080052e1 	.word	0x080052e1
 8005290:	0800525d 	.word	0x0800525d
 8005294:	0800525d 	.word	0x0800525d
 8005298:	0800525d 	.word	0x0800525d
 800529c:	0800525d 	.word	0x0800525d
 80052a0:	080053e1 	.word	0x080053e1
 80052a4:	0800530b 	.word	0x0800530b
 80052a8:	0800539b 	.word	0x0800539b
 80052ac:	0800525d 	.word	0x0800525d
 80052b0:	0800525d 	.word	0x0800525d
 80052b4:	08005403 	.word	0x08005403
 80052b8:	0800525d 	.word	0x0800525d
 80052bc:	0800530b 	.word	0x0800530b
 80052c0:	0800525d 	.word	0x0800525d
 80052c4:	0800525d 	.word	0x0800525d
 80052c8:	080053a3 	.word	0x080053a3
 80052cc:	6833      	ldr	r3, [r6, #0]
 80052ce:	1d1a      	adds	r2, r3, #4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6032      	str	r2, [r6, #0]
 80052d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052dc:	2301      	movs	r3, #1
 80052de:	e09d      	b.n	800541c <_printf_i+0x1e8>
 80052e0:	6833      	ldr	r3, [r6, #0]
 80052e2:	6820      	ldr	r0, [r4, #0]
 80052e4:	1d19      	adds	r1, r3, #4
 80052e6:	6031      	str	r1, [r6, #0]
 80052e8:	0606      	lsls	r6, r0, #24
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0xbc>
 80052ec:	681d      	ldr	r5, [r3, #0]
 80052ee:	e003      	b.n	80052f8 <_printf_i+0xc4>
 80052f0:	0645      	lsls	r5, r0, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0xb8>
 80052f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052f8:	2d00      	cmp	r5, #0
 80052fa:	da03      	bge.n	8005304 <_printf_i+0xd0>
 80052fc:	232d      	movs	r3, #45	@ 0x2d
 80052fe:	426d      	negs	r5, r5
 8005300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005304:	4859      	ldr	r0, [pc, #356]	@ (800546c <_printf_i+0x238>)
 8005306:	230a      	movs	r3, #10
 8005308:	e011      	b.n	800532e <_printf_i+0xfa>
 800530a:	6821      	ldr	r1, [r4, #0]
 800530c:	6833      	ldr	r3, [r6, #0]
 800530e:	0608      	lsls	r0, r1, #24
 8005310:	f853 5b04 	ldr.w	r5, [r3], #4
 8005314:	d402      	bmi.n	800531c <_printf_i+0xe8>
 8005316:	0649      	lsls	r1, r1, #25
 8005318:	bf48      	it	mi
 800531a:	b2ad      	uxthmi	r5, r5
 800531c:	2f6f      	cmp	r7, #111	@ 0x6f
 800531e:	4853      	ldr	r0, [pc, #332]	@ (800546c <_printf_i+0x238>)
 8005320:	6033      	str	r3, [r6, #0]
 8005322:	bf14      	ite	ne
 8005324:	230a      	movne	r3, #10
 8005326:	2308      	moveq	r3, #8
 8005328:	2100      	movs	r1, #0
 800532a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800532e:	6866      	ldr	r6, [r4, #4]
 8005330:	60a6      	str	r6, [r4, #8]
 8005332:	2e00      	cmp	r6, #0
 8005334:	bfa2      	ittt	ge
 8005336:	6821      	ldrge	r1, [r4, #0]
 8005338:	f021 0104 	bicge.w	r1, r1, #4
 800533c:	6021      	strge	r1, [r4, #0]
 800533e:	b90d      	cbnz	r5, 8005344 <_printf_i+0x110>
 8005340:	2e00      	cmp	r6, #0
 8005342:	d04b      	beq.n	80053dc <_printf_i+0x1a8>
 8005344:	4616      	mov	r6, r2
 8005346:	fbb5 f1f3 	udiv	r1, r5, r3
 800534a:	fb03 5711 	mls	r7, r3, r1, r5
 800534e:	5dc7      	ldrb	r7, [r0, r7]
 8005350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005354:	462f      	mov	r7, r5
 8005356:	42bb      	cmp	r3, r7
 8005358:	460d      	mov	r5, r1
 800535a:	d9f4      	bls.n	8005346 <_printf_i+0x112>
 800535c:	2b08      	cmp	r3, #8
 800535e:	d10b      	bne.n	8005378 <_printf_i+0x144>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07df      	lsls	r7, r3, #31
 8005364:	d508      	bpl.n	8005378 <_printf_i+0x144>
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	6861      	ldr	r1, [r4, #4]
 800536a:	4299      	cmp	r1, r3
 800536c:	bfde      	ittt	le
 800536e:	2330      	movle	r3, #48	@ 0x30
 8005370:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005374:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005378:	1b92      	subs	r2, r2, r6
 800537a:	6122      	str	r2, [r4, #16]
 800537c:	f8cd a000 	str.w	sl, [sp]
 8005380:	464b      	mov	r3, r9
 8005382:	aa03      	add	r2, sp, #12
 8005384:	4621      	mov	r1, r4
 8005386:	4640      	mov	r0, r8
 8005388:	f7ff fee6 	bl	8005158 <_printf_common>
 800538c:	3001      	adds	r0, #1
 800538e:	d14a      	bne.n	8005426 <_printf_i+0x1f2>
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	b004      	add	sp, #16
 8005396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f043 0320 	orr.w	r3, r3, #32
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	4833      	ldr	r0, [pc, #204]	@ (8005470 <_printf_i+0x23c>)
 80053a4:	2778      	movs	r7, #120	@ 0x78
 80053a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	6831      	ldr	r1, [r6, #0]
 80053ae:	061f      	lsls	r7, r3, #24
 80053b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80053b4:	d402      	bmi.n	80053bc <_printf_i+0x188>
 80053b6:	065f      	lsls	r7, r3, #25
 80053b8:	bf48      	it	mi
 80053ba:	b2ad      	uxthmi	r5, r5
 80053bc:	6031      	str	r1, [r6, #0]
 80053be:	07d9      	lsls	r1, r3, #31
 80053c0:	bf44      	itt	mi
 80053c2:	f043 0320 	orrmi.w	r3, r3, #32
 80053c6:	6023      	strmi	r3, [r4, #0]
 80053c8:	b11d      	cbz	r5, 80053d2 <_printf_i+0x19e>
 80053ca:	2310      	movs	r3, #16
 80053cc:	e7ac      	b.n	8005328 <_printf_i+0xf4>
 80053ce:	4827      	ldr	r0, [pc, #156]	@ (800546c <_printf_i+0x238>)
 80053d0:	e7e9      	b.n	80053a6 <_printf_i+0x172>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	f023 0320 	bic.w	r3, r3, #32
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	e7f6      	b.n	80053ca <_printf_i+0x196>
 80053dc:	4616      	mov	r6, r2
 80053de:	e7bd      	b.n	800535c <_printf_i+0x128>
 80053e0:	6833      	ldr	r3, [r6, #0]
 80053e2:	6825      	ldr	r5, [r4, #0]
 80053e4:	6961      	ldr	r1, [r4, #20]
 80053e6:	1d18      	adds	r0, r3, #4
 80053e8:	6030      	str	r0, [r6, #0]
 80053ea:	062e      	lsls	r6, r5, #24
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	d501      	bpl.n	80053f4 <_printf_i+0x1c0>
 80053f0:	6019      	str	r1, [r3, #0]
 80053f2:	e002      	b.n	80053fa <_printf_i+0x1c6>
 80053f4:	0668      	lsls	r0, r5, #25
 80053f6:	d5fb      	bpl.n	80053f0 <_printf_i+0x1bc>
 80053f8:	8019      	strh	r1, [r3, #0]
 80053fa:	2300      	movs	r3, #0
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	4616      	mov	r6, r2
 8005400:	e7bc      	b.n	800537c <_printf_i+0x148>
 8005402:	6833      	ldr	r3, [r6, #0]
 8005404:	1d1a      	adds	r2, r3, #4
 8005406:	6032      	str	r2, [r6, #0]
 8005408:	681e      	ldr	r6, [r3, #0]
 800540a:	6862      	ldr	r2, [r4, #4]
 800540c:	2100      	movs	r1, #0
 800540e:	4630      	mov	r0, r6
 8005410:	f7fa feee 	bl	80001f0 <memchr>
 8005414:	b108      	cbz	r0, 800541a <_printf_i+0x1e6>
 8005416:	1b80      	subs	r0, r0, r6
 8005418:	6060      	str	r0, [r4, #4]
 800541a:	6863      	ldr	r3, [r4, #4]
 800541c:	6123      	str	r3, [r4, #16]
 800541e:	2300      	movs	r3, #0
 8005420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005424:	e7aa      	b.n	800537c <_printf_i+0x148>
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	4632      	mov	r2, r6
 800542a:	4649      	mov	r1, r9
 800542c:	4640      	mov	r0, r8
 800542e:	47d0      	blx	sl
 8005430:	3001      	adds	r0, #1
 8005432:	d0ad      	beq.n	8005390 <_printf_i+0x15c>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	079b      	lsls	r3, r3, #30
 8005438:	d413      	bmi.n	8005462 <_printf_i+0x22e>
 800543a:	68e0      	ldr	r0, [r4, #12]
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	4298      	cmp	r0, r3
 8005440:	bfb8      	it	lt
 8005442:	4618      	movlt	r0, r3
 8005444:	e7a6      	b.n	8005394 <_printf_i+0x160>
 8005446:	2301      	movs	r3, #1
 8005448:	4632      	mov	r2, r6
 800544a:	4649      	mov	r1, r9
 800544c:	4640      	mov	r0, r8
 800544e:	47d0      	blx	sl
 8005450:	3001      	adds	r0, #1
 8005452:	d09d      	beq.n	8005390 <_printf_i+0x15c>
 8005454:	3501      	adds	r5, #1
 8005456:	68e3      	ldr	r3, [r4, #12]
 8005458:	9903      	ldr	r1, [sp, #12]
 800545a:	1a5b      	subs	r3, r3, r1
 800545c:	42ab      	cmp	r3, r5
 800545e:	dcf2      	bgt.n	8005446 <_printf_i+0x212>
 8005460:	e7eb      	b.n	800543a <_printf_i+0x206>
 8005462:	2500      	movs	r5, #0
 8005464:	f104 0619 	add.w	r6, r4, #25
 8005468:	e7f5      	b.n	8005456 <_printf_i+0x222>
 800546a:	bf00      	nop
 800546c:	080068a5 	.word	0x080068a5
 8005470:	080068b6 	.word	0x080068b6

08005474 <__sflush_r>:
 8005474:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547c:	0716      	lsls	r6, r2, #28
 800547e:	4605      	mov	r5, r0
 8005480:	460c      	mov	r4, r1
 8005482:	d454      	bmi.n	800552e <__sflush_r+0xba>
 8005484:	684b      	ldr	r3, [r1, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	dc02      	bgt.n	8005490 <__sflush_r+0x1c>
 800548a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	dd48      	ble.n	8005522 <__sflush_r+0xae>
 8005490:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005492:	2e00      	cmp	r6, #0
 8005494:	d045      	beq.n	8005522 <__sflush_r+0xae>
 8005496:	2300      	movs	r3, #0
 8005498:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800549c:	682f      	ldr	r7, [r5, #0]
 800549e:	6a21      	ldr	r1, [r4, #32]
 80054a0:	602b      	str	r3, [r5, #0]
 80054a2:	d030      	beq.n	8005506 <__sflush_r+0x92>
 80054a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	0759      	lsls	r1, r3, #29
 80054aa:	d505      	bpl.n	80054b8 <__sflush_r+0x44>
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80054b2:	b10b      	cbz	r3, 80054b8 <__sflush_r+0x44>
 80054b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054b6:	1ad2      	subs	r2, r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054bc:	6a21      	ldr	r1, [r4, #32]
 80054be:	4628      	mov	r0, r5
 80054c0:	47b0      	blx	r6
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	d106      	bne.n	80054d6 <__sflush_r+0x62>
 80054c8:	6829      	ldr	r1, [r5, #0]
 80054ca:	291d      	cmp	r1, #29
 80054cc:	d82b      	bhi.n	8005526 <__sflush_r+0xb2>
 80054ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005578 <__sflush_r+0x104>)
 80054d0:	410a      	asrs	r2, r1
 80054d2:	07d6      	lsls	r6, r2, #31
 80054d4:	d427      	bmi.n	8005526 <__sflush_r+0xb2>
 80054d6:	2200      	movs	r2, #0
 80054d8:	6062      	str	r2, [r4, #4]
 80054da:	04d9      	lsls	r1, r3, #19
 80054dc:	6922      	ldr	r2, [r4, #16]
 80054de:	6022      	str	r2, [r4, #0]
 80054e0:	d504      	bpl.n	80054ec <__sflush_r+0x78>
 80054e2:	1c42      	adds	r2, r0, #1
 80054e4:	d101      	bne.n	80054ea <__sflush_r+0x76>
 80054e6:	682b      	ldr	r3, [r5, #0]
 80054e8:	b903      	cbnz	r3, 80054ec <__sflush_r+0x78>
 80054ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80054ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054ee:	602f      	str	r7, [r5, #0]
 80054f0:	b1b9      	cbz	r1, 8005522 <__sflush_r+0xae>
 80054f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054f6:	4299      	cmp	r1, r3
 80054f8:	d002      	beq.n	8005500 <__sflush_r+0x8c>
 80054fa:	4628      	mov	r0, r5
 80054fc:	f7ff fa9a 	bl	8004a34 <_free_r>
 8005500:	2300      	movs	r3, #0
 8005502:	6363      	str	r3, [r4, #52]	@ 0x34
 8005504:	e00d      	b.n	8005522 <__sflush_r+0xae>
 8005506:	2301      	movs	r3, #1
 8005508:	4628      	mov	r0, r5
 800550a:	47b0      	blx	r6
 800550c:	4602      	mov	r2, r0
 800550e:	1c50      	adds	r0, r2, #1
 8005510:	d1c9      	bne.n	80054a6 <__sflush_r+0x32>
 8005512:	682b      	ldr	r3, [r5, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0c6      	beq.n	80054a6 <__sflush_r+0x32>
 8005518:	2b1d      	cmp	r3, #29
 800551a:	d001      	beq.n	8005520 <__sflush_r+0xac>
 800551c:	2b16      	cmp	r3, #22
 800551e:	d11e      	bne.n	800555e <__sflush_r+0xea>
 8005520:	602f      	str	r7, [r5, #0]
 8005522:	2000      	movs	r0, #0
 8005524:	e022      	b.n	800556c <__sflush_r+0xf8>
 8005526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800552a:	b21b      	sxth	r3, r3
 800552c:	e01b      	b.n	8005566 <__sflush_r+0xf2>
 800552e:	690f      	ldr	r7, [r1, #16]
 8005530:	2f00      	cmp	r7, #0
 8005532:	d0f6      	beq.n	8005522 <__sflush_r+0xae>
 8005534:	0793      	lsls	r3, r2, #30
 8005536:	680e      	ldr	r6, [r1, #0]
 8005538:	bf08      	it	eq
 800553a:	694b      	ldreq	r3, [r1, #20]
 800553c:	600f      	str	r7, [r1, #0]
 800553e:	bf18      	it	ne
 8005540:	2300      	movne	r3, #0
 8005542:	eba6 0807 	sub.w	r8, r6, r7
 8005546:	608b      	str	r3, [r1, #8]
 8005548:	f1b8 0f00 	cmp.w	r8, #0
 800554c:	dde9      	ble.n	8005522 <__sflush_r+0xae>
 800554e:	6a21      	ldr	r1, [r4, #32]
 8005550:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005552:	4643      	mov	r3, r8
 8005554:	463a      	mov	r2, r7
 8005556:	4628      	mov	r0, r5
 8005558:	47b0      	blx	r6
 800555a:	2800      	cmp	r0, #0
 800555c:	dc08      	bgt.n	8005570 <__sflush_r+0xfc>
 800555e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	f04f 30ff 	mov.w	r0, #4294967295
 800556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005570:	4407      	add	r7, r0
 8005572:	eba8 0800 	sub.w	r8, r8, r0
 8005576:	e7e7      	b.n	8005548 <__sflush_r+0xd4>
 8005578:	dfbffffe 	.word	0xdfbffffe

0800557c <_fflush_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	690b      	ldr	r3, [r1, #16]
 8005580:	4605      	mov	r5, r0
 8005582:	460c      	mov	r4, r1
 8005584:	b913      	cbnz	r3, 800558c <_fflush_r+0x10>
 8005586:	2500      	movs	r5, #0
 8005588:	4628      	mov	r0, r5
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	b118      	cbz	r0, 8005596 <_fflush_r+0x1a>
 800558e:	6a03      	ldr	r3, [r0, #32]
 8005590:	b90b      	cbnz	r3, 8005596 <_fflush_r+0x1a>
 8005592:	f7ff f835 	bl	8004600 <__sinit>
 8005596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f3      	beq.n	8005586 <_fflush_r+0xa>
 800559e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055a0:	07d0      	lsls	r0, r2, #31
 80055a2:	d404      	bmi.n	80055ae <_fflush_r+0x32>
 80055a4:	0599      	lsls	r1, r3, #22
 80055a6:	d402      	bmi.n	80055ae <_fflush_r+0x32>
 80055a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055aa:	f7ff fa40 	bl	8004a2e <__retarget_lock_acquire_recursive>
 80055ae:	4628      	mov	r0, r5
 80055b0:	4621      	mov	r1, r4
 80055b2:	f7ff ff5f 	bl	8005474 <__sflush_r>
 80055b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055b8:	07da      	lsls	r2, r3, #31
 80055ba:	4605      	mov	r5, r0
 80055bc:	d4e4      	bmi.n	8005588 <_fflush_r+0xc>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	059b      	lsls	r3, r3, #22
 80055c2:	d4e1      	bmi.n	8005588 <_fflush_r+0xc>
 80055c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055c6:	f7ff fa33 	bl	8004a30 <__retarget_lock_release_recursive>
 80055ca:	e7dd      	b.n	8005588 <_fflush_r+0xc>

080055cc <__swhatbuf_r>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	460c      	mov	r4, r1
 80055d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d4:	2900      	cmp	r1, #0
 80055d6:	b096      	sub	sp, #88	@ 0x58
 80055d8:	4615      	mov	r5, r2
 80055da:	461e      	mov	r6, r3
 80055dc:	da0d      	bge.n	80055fa <__swhatbuf_r+0x2e>
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055e4:	f04f 0100 	mov.w	r1, #0
 80055e8:	bf14      	ite	ne
 80055ea:	2340      	movne	r3, #64	@ 0x40
 80055ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055f0:	2000      	movs	r0, #0
 80055f2:	6031      	str	r1, [r6, #0]
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	b016      	add	sp, #88	@ 0x58
 80055f8:	bd70      	pop	{r4, r5, r6, pc}
 80055fa:	466a      	mov	r2, sp
 80055fc:	f000 f862 	bl	80056c4 <_fstat_r>
 8005600:	2800      	cmp	r0, #0
 8005602:	dbec      	blt.n	80055de <__swhatbuf_r+0x12>
 8005604:	9901      	ldr	r1, [sp, #4]
 8005606:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800560a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800560e:	4259      	negs	r1, r3
 8005610:	4159      	adcs	r1, r3
 8005612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005616:	e7eb      	b.n	80055f0 <__swhatbuf_r+0x24>

08005618 <__smakebuf_r>:
 8005618:	898b      	ldrh	r3, [r1, #12]
 800561a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800561c:	079d      	lsls	r5, r3, #30
 800561e:	4606      	mov	r6, r0
 8005620:	460c      	mov	r4, r1
 8005622:	d507      	bpl.n	8005634 <__smakebuf_r+0x1c>
 8005624:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	6123      	str	r3, [r4, #16]
 800562c:	2301      	movs	r3, #1
 800562e:	6163      	str	r3, [r4, #20]
 8005630:	b003      	add	sp, #12
 8005632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005634:	ab01      	add	r3, sp, #4
 8005636:	466a      	mov	r2, sp
 8005638:	f7ff ffc8 	bl	80055cc <__swhatbuf_r>
 800563c:	9f00      	ldr	r7, [sp, #0]
 800563e:	4605      	mov	r5, r0
 8005640:	4639      	mov	r1, r7
 8005642:	4630      	mov	r0, r6
 8005644:	f7ff fa62 	bl	8004b0c <_malloc_r>
 8005648:	b948      	cbnz	r0, 800565e <__smakebuf_r+0x46>
 800564a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800564e:	059a      	lsls	r2, r3, #22
 8005650:	d4ee      	bmi.n	8005630 <__smakebuf_r+0x18>
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	f043 0302 	orr.w	r3, r3, #2
 800565a:	81a3      	strh	r3, [r4, #12]
 800565c:	e7e2      	b.n	8005624 <__smakebuf_r+0xc>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	6020      	str	r0, [r4, #0]
 8005662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	9b01      	ldr	r3, [sp, #4]
 800566a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800566e:	b15b      	cbz	r3, 8005688 <__smakebuf_r+0x70>
 8005670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005674:	4630      	mov	r0, r6
 8005676:	f000 f837 	bl	80056e8 <_isatty_r>
 800567a:	b128      	cbz	r0, 8005688 <__smakebuf_r+0x70>
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	431d      	orrs	r5, r3
 800568c:	81a5      	strh	r5, [r4, #12]
 800568e:	e7cf      	b.n	8005630 <__smakebuf_r+0x18>

08005690 <memmove>:
 8005690:	4288      	cmp	r0, r1
 8005692:	b510      	push	{r4, lr}
 8005694:	eb01 0402 	add.w	r4, r1, r2
 8005698:	d902      	bls.n	80056a0 <memmove+0x10>
 800569a:	4284      	cmp	r4, r0
 800569c:	4623      	mov	r3, r4
 800569e:	d807      	bhi.n	80056b0 <memmove+0x20>
 80056a0:	1e43      	subs	r3, r0, #1
 80056a2:	42a1      	cmp	r1, r4
 80056a4:	d008      	beq.n	80056b8 <memmove+0x28>
 80056a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ae:	e7f8      	b.n	80056a2 <memmove+0x12>
 80056b0:	4402      	add	r2, r0
 80056b2:	4601      	mov	r1, r0
 80056b4:	428a      	cmp	r2, r1
 80056b6:	d100      	bne.n	80056ba <memmove+0x2a>
 80056b8:	bd10      	pop	{r4, pc}
 80056ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056c2:	e7f7      	b.n	80056b4 <memmove+0x24>

080056c4 <_fstat_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4d07      	ldr	r5, [pc, #28]	@ (80056e4 <_fstat_r+0x20>)
 80056c8:	2300      	movs	r3, #0
 80056ca:	4604      	mov	r4, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	602b      	str	r3, [r5, #0]
 80056d2:	f7fb fd67 	bl	80011a4 <_fstat>
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	d102      	bne.n	80056e0 <_fstat_r+0x1c>
 80056da:	682b      	ldr	r3, [r5, #0]
 80056dc:	b103      	cbz	r3, 80056e0 <_fstat_r+0x1c>
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	bd38      	pop	{r3, r4, r5, pc}
 80056e2:	bf00      	nop
 80056e4:	20000358 	.word	0x20000358

080056e8 <_isatty_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d06      	ldr	r5, [pc, #24]	@ (8005704 <_isatty_r+0x1c>)
 80056ec:	2300      	movs	r3, #0
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	f7fb fd66 	bl	80011c4 <_isatty>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_isatty_r+0x1a>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_isatty_r+0x1a>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	20000358 	.word	0x20000358

08005708 <_sbrk_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4d06      	ldr	r5, [pc, #24]	@ (8005724 <_sbrk_r+0x1c>)
 800570c:	2300      	movs	r3, #0
 800570e:	4604      	mov	r4, r0
 8005710:	4608      	mov	r0, r1
 8005712:	602b      	str	r3, [r5, #0]
 8005714:	f7fb fd6e 	bl	80011f4 <_sbrk>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_sbrk_r+0x1a>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_sbrk_r+0x1a>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	20000358 	.word	0x20000358

08005728 <memcpy>:
 8005728:	440a      	add	r2, r1
 800572a:	4291      	cmp	r1, r2
 800572c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005730:	d100      	bne.n	8005734 <memcpy+0xc>
 8005732:	4770      	bx	lr
 8005734:	b510      	push	{r4, lr}
 8005736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800573a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800573e:	4291      	cmp	r1, r2
 8005740:	d1f9      	bne.n	8005736 <memcpy+0xe>
 8005742:	bd10      	pop	{r4, pc}

08005744 <_realloc_r>:
 8005744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005748:	4680      	mov	r8, r0
 800574a:	4615      	mov	r5, r2
 800574c:	460c      	mov	r4, r1
 800574e:	b921      	cbnz	r1, 800575a <_realloc_r+0x16>
 8005750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005754:	4611      	mov	r1, r2
 8005756:	f7ff b9d9 	b.w	8004b0c <_malloc_r>
 800575a:	b92a      	cbnz	r2, 8005768 <_realloc_r+0x24>
 800575c:	f7ff f96a 	bl	8004a34 <_free_r>
 8005760:	2400      	movs	r4, #0
 8005762:	4620      	mov	r0, r4
 8005764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005768:	f000 f81a 	bl	80057a0 <_malloc_usable_size_r>
 800576c:	4285      	cmp	r5, r0
 800576e:	4606      	mov	r6, r0
 8005770:	d802      	bhi.n	8005778 <_realloc_r+0x34>
 8005772:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005776:	d8f4      	bhi.n	8005762 <_realloc_r+0x1e>
 8005778:	4629      	mov	r1, r5
 800577a:	4640      	mov	r0, r8
 800577c:	f7ff f9c6 	bl	8004b0c <_malloc_r>
 8005780:	4607      	mov	r7, r0
 8005782:	2800      	cmp	r0, #0
 8005784:	d0ec      	beq.n	8005760 <_realloc_r+0x1c>
 8005786:	42b5      	cmp	r5, r6
 8005788:	462a      	mov	r2, r5
 800578a:	4621      	mov	r1, r4
 800578c:	bf28      	it	cs
 800578e:	4632      	movcs	r2, r6
 8005790:	f7ff ffca 	bl	8005728 <memcpy>
 8005794:	4621      	mov	r1, r4
 8005796:	4640      	mov	r0, r8
 8005798:	f7ff f94c 	bl	8004a34 <_free_r>
 800579c:	463c      	mov	r4, r7
 800579e:	e7e0      	b.n	8005762 <_realloc_r+0x1e>

080057a0 <_malloc_usable_size_r>:
 80057a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a4:	1f18      	subs	r0, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bfbc      	itt	lt
 80057aa:	580b      	ldrlt	r3, [r1, r0]
 80057ac:	18c0      	addlt	r0, r0, r3
 80057ae:	4770      	bx	lr

080057b0 <pow>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	ed2d 8b02 	vpush	{d8}
 80057b6:	eeb0 8a40 	vmov.f32	s16, s0
 80057ba:	eef0 8a60 	vmov.f32	s17, s1
 80057be:	ec55 4b11 	vmov	r4, r5, d1
 80057c2:	f000 f979 	bl	8005ab8 <__ieee754_pow>
 80057c6:	4622      	mov	r2, r4
 80057c8:	462b      	mov	r3, r5
 80057ca:	4620      	mov	r0, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	ec57 6b10 	vmov	r6, r7, d0
 80057d2:	f7fb f9b3 	bl	8000b3c <__aeabi_dcmpun>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d13b      	bne.n	8005852 <pow+0xa2>
 80057da:	ec51 0b18 	vmov	r0, r1, d8
 80057de:	2200      	movs	r2, #0
 80057e0:	2300      	movs	r3, #0
 80057e2:	f7fb f979 	bl	8000ad8 <__aeabi_dcmpeq>
 80057e6:	b1b8      	cbz	r0, 8005818 <pow+0x68>
 80057e8:	2200      	movs	r2, #0
 80057ea:	2300      	movs	r3, #0
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fb f972 	bl	8000ad8 <__aeabi_dcmpeq>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d146      	bne.n	8005886 <pow+0xd6>
 80057f8:	ec45 4b10 	vmov	d0, r4, r5
 80057fc:	f000 f874 	bl	80058e8 <finite>
 8005800:	b338      	cbz	r0, 8005852 <pow+0xa2>
 8005802:	2200      	movs	r2, #0
 8005804:	2300      	movs	r3, #0
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fb f96f 	bl	8000aec <__aeabi_dcmplt>
 800580e:	b300      	cbz	r0, 8005852 <pow+0xa2>
 8005810:	f7ff f8e2 	bl	80049d8 <__errno>
 8005814:	2322      	movs	r3, #34	@ 0x22
 8005816:	e01b      	b.n	8005850 <pow+0xa0>
 8005818:	ec47 6b10 	vmov	d0, r6, r7
 800581c:	f000 f864 	bl	80058e8 <finite>
 8005820:	b9e0      	cbnz	r0, 800585c <pow+0xac>
 8005822:	eeb0 0a48 	vmov.f32	s0, s16
 8005826:	eef0 0a68 	vmov.f32	s1, s17
 800582a:	f000 f85d 	bl	80058e8 <finite>
 800582e:	b1a8      	cbz	r0, 800585c <pow+0xac>
 8005830:	ec45 4b10 	vmov	d0, r4, r5
 8005834:	f000 f858 	bl	80058e8 <finite>
 8005838:	b180      	cbz	r0, 800585c <pow+0xac>
 800583a:	4632      	mov	r2, r6
 800583c:	463b      	mov	r3, r7
 800583e:	4630      	mov	r0, r6
 8005840:	4639      	mov	r1, r7
 8005842:	f7fb f97b 	bl	8000b3c <__aeabi_dcmpun>
 8005846:	2800      	cmp	r0, #0
 8005848:	d0e2      	beq.n	8005810 <pow+0x60>
 800584a:	f7ff f8c5 	bl	80049d8 <__errno>
 800584e:	2321      	movs	r3, #33	@ 0x21
 8005850:	6003      	str	r3, [r0, #0]
 8005852:	ecbd 8b02 	vpop	{d8}
 8005856:	ec47 6b10 	vmov	d0, r6, r7
 800585a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585c:	2200      	movs	r2, #0
 800585e:	2300      	movs	r3, #0
 8005860:	4630      	mov	r0, r6
 8005862:	4639      	mov	r1, r7
 8005864:	f7fb f938 	bl	8000ad8 <__aeabi_dcmpeq>
 8005868:	2800      	cmp	r0, #0
 800586a:	d0f2      	beq.n	8005852 <pow+0xa2>
 800586c:	eeb0 0a48 	vmov.f32	s0, s16
 8005870:	eef0 0a68 	vmov.f32	s1, s17
 8005874:	f000 f838 	bl	80058e8 <finite>
 8005878:	2800      	cmp	r0, #0
 800587a:	d0ea      	beq.n	8005852 <pow+0xa2>
 800587c:	ec45 4b10 	vmov	d0, r4, r5
 8005880:	f000 f832 	bl	80058e8 <finite>
 8005884:	e7c3      	b.n	800580e <pow+0x5e>
 8005886:	4f01      	ldr	r7, [pc, #4]	@ (800588c <pow+0xdc>)
 8005888:	2600      	movs	r6, #0
 800588a:	e7e2      	b.n	8005852 <pow+0xa2>
 800588c:	3ff00000 	.word	0x3ff00000

08005890 <sqrt>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	ed2d 8b02 	vpush	{d8}
 8005896:	ec55 4b10 	vmov	r4, r5, d0
 800589a:	f000 f831 	bl	8005900 <__ieee754_sqrt>
 800589e:	4622      	mov	r2, r4
 80058a0:	462b      	mov	r3, r5
 80058a2:	4620      	mov	r0, r4
 80058a4:	4629      	mov	r1, r5
 80058a6:	eeb0 8a40 	vmov.f32	s16, s0
 80058aa:	eef0 8a60 	vmov.f32	s17, s1
 80058ae:	f7fb f945 	bl	8000b3c <__aeabi_dcmpun>
 80058b2:	b990      	cbnz	r0, 80058da <sqrt+0x4a>
 80058b4:	2200      	movs	r2, #0
 80058b6:	2300      	movs	r3, #0
 80058b8:	4620      	mov	r0, r4
 80058ba:	4629      	mov	r1, r5
 80058bc:	f7fb f916 	bl	8000aec <__aeabi_dcmplt>
 80058c0:	b158      	cbz	r0, 80058da <sqrt+0x4a>
 80058c2:	f7ff f889 	bl	80049d8 <__errno>
 80058c6:	2321      	movs	r3, #33	@ 0x21
 80058c8:	6003      	str	r3, [r0, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	2300      	movs	r3, #0
 80058ce:	4610      	mov	r0, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	f7fa ffc3 	bl	800085c <__aeabi_ddiv>
 80058d6:	ec41 0b18 	vmov	d8, r0, r1
 80058da:	eeb0 0a48 	vmov.f32	s0, s16
 80058de:	eef0 0a68 	vmov.f32	s1, s17
 80058e2:	ecbd 8b02 	vpop	{d8}
 80058e6:	bd38      	pop	{r3, r4, r5, pc}

080058e8 <finite>:
 80058e8:	b082      	sub	sp, #8
 80058ea:	ed8d 0b00 	vstr	d0, [sp]
 80058ee:	9801      	ldr	r0, [sp, #4]
 80058f0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80058f4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80058f8:	0fc0      	lsrs	r0, r0, #31
 80058fa:	b002      	add	sp, #8
 80058fc:	4770      	bx	lr
	...

08005900 <__ieee754_sqrt>:
 8005900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	4a68      	ldr	r2, [pc, #416]	@ (8005aa8 <__ieee754_sqrt+0x1a8>)
 8005906:	ec55 4b10 	vmov	r4, r5, d0
 800590a:	43aa      	bics	r2, r5
 800590c:	462b      	mov	r3, r5
 800590e:	4621      	mov	r1, r4
 8005910:	d110      	bne.n	8005934 <__ieee754_sqrt+0x34>
 8005912:	4622      	mov	r2, r4
 8005914:	4620      	mov	r0, r4
 8005916:	4629      	mov	r1, r5
 8005918:	f7fa fe76 	bl	8000608 <__aeabi_dmul>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4620      	mov	r0, r4
 8005922:	4629      	mov	r1, r5
 8005924:	f7fa fcba 	bl	800029c <__adddf3>
 8005928:	4604      	mov	r4, r0
 800592a:	460d      	mov	r5, r1
 800592c:	ec45 4b10 	vmov	d0, r4, r5
 8005930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	2d00      	cmp	r5, #0
 8005936:	dc0e      	bgt.n	8005956 <__ieee754_sqrt+0x56>
 8005938:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800593c:	4322      	orrs	r2, r4
 800593e:	d0f5      	beq.n	800592c <__ieee754_sqrt+0x2c>
 8005940:	b19d      	cbz	r5, 800596a <__ieee754_sqrt+0x6a>
 8005942:	4622      	mov	r2, r4
 8005944:	4620      	mov	r0, r4
 8005946:	4629      	mov	r1, r5
 8005948:	f7fa fca6 	bl	8000298 <__aeabi_dsub>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	f7fa ff84 	bl	800085c <__aeabi_ddiv>
 8005954:	e7e8      	b.n	8005928 <__ieee754_sqrt+0x28>
 8005956:	152a      	asrs	r2, r5, #20
 8005958:	d115      	bne.n	8005986 <__ieee754_sqrt+0x86>
 800595a:	2000      	movs	r0, #0
 800595c:	e009      	b.n	8005972 <__ieee754_sqrt+0x72>
 800595e:	0acb      	lsrs	r3, r1, #11
 8005960:	3a15      	subs	r2, #21
 8005962:	0549      	lsls	r1, r1, #21
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0fa      	beq.n	800595e <__ieee754_sqrt+0x5e>
 8005968:	e7f7      	b.n	800595a <__ieee754_sqrt+0x5a>
 800596a:	462a      	mov	r2, r5
 800596c:	e7fa      	b.n	8005964 <__ieee754_sqrt+0x64>
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	3001      	adds	r0, #1
 8005972:	02dc      	lsls	r4, r3, #11
 8005974:	d5fb      	bpl.n	800596e <__ieee754_sqrt+0x6e>
 8005976:	1e44      	subs	r4, r0, #1
 8005978:	1b12      	subs	r2, r2, r4
 800597a:	f1c0 0420 	rsb	r4, r0, #32
 800597e:	fa21 f404 	lsr.w	r4, r1, r4
 8005982:	4323      	orrs	r3, r4
 8005984:	4081      	lsls	r1, r0
 8005986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800598a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800598e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005992:	07d2      	lsls	r2, r2, #31
 8005994:	bf5c      	itt	pl
 8005996:	005b      	lslpl	r3, r3, #1
 8005998:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800599c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80059a0:	bf58      	it	pl
 80059a2:	0049      	lslpl	r1, r1, #1
 80059a4:	2600      	movs	r6, #0
 80059a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80059aa:	106d      	asrs	r5, r5, #1
 80059ac:	0049      	lsls	r1, r1, #1
 80059ae:	2016      	movs	r0, #22
 80059b0:	4632      	mov	r2, r6
 80059b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80059b6:	1917      	adds	r7, r2, r4
 80059b8:	429f      	cmp	r7, r3
 80059ba:	bfde      	ittt	le
 80059bc:	193a      	addle	r2, r7, r4
 80059be:	1bdb      	suble	r3, r3, r7
 80059c0:	1936      	addle	r6, r6, r4
 80059c2:	0fcf      	lsrs	r7, r1, #31
 80059c4:	3801      	subs	r0, #1
 80059c6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80059ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80059ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80059d2:	d1f0      	bne.n	80059b6 <__ieee754_sqrt+0xb6>
 80059d4:	4604      	mov	r4, r0
 80059d6:	2720      	movs	r7, #32
 80059d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80059dc:	429a      	cmp	r2, r3
 80059de:	eb00 0e0c 	add.w	lr, r0, ip
 80059e2:	db02      	blt.n	80059ea <__ieee754_sqrt+0xea>
 80059e4:	d113      	bne.n	8005a0e <__ieee754_sqrt+0x10e>
 80059e6:	458e      	cmp	lr, r1
 80059e8:	d811      	bhi.n	8005a0e <__ieee754_sqrt+0x10e>
 80059ea:	f1be 0f00 	cmp.w	lr, #0
 80059ee:	eb0e 000c 	add.w	r0, lr, ip
 80059f2:	da42      	bge.n	8005a7a <__ieee754_sqrt+0x17a>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	db40      	blt.n	8005a7a <__ieee754_sqrt+0x17a>
 80059f8:	f102 0801 	add.w	r8, r2, #1
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	458e      	cmp	lr, r1
 8005a00:	bf88      	it	hi
 8005a02:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005a06:	eba1 010e 	sub.w	r1, r1, lr
 8005a0a:	4464      	add	r4, ip
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005a12:	3f01      	subs	r7, #1
 8005a14:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005a18:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005a1c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005a20:	d1dc      	bne.n	80059dc <__ieee754_sqrt+0xdc>
 8005a22:	4319      	orrs	r1, r3
 8005a24:	d01b      	beq.n	8005a5e <__ieee754_sqrt+0x15e>
 8005a26:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8005aac <__ieee754_sqrt+0x1ac>
 8005a2a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005ab0 <__ieee754_sqrt+0x1b0>
 8005a2e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005a32:	e9db 2300 	ldrd	r2, r3, [fp]
 8005a36:	f7fa fc2f 	bl	8000298 <__aeabi_dsub>
 8005a3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4640      	mov	r0, r8
 8005a44:	4649      	mov	r1, r9
 8005a46:	f7fb f85b 	bl	8000b00 <__aeabi_dcmple>
 8005a4a:	b140      	cbz	r0, 8005a5e <__ieee754_sqrt+0x15e>
 8005a4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005a50:	e9da 0100 	ldrd	r0, r1, [sl]
 8005a54:	e9db 2300 	ldrd	r2, r3, [fp]
 8005a58:	d111      	bne.n	8005a7e <__ieee754_sqrt+0x17e>
 8005a5a:	3601      	adds	r6, #1
 8005a5c:	463c      	mov	r4, r7
 8005a5e:	1072      	asrs	r2, r6, #1
 8005a60:	0863      	lsrs	r3, r4, #1
 8005a62:	07f1      	lsls	r1, r6, #31
 8005a64:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005a68:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005a6c:	bf48      	it	mi
 8005a6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005a72:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005a76:	4618      	mov	r0, r3
 8005a78:	e756      	b.n	8005928 <__ieee754_sqrt+0x28>
 8005a7a:	4690      	mov	r8, r2
 8005a7c:	e7be      	b.n	80059fc <__ieee754_sqrt+0xfc>
 8005a7e:	f7fa fc0d 	bl	800029c <__adddf3>
 8005a82:	e9da 8900 	ldrd	r8, r9, [sl]
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	f7fb f82d 	bl	8000aec <__aeabi_dcmplt>
 8005a92:	b120      	cbz	r0, 8005a9e <__ieee754_sqrt+0x19e>
 8005a94:	1ca0      	adds	r0, r4, #2
 8005a96:	bf08      	it	eq
 8005a98:	3601      	addeq	r6, #1
 8005a9a:	3402      	adds	r4, #2
 8005a9c:	e7df      	b.n	8005a5e <__ieee754_sqrt+0x15e>
 8005a9e:	1c63      	adds	r3, r4, #1
 8005aa0:	f023 0401 	bic.w	r4, r3, #1
 8005aa4:	e7db      	b.n	8005a5e <__ieee754_sqrt+0x15e>
 8005aa6:	bf00      	nop
 8005aa8:	7ff00000 	.word	0x7ff00000
 8005aac:	20000078 	.word	0x20000078
 8005ab0:	20000070 	.word	0x20000070
 8005ab4:	00000000 	.word	0x00000000

08005ab8 <__ieee754_pow>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	b091      	sub	sp, #68	@ 0x44
 8005abe:	ed8d 1b00 	vstr	d1, [sp]
 8005ac2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8005ac6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8005aca:	ea5a 0001 	orrs.w	r0, sl, r1
 8005ace:	ec57 6b10 	vmov	r6, r7, d0
 8005ad2:	d113      	bne.n	8005afc <__ieee754_pow+0x44>
 8005ad4:	19b3      	adds	r3, r6, r6
 8005ad6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8005ada:	4152      	adcs	r2, r2
 8005adc:	4298      	cmp	r0, r3
 8005ade:	4b98      	ldr	r3, [pc, #608]	@ (8005d40 <__ieee754_pow+0x288>)
 8005ae0:	4193      	sbcs	r3, r2
 8005ae2:	f080 84ea 	bcs.w	80064ba <__ieee754_pow+0xa02>
 8005ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aea:	4630      	mov	r0, r6
 8005aec:	4639      	mov	r1, r7
 8005aee:	f7fa fbd5 	bl	800029c <__adddf3>
 8005af2:	ec41 0b10 	vmov	d0, r0, r1
 8005af6:	b011      	add	sp, #68	@ 0x44
 8005af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afc:	4a91      	ldr	r2, [pc, #580]	@ (8005d44 <__ieee754_pow+0x28c>)
 8005afe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005b02:	4590      	cmp	r8, r2
 8005b04:	463d      	mov	r5, r7
 8005b06:	4633      	mov	r3, r6
 8005b08:	d806      	bhi.n	8005b18 <__ieee754_pow+0x60>
 8005b0a:	d101      	bne.n	8005b10 <__ieee754_pow+0x58>
 8005b0c:	2e00      	cmp	r6, #0
 8005b0e:	d1ea      	bne.n	8005ae6 <__ieee754_pow+0x2e>
 8005b10:	4592      	cmp	sl, r2
 8005b12:	d801      	bhi.n	8005b18 <__ieee754_pow+0x60>
 8005b14:	d10e      	bne.n	8005b34 <__ieee754_pow+0x7c>
 8005b16:	b169      	cbz	r1, 8005b34 <__ieee754_pow+0x7c>
 8005b18:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005b1c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005b20:	431d      	orrs	r5, r3
 8005b22:	d1e0      	bne.n	8005ae6 <__ieee754_pow+0x2e>
 8005b24:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005b28:	18db      	adds	r3, r3, r3
 8005b2a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005b2e:	4152      	adcs	r2, r2
 8005b30:	429d      	cmp	r5, r3
 8005b32:	e7d4      	b.n	8005ade <__ieee754_pow+0x26>
 8005b34:	2d00      	cmp	r5, #0
 8005b36:	46c3      	mov	fp, r8
 8005b38:	da3a      	bge.n	8005bb0 <__ieee754_pow+0xf8>
 8005b3a:	4a83      	ldr	r2, [pc, #524]	@ (8005d48 <__ieee754_pow+0x290>)
 8005b3c:	4592      	cmp	sl, r2
 8005b3e:	d84d      	bhi.n	8005bdc <__ieee754_pow+0x124>
 8005b40:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005b44:	4592      	cmp	sl, r2
 8005b46:	f240 84c7 	bls.w	80064d8 <__ieee754_pow+0xa20>
 8005b4a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8005b4e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005b52:	2a14      	cmp	r2, #20
 8005b54:	dd0f      	ble.n	8005b76 <__ieee754_pow+0xbe>
 8005b56:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005b5a:	fa21 f402 	lsr.w	r4, r1, r2
 8005b5e:	fa04 f202 	lsl.w	r2, r4, r2
 8005b62:	428a      	cmp	r2, r1
 8005b64:	f040 84b8 	bne.w	80064d8 <__ieee754_pow+0xa20>
 8005b68:	f004 0401 	and.w	r4, r4, #1
 8005b6c:	f1c4 0402 	rsb	r4, r4, #2
 8005b70:	2900      	cmp	r1, #0
 8005b72:	d158      	bne.n	8005c26 <__ieee754_pow+0x16e>
 8005b74:	e00e      	b.n	8005b94 <__ieee754_pow+0xdc>
 8005b76:	2900      	cmp	r1, #0
 8005b78:	d154      	bne.n	8005c24 <__ieee754_pow+0x16c>
 8005b7a:	f1c2 0214 	rsb	r2, r2, #20
 8005b7e:	fa4a f402 	asr.w	r4, sl, r2
 8005b82:	fa04 f202 	lsl.w	r2, r4, r2
 8005b86:	4552      	cmp	r2, sl
 8005b88:	f040 84a3 	bne.w	80064d2 <__ieee754_pow+0xa1a>
 8005b8c:	f004 0401 	and.w	r4, r4, #1
 8005b90:	f1c4 0402 	rsb	r4, r4, #2
 8005b94:	4a6d      	ldr	r2, [pc, #436]	@ (8005d4c <__ieee754_pow+0x294>)
 8005b96:	4592      	cmp	sl, r2
 8005b98:	d12e      	bne.n	8005bf8 <__ieee754_pow+0x140>
 8005b9a:	f1b9 0f00 	cmp.w	r9, #0
 8005b9e:	f280 8494 	bge.w	80064ca <__ieee754_pow+0xa12>
 8005ba2:	496a      	ldr	r1, [pc, #424]	@ (8005d4c <__ieee754_pow+0x294>)
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	2000      	movs	r0, #0
 8005baa:	f7fa fe57 	bl	800085c <__aeabi_ddiv>
 8005bae:	e7a0      	b.n	8005af2 <__ieee754_pow+0x3a>
 8005bb0:	2400      	movs	r4, #0
 8005bb2:	bbc1      	cbnz	r1, 8005c26 <__ieee754_pow+0x16e>
 8005bb4:	4a63      	ldr	r2, [pc, #396]	@ (8005d44 <__ieee754_pow+0x28c>)
 8005bb6:	4592      	cmp	sl, r2
 8005bb8:	d1ec      	bne.n	8005b94 <__ieee754_pow+0xdc>
 8005bba:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8005bbe:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	f000 8479 	beq.w	80064ba <__ieee754_pow+0xa02>
 8005bc8:	4b61      	ldr	r3, [pc, #388]	@ (8005d50 <__ieee754_pow+0x298>)
 8005bca:	4598      	cmp	r8, r3
 8005bcc:	d908      	bls.n	8005be0 <__ieee754_pow+0x128>
 8005bce:	f1b9 0f00 	cmp.w	r9, #0
 8005bd2:	f2c0 8476 	blt.w	80064c2 <__ieee754_pow+0xa0a>
 8005bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bda:	e78a      	b.n	8005af2 <__ieee754_pow+0x3a>
 8005bdc:	2402      	movs	r4, #2
 8005bde:	e7e8      	b.n	8005bb2 <__ieee754_pow+0xfa>
 8005be0:	f1b9 0f00 	cmp.w	r9, #0
 8005be4:	f04f 0000 	mov.w	r0, #0
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	da81      	bge.n	8005af2 <__ieee754_pow+0x3a>
 8005bee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005bf2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005bf6:	e77c      	b.n	8005af2 <__ieee754_pow+0x3a>
 8005bf8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8005bfc:	d106      	bne.n	8005c0c <__ieee754_pow+0x154>
 8005bfe:	4632      	mov	r2, r6
 8005c00:	463b      	mov	r3, r7
 8005c02:	4630      	mov	r0, r6
 8005c04:	4639      	mov	r1, r7
 8005c06:	f7fa fcff 	bl	8000608 <__aeabi_dmul>
 8005c0a:	e772      	b.n	8005af2 <__ieee754_pow+0x3a>
 8005c0c:	4a51      	ldr	r2, [pc, #324]	@ (8005d54 <__ieee754_pow+0x29c>)
 8005c0e:	4591      	cmp	r9, r2
 8005c10:	d109      	bne.n	8005c26 <__ieee754_pow+0x16e>
 8005c12:	2d00      	cmp	r5, #0
 8005c14:	db07      	blt.n	8005c26 <__ieee754_pow+0x16e>
 8005c16:	ec47 6b10 	vmov	d0, r6, r7
 8005c1a:	b011      	add	sp, #68	@ 0x44
 8005c1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c20:	f7ff be6e 	b.w	8005900 <__ieee754_sqrt>
 8005c24:	2400      	movs	r4, #0
 8005c26:	ec47 6b10 	vmov	d0, r6, r7
 8005c2a:	9302      	str	r3, [sp, #8]
 8005c2c:	f000 fc88 	bl	8006540 <fabs>
 8005c30:	9b02      	ldr	r3, [sp, #8]
 8005c32:	ec51 0b10 	vmov	r0, r1, d0
 8005c36:	bb53      	cbnz	r3, 8005c8e <__ieee754_pow+0x1d6>
 8005c38:	4b44      	ldr	r3, [pc, #272]	@ (8005d4c <__ieee754_pow+0x294>)
 8005c3a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d002      	beq.n	8005c48 <__ieee754_pow+0x190>
 8005c42:	f1b8 0f00 	cmp.w	r8, #0
 8005c46:	d122      	bne.n	8005c8e <__ieee754_pow+0x1d6>
 8005c48:	f1b9 0f00 	cmp.w	r9, #0
 8005c4c:	da05      	bge.n	8005c5a <__ieee754_pow+0x1a2>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	2000      	movs	r0, #0
 8005c54:	493d      	ldr	r1, [pc, #244]	@ (8005d4c <__ieee754_pow+0x294>)
 8005c56:	f7fa fe01 	bl	800085c <__aeabi_ddiv>
 8005c5a:	2d00      	cmp	r5, #0
 8005c5c:	f6bf af49 	bge.w	8005af2 <__ieee754_pow+0x3a>
 8005c60:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8005c64:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8005c68:	ea58 0804 	orrs.w	r8, r8, r4
 8005c6c:	d108      	bne.n	8005c80 <__ieee754_pow+0x1c8>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	f7fa fb0f 	bl	8000298 <__aeabi_dsub>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	e794      	b.n	8005baa <__ieee754_pow+0xf2>
 8005c80:	2c01      	cmp	r4, #1
 8005c82:	f47f af36 	bne.w	8005af2 <__ieee754_pow+0x3a>
 8005c86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	e731      	b.n	8005af2 <__ieee754_pow+0x3a>
 8005c8e:	0feb      	lsrs	r3, r5, #31
 8005c90:	3b01      	subs	r3, #1
 8005c92:	ea53 0204 	orrs.w	r2, r3, r4
 8005c96:	d102      	bne.n	8005c9e <__ieee754_pow+0x1e6>
 8005c98:	4632      	mov	r2, r6
 8005c9a:	463b      	mov	r3, r7
 8005c9c:	e7e9      	b.n	8005c72 <__ieee754_pow+0x1ba>
 8005c9e:	3c01      	subs	r4, #1
 8005ca0:	431c      	orrs	r4, r3
 8005ca2:	d016      	beq.n	8005cd2 <__ieee754_pow+0x21a>
 8005ca4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005d30 <__ieee754_pow+0x278>
 8005ca8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005cac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cb0:	f240 8112 	bls.w	8005ed8 <__ieee754_pow+0x420>
 8005cb4:	4b28      	ldr	r3, [pc, #160]	@ (8005d58 <__ieee754_pow+0x2a0>)
 8005cb6:	459a      	cmp	sl, r3
 8005cb8:	4b25      	ldr	r3, [pc, #148]	@ (8005d50 <__ieee754_pow+0x298>)
 8005cba:	d916      	bls.n	8005cea <__ieee754_pow+0x232>
 8005cbc:	4598      	cmp	r8, r3
 8005cbe:	d80b      	bhi.n	8005cd8 <__ieee754_pow+0x220>
 8005cc0:	f1b9 0f00 	cmp.w	r9, #0
 8005cc4:	da0b      	bge.n	8005cde <__ieee754_pow+0x226>
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	b011      	add	sp, #68	@ 0x44
 8005cca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cce:	f000 bcf3 	b.w	80066b8 <__math_oflow>
 8005cd2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8005d38 <__ieee754_pow+0x280>
 8005cd6:	e7e7      	b.n	8005ca8 <__ieee754_pow+0x1f0>
 8005cd8:	f1b9 0f00 	cmp.w	r9, #0
 8005cdc:	dcf3      	bgt.n	8005cc6 <__ieee754_pow+0x20e>
 8005cde:	2000      	movs	r0, #0
 8005ce0:	b011      	add	sp, #68	@ 0x44
 8005ce2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce6:	f000 bcdf 	b.w	80066a8 <__math_uflow>
 8005cea:	4598      	cmp	r8, r3
 8005cec:	d20c      	bcs.n	8005d08 <__ieee754_pow+0x250>
 8005cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f7fa fef9 	bl	8000aec <__aeabi_dcmplt>
 8005cfa:	3800      	subs	r0, #0
 8005cfc:	bf18      	it	ne
 8005cfe:	2001      	movne	r0, #1
 8005d00:	f1b9 0f00 	cmp.w	r9, #0
 8005d04:	daec      	bge.n	8005ce0 <__ieee754_pow+0x228>
 8005d06:	e7df      	b.n	8005cc8 <__ieee754_pow+0x210>
 8005d08:	4b10      	ldr	r3, [pc, #64]	@ (8005d4c <__ieee754_pow+0x294>)
 8005d0a:	4598      	cmp	r8, r3
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	d924      	bls.n	8005d5c <__ieee754_pow+0x2a4>
 8005d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d16:	2300      	movs	r3, #0
 8005d18:	f7fa fee8 	bl	8000aec <__aeabi_dcmplt>
 8005d1c:	3800      	subs	r0, #0
 8005d1e:	bf18      	it	ne
 8005d20:	2001      	movne	r0, #1
 8005d22:	f1b9 0f00 	cmp.w	r9, #0
 8005d26:	dccf      	bgt.n	8005cc8 <__ieee754_pow+0x210>
 8005d28:	e7da      	b.n	8005ce0 <__ieee754_pow+0x228>
 8005d2a:	bf00      	nop
 8005d2c:	f3af 8000 	nop.w
 8005d30:	00000000 	.word	0x00000000
 8005d34:	3ff00000 	.word	0x3ff00000
 8005d38:	00000000 	.word	0x00000000
 8005d3c:	bff00000 	.word	0xbff00000
 8005d40:	fff00000 	.word	0xfff00000
 8005d44:	7ff00000 	.word	0x7ff00000
 8005d48:	433fffff 	.word	0x433fffff
 8005d4c:	3ff00000 	.word	0x3ff00000
 8005d50:	3fefffff 	.word	0x3fefffff
 8005d54:	3fe00000 	.word	0x3fe00000
 8005d58:	43f00000 	.word	0x43f00000
 8005d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ec8 <__ieee754_pow+0x410>)
 8005d5e:	f7fa fa9b 	bl	8000298 <__aeabi_dsub>
 8005d62:	a351      	add	r3, pc, #324	@ (adr r3, 8005ea8 <__ieee754_pow+0x3f0>)
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	f7fa fc4c 	bl	8000608 <__aeabi_dmul>
 8005d70:	a34f      	add	r3, pc, #316	@ (adr r3, 8005eb0 <__ieee754_pow+0x3f8>)
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	4606      	mov	r6, r0
 8005d78:	460f      	mov	r7, r1
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f7fa fc43 	bl	8000608 <__aeabi_dmul>
 8005d82:	4b52      	ldr	r3, [pc, #328]	@ (8005ecc <__ieee754_pow+0x414>)
 8005d84:	4682      	mov	sl, r0
 8005d86:	468b      	mov	fp, r1
 8005d88:	2200      	movs	r2, #0
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	f7fa fc3b 	bl	8000608 <__aeabi_dmul>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	a148      	add	r1, pc, #288	@ (adr r1, 8005eb8 <__ieee754_pow+0x400>)
 8005d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d9c:	f7fa fa7c 	bl	8000298 <__aeabi_dsub>
 8005da0:	4622      	mov	r2, r4
 8005da2:	462b      	mov	r3, r5
 8005da4:	f7fa fc30 	bl	8000608 <__aeabi_dmul>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	2000      	movs	r0, #0
 8005dae:	4948      	ldr	r1, [pc, #288]	@ (8005ed0 <__ieee754_pow+0x418>)
 8005db0:	f7fa fa72 	bl	8000298 <__aeabi_dsub>
 8005db4:	4622      	mov	r2, r4
 8005db6:	4680      	mov	r8, r0
 8005db8:	4689      	mov	r9, r1
 8005dba:	462b      	mov	r3, r5
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	f7fa fc22 	bl	8000608 <__aeabi_dmul>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4640      	mov	r0, r8
 8005dca:	4649      	mov	r1, r9
 8005dcc:	f7fa fc1c 	bl	8000608 <__aeabi_dmul>
 8005dd0:	a33b      	add	r3, pc, #236	@ (adr r3, 8005ec0 <__ieee754_pow+0x408>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa fc17 	bl	8000608 <__aeabi_dmul>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4650      	mov	r0, sl
 8005de0:	4659      	mov	r1, fp
 8005de2:	f7fa fa59 	bl	8000298 <__aeabi_dsub>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4680      	mov	r8, r0
 8005dec:	4689      	mov	r9, r1
 8005dee:	4630      	mov	r0, r6
 8005df0:	4639      	mov	r1, r7
 8005df2:	f7fa fa53 	bl	800029c <__adddf3>
 8005df6:	2400      	movs	r4, #0
 8005df8:	4632      	mov	r2, r6
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	460d      	mov	r5, r1
 8005e00:	f7fa fa4a 	bl	8000298 <__aeabi_dsub>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	f7fa fa44 	bl	8000298 <__aeabi_dsub>
 8005e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005e20:	4606      	mov	r6, r0
 8005e22:	460f      	mov	r7, r1
 8005e24:	4652      	mov	r2, sl
 8005e26:	465b      	mov	r3, fp
 8005e28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e2c:	f7fa fa34 	bl	8000298 <__aeabi_dsub>
 8005e30:	4622      	mov	r2, r4
 8005e32:	462b      	mov	r3, r5
 8005e34:	f7fa fbe8 	bl	8000608 <__aeabi_dmul>
 8005e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	4689      	mov	r9, r1
 8005e40:	4630      	mov	r0, r6
 8005e42:	4639      	mov	r1, r7
 8005e44:	f7fa fbe0 	bl	8000608 <__aeabi_dmul>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	4649      	mov	r1, r9
 8005e50:	f7fa fa24 	bl	800029c <__adddf3>
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	4606      	mov	r6, r0
 8005e5a:	460f      	mov	r7, r1
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	4629      	mov	r1, r5
 8005e60:	f7fa fbd2 	bl	8000608 <__aeabi_dmul>
 8005e64:	460b      	mov	r3, r1
 8005e66:	4602      	mov	r2, r0
 8005e68:	4680      	mov	r8, r0
 8005e6a:	4689      	mov	r9, r1
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	4639      	mov	r1, r7
 8005e70:	f7fa fa14 	bl	800029c <__adddf3>
 8005e74:	4b17      	ldr	r3, [pc, #92]	@ (8005ed4 <__ieee754_pow+0x41c>)
 8005e76:	4299      	cmp	r1, r3
 8005e78:	4604      	mov	r4, r0
 8005e7a:	460d      	mov	r5, r1
 8005e7c:	468a      	mov	sl, r1
 8005e7e:	468b      	mov	fp, r1
 8005e80:	f340 82ef 	ble.w	8006462 <__ieee754_pow+0x9aa>
 8005e84:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005e88:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005e8c:	4303      	orrs	r3, r0
 8005e8e:	f000 81e8 	beq.w	8006262 <__ieee754_pow+0x7aa>
 8005e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e96:	2200      	movs	r2, #0
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f7fa fe27 	bl	8000aec <__aeabi_dcmplt>
 8005e9e:	3800      	subs	r0, #0
 8005ea0:	bf18      	it	ne
 8005ea2:	2001      	movne	r0, #1
 8005ea4:	e710      	b.n	8005cc8 <__ieee754_pow+0x210>
 8005ea6:	bf00      	nop
 8005ea8:	60000000 	.word	0x60000000
 8005eac:	3ff71547 	.word	0x3ff71547
 8005eb0:	f85ddf44 	.word	0xf85ddf44
 8005eb4:	3e54ae0b 	.word	0x3e54ae0b
 8005eb8:	55555555 	.word	0x55555555
 8005ebc:	3fd55555 	.word	0x3fd55555
 8005ec0:	652b82fe 	.word	0x652b82fe
 8005ec4:	3ff71547 	.word	0x3ff71547
 8005ec8:	3ff00000 	.word	0x3ff00000
 8005ecc:	3fd00000 	.word	0x3fd00000
 8005ed0:	3fe00000 	.word	0x3fe00000
 8005ed4:	408fffff 	.word	0x408fffff
 8005ed8:	4bd5      	ldr	r3, [pc, #852]	@ (8006230 <__ieee754_pow+0x778>)
 8005eda:	402b      	ands	r3, r5
 8005edc:	2200      	movs	r2, #0
 8005ede:	b92b      	cbnz	r3, 8005eec <__ieee754_pow+0x434>
 8005ee0:	4bd4      	ldr	r3, [pc, #848]	@ (8006234 <__ieee754_pow+0x77c>)
 8005ee2:	f7fa fb91 	bl	8000608 <__aeabi_dmul>
 8005ee6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8005eea:	468b      	mov	fp, r1
 8005eec:	ea4f 532b 	mov.w	r3, fp, asr #20
 8005ef0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005ef4:	4413      	add	r3, r2
 8005ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ef8:	4bcf      	ldr	r3, [pc, #828]	@ (8006238 <__ieee754_pow+0x780>)
 8005efa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8005efe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8005f02:	459b      	cmp	fp, r3
 8005f04:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005f08:	dd08      	ble.n	8005f1c <__ieee754_pow+0x464>
 8005f0a:	4bcc      	ldr	r3, [pc, #816]	@ (800623c <__ieee754_pow+0x784>)
 8005f0c:	459b      	cmp	fp, r3
 8005f0e:	f340 81a5 	ble.w	800625c <__ieee754_pow+0x7a4>
 8005f12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f14:	3301      	adds	r3, #1
 8005f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f18:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005f1c:	f04f 0a00 	mov.w	sl, #0
 8005f20:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005f24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f26:	4bc6      	ldr	r3, [pc, #792]	@ (8006240 <__ieee754_pow+0x788>)
 8005f28:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f2c:	ed93 7b00 	vldr	d7, [r3]
 8005f30:	4629      	mov	r1, r5
 8005f32:	ec53 2b17 	vmov	r2, r3, d7
 8005f36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005f3a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f3e:	f7fa f9ab 	bl	8000298 <__aeabi_dsub>
 8005f42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f46:	4606      	mov	r6, r0
 8005f48:	460f      	mov	r7, r1
 8005f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f4e:	f7fa f9a5 	bl	800029c <__adddf3>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	2000      	movs	r0, #0
 8005f58:	49ba      	ldr	r1, [pc, #744]	@ (8006244 <__ieee754_pow+0x78c>)
 8005f5a:	f7fa fc7f 	bl	800085c <__aeabi_ddiv>
 8005f5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4630      	mov	r0, r6
 8005f68:	4639      	mov	r1, r7
 8005f6a:	f7fa fb4d 	bl	8000608 <__aeabi_dmul>
 8005f6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f72:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8005f76:	106d      	asrs	r5, r5, #1
 8005f78:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005f7c:	f04f 0b00 	mov.w	fp, #0
 8005f80:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005f84:	4661      	mov	r1, ip
 8005f86:	2200      	movs	r2, #0
 8005f88:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005f8c:	4658      	mov	r0, fp
 8005f8e:	46e1      	mov	r9, ip
 8005f90:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8005f94:	4614      	mov	r4, r2
 8005f96:	461d      	mov	r5, r3
 8005f98:	f7fa fb36 	bl	8000608 <__aeabi_dmul>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	f7fa f978 	bl	8000298 <__aeabi_dsub>
 8005fa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fac:	4606      	mov	r6, r0
 8005fae:	460f      	mov	r7, r1
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	f7fa f970 	bl	8000298 <__aeabi_dsub>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005fc0:	f7fa f96a 	bl	8000298 <__aeabi_dsub>
 8005fc4:	465a      	mov	r2, fp
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	f7fa fb1e 	bl	8000608 <__aeabi_dmul>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f7fa f960 	bl	8000298 <__aeabi_dsub>
 8005fd8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005fdc:	f7fa fb14 	bl	8000608 <__aeabi_dmul>
 8005fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4619      	mov	r1, r3
 8005fec:	f7fa fb0c 	bl	8000608 <__aeabi_dmul>
 8005ff0:	a37d      	add	r3, pc, #500	@ (adr r3, 80061e8 <__ieee754_pow+0x730>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	f7fa fb05 	bl	8000608 <__aeabi_dmul>
 8005ffe:	a37c      	add	r3, pc, #496	@ (adr r3, 80061f0 <__ieee754_pow+0x738>)
 8006000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006004:	f7fa f94a 	bl	800029c <__adddf3>
 8006008:	4622      	mov	r2, r4
 800600a:	462b      	mov	r3, r5
 800600c:	f7fa fafc 	bl	8000608 <__aeabi_dmul>
 8006010:	a379      	add	r3, pc, #484	@ (adr r3, 80061f8 <__ieee754_pow+0x740>)
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f7fa f941 	bl	800029c <__adddf3>
 800601a:	4622      	mov	r2, r4
 800601c:	462b      	mov	r3, r5
 800601e:	f7fa faf3 	bl	8000608 <__aeabi_dmul>
 8006022:	a377      	add	r3, pc, #476	@ (adr r3, 8006200 <__ieee754_pow+0x748>)
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f7fa f938 	bl	800029c <__adddf3>
 800602c:	4622      	mov	r2, r4
 800602e:	462b      	mov	r3, r5
 8006030:	f7fa faea 	bl	8000608 <__aeabi_dmul>
 8006034:	a374      	add	r3, pc, #464	@ (adr r3, 8006208 <__ieee754_pow+0x750>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f7fa f92f 	bl	800029c <__adddf3>
 800603e:	4622      	mov	r2, r4
 8006040:	462b      	mov	r3, r5
 8006042:	f7fa fae1 	bl	8000608 <__aeabi_dmul>
 8006046:	a372      	add	r3, pc, #456	@ (adr r3, 8006210 <__ieee754_pow+0x758>)
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f7fa f926 	bl	800029c <__adddf3>
 8006050:	4622      	mov	r2, r4
 8006052:	4606      	mov	r6, r0
 8006054:	460f      	mov	r7, r1
 8006056:	462b      	mov	r3, r5
 8006058:	4620      	mov	r0, r4
 800605a:	4629      	mov	r1, r5
 800605c:	f7fa fad4 	bl	8000608 <__aeabi_dmul>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4630      	mov	r0, r6
 8006066:	4639      	mov	r1, r7
 8006068:	f7fa face 	bl	8000608 <__aeabi_dmul>
 800606c:	465a      	mov	r2, fp
 800606e:	4604      	mov	r4, r0
 8006070:	460d      	mov	r5, r1
 8006072:	464b      	mov	r3, r9
 8006074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006078:	f7fa f910 	bl	800029c <__adddf3>
 800607c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006080:	f7fa fac2 	bl	8000608 <__aeabi_dmul>
 8006084:	4622      	mov	r2, r4
 8006086:	462b      	mov	r3, r5
 8006088:	f7fa f908 	bl	800029c <__adddf3>
 800608c:	465a      	mov	r2, fp
 800608e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006092:	464b      	mov	r3, r9
 8006094:	4658      	mov	r0, fp
 8006096:	4649      	mov	r1, r9
 8006098:	f7fa fab6 	bl	8000608 <__aeabi_dmul>
 800609c:	4b6a      	ldr	r3, [pc, #424]	@ (8006248 <__ieee754_pow+0x790>)
 800609e:	2200      	movs	r2, #0
 80060a0:	4606      	mov	r6, r0
 80060a2:	460f      	mov	r7, r1
 80060a4:	f7fa f8fa 	bl	800029c <__adddf3>
 80060a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060ac:	f7fa f8f6 	bl	800029c <__adddf3>
 80060b0:	46d8      	mov	r8, fp
 80060b2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80060b6:	460d      	mov	r5, r1
 80060b8:	465a      	mov	r2, fp
 80060ba:	460b      	mov	r3, r1
 80060bc:	4640      	mov	r0, r8
 80060be:	4649      	mov	r1, r9
 80060c0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80060c4:	f7fa faa0 	bl	8000608 <__aeabi_dmul>
 80060c8:	465c      	mov	r4, fp
 80060ca:	4680      	mov	r8, r0
 80060cc:	4689      	mov	r9, r1
 80060ce:	4b5e      	ldr	r3, [pc, #376]	@ (8006248 <__ieee754_pow+0x790>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	4620      	mov	r0, r4
 80060d4:	4629      	mov	r1, r5
 80060d6:	f7fa f8df 	bl	8000298 <__aeabi_dsub>
 80060da:	4632      	mov	r2, r6
 80060dc:	463b      	mov	r3, r7
 80060de:	f7fa f8db 	bl	8000298 <__aeabi_dsub>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060ea:	f7fa f8d5 	bl	8000298 <__aeabi_dsub>
 80060ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060f2:	f7fa fa89 	bl	8000608 <__aeabi_dmul>
 80060f6:	4622      	mov	r2, r4
 80060f8:	4606      	mov	r6, r0
 80060fa:	460f      	mov	r7, r1
 80060fc:	462b      	mov	r3, r5
 80060fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006102:	f7fa fa81 	bl	8000608 <__aeabi_dmul>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4630      	mov	r0, r6
 800610c:	4639      	mov	r1, r7
 800610e:	f7fa f8c5 	bl	800029c <__adddf3>
 8006112:	4606      	mov	r6, r0
 8006114:	460f      	mov	r7, r1
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4640      	mov	r0, r8
 800611c:	4649      	mov	r1, r9
 800611e:	f7fa f8bd 	bl	800029c <__adddf3>
 8006122:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8006126:	a33c      	add	r3, pc, #240	@ (adr r3, 8006218 <__ieee754_pow+0x760>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	4658      	mov	r0, fp
 800612e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8006132:	460d      	mov	r5, r1
 8006134:	f7fa fa68 	bl	8000608 <__aeabi_dmul>
 8006138:	465c      	mov	r4, fp
 800613a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800613e:	4642      	mov	r2, r8
 8006140:	464b      	mov	r3, r9
 8006142:	4620      	mov	r0, r4
 8006144:	4629      	mov	r1, r5
 8006146:	f7fa f8a7 	bl	8000298 <__aeabi_dsub>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4630      	mov	r0, r6
 8006150:	4639      	mov	r1, r7
 8006152:	f7fa f8a1 	bl	8000298 <__aeabi_dsub>
 8006156:	a332      	add	r3, pc, #200	@ (adr r3, 8006220 <__ieee754_pow+0x768>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f7fa fa54 	bl	8000608 <__aeabi_dmul>
 8006160:	a331      	add	r3, pc, #196	@ (adr r3, 8006228 <__ieee754_pow+0x770>)
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	4606      	mov	r6, r0
 8006168:	460f      	mov	r7, r1
 800616a:	4620      	mov	r0, r4
 800616c:	4629      	mov	r1, r5
 800616e:	f7fa fa4b 	bl	8000608 <__aeabi_dmul>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4630      	mov	r0, r6
 8006178:	4639      	mov	r1, r7
 800617a:	f7fa f88f 	bl	800029c <__adddf3>
 800617e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006180:	4b32      	ldr	r3, [pc, #200]	@ (800624c <__ieee754_pow+0x794>)
 8006182:	4413      	add	r3, r2
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f7fa f888 	bl	800029c <__adddf3>
 800618c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006190:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006192:	f7fa f9cf 	bl	8000534 <__aeabi_i2d>
 8006196:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006198:	4b2d      	ldr	r3, [pc, #180]	@ (8006250 <__ieee754_pow+0x798>)
 800619a:	4413      	add	r3, r2
 800619c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061a0:	4606      	mov	r6, r0
 80061a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061a6:	460f      	mov	r7, r1
 80061a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061ac:	f7fa f876 	bl	800029c <__adddf3>
 80061b0:	4642      	mov	r2, r8
 80061b2:	464b      	mov	r3, r9
 80061b4:	f7fa f872 	bl	800029c <__adddf3>
 80061b8:	4632      	mov	r2, r6
 80061ba:	463b      	mov	r3, r7
 80061bc:	f7fa f86e 	bl	800029c <__adddf3>
 80061c0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80061c4:	4632      	mov	r2, r6
 80061c6:	463b      	mov	r3, r7
 80061c8:	4658      	mov	r0, fp
 80061ca:	460d      	mov	r5, r1
 80061cc:	f7fa f864 	bl	8000298 <__aeabi_dsub>
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	f7fa f860 	bl	8000298 <__aeabi_dsub>
 80061d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061dc:	f7fa f85c 	bl	8000298 <__aeabi_dsub>
 80061e0:	465c      	mov	r4, fp
 80061e2:	4602      	mov	r2, r0
 80061e4:	e036      	b.n	8006254 <__ieee754_pow+0x79c>
 80061e6:	bf00      	nop
 80061e8:	4a454eef 	.word	0x4a454eef
 80061ec:	3fca7e28 	.word	0x3fca7e28
 80061f0:	93c9db65 	.word	0x93c9db65
 80061f4:	3fcd864a 	.word	0x3fcd864a
 80061f8:	a91d4101 	.word	0xa91d4101
 80061fc:	3fd17460 	.word	0x3fd17460
 8006200:	518f264d 	.word	0x518f264d
 8006204:	3fd55555 	.word	0x3fd55555
 8006208:	db6fabff 	.word	0xdb6fabff
 800620c:	3fdb6db6 	.word	0x3fdb6db6
 8006210:	33333303 	.word	0x33333303
 8006214:	3fe33333 	.word	0x3fe33333
 8006218:	e0000000 	.word	0xe0000000
 800621c:	3feec709 	.word	0x3feec709
 8006220:	dc3a03fd 	.word	0xdc3a03fd
 8006224:	3feec709 	.word	0x3feec709
 8006228:	145b01f5 	.word	0x145b01f5
 800622c:	be3e2fe0 	.word	0xbe3e2fe0
 8006230:	7ff00000 	.word	0x7ff00000
 8006234:	43400000 	.word	0x43400000
 8006238:	0003988e 	.word	0x0003988e
 800623c:	000bb679 	.word	0x000bb679
 8006240:	080068e8 	.word	0x080068e8
 8006244:	3ff00000 	.word	0x3ff00000
 8006248:	40080000 	.word	0x40080000
 800624c:	080068c8 	.word	0x080068c8
 8006250:	080068d8 	.word	0x080068d8
 8006254:	460b      	mov	r3, r1
 8006256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800625a:	e5d7      	b.n	8005e0c <__ieee754_pow+0x354>
 800625c:	f04f 0a01 	mov.w	sl, #1
 8006260:	e65e      	b.n	8005f20 <__ieee754_pow+0x468>
 8006262:	a3b4      	add	r3, pc, #720	@ (adr r3, 8006534 <__ieee754_pow+0xa7c>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	4630      	mov	r0, r6
 800626a:	4639      	mov	r1, r7
 800626c:	f7fa f816 	bl	800029c <__adddf3>
 8006270:	4642      	mov	r2, r8
 8006272:	e9cd 0100 	strd	r0, r1, [sp]
 8006276:	464b      	mov	r3, r9
 8006278:	4620      	mov	r0, r4
 800627a:	4629      	mov	r1, r5
 800627c:	f7fa f80c 	bl	8000298 <__aeabi_dsub>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006288:	f7fa fc4e 	bl	8000b28 <__aeabi_dcmpgt>
 800628c:	2800      	cmp	r0, #0
 800628e:	f47f ae00 	bne.w	8005e92 <__ieee754_pow+0x3da>
 8006292:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006296:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800629a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800629e:	fa43 fa0a 	asr.w	sl, r3, sl
 80062a2:	44da      	add	sl, fp
 80062a4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80062a8:	489d      	ldr	r0, [pc, #628]	@ (8006520 <__ieee754_pow+0xa68>)
 80062aa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80062ae:	4108      	asrs	r0, r1
 80062b0:	ea00 030a 	and.w	r3, r0, sl
 80062b4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80062b8:	f1c1 0114 	rsb	r1, r1, #20
 80062bc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80062c0:	fa4a fa01 	asr.w	sl, sl, r1
 80062c4:	f1bb 0f00 	cmp.w	fp, #0
 80062c8:	4640      	mov	r0, r8
 80062ca:	4649      	mov	r1, r9
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	bfb8      	it	lt
 80062d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80062d6:	f7f9 ffdf 	bl	8000298 <__aeabi_dsub>
 80062da:	4680      	mov	r8, r0
 80062dc:	4689      	mov	r9, r1
 80062de:	4632      	mov	r2, r6
 80062e0:	463b      	mov	r3, r7
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7f9 ffd9 	bl	800029c <__adddf3>
 80062ea:	2400      	movs	r4, #0
 80062ec:	a37c      	add	r3, pc, #496	@ (adr r3, 80064e0 <__ieee754_pow+0xa28>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	4620      	mov	r0, r4
 80062f4:	460d      	mov	r5, r1
 80062f6:	f7fa f987 	bl	8000608 <__aeabi_dmul>
 80062fa:	4642      	mov	r2, r8
 80062fc:	e9cd 0100 	strd	r0, r1, [sp]
 8006300:	464b      	mov	r3, r9
 8006302:	4620      	mov	r0, r4
 8006304:	4629      	mov	r1, r5
 8006306:	f7f9 ffc7 	bl	8000298 <__aeabi_dsub>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4630      	mov	r0, r6
 8006310:	4639      	mov	r1, r7
 8006312:	f7f9 ffc1 	bl	8000298 <__aeabi_dsub>
 8006316:	a374      	add	r3, pc, #464	@ (adr r3, 80064e8 <__ieee754_pow+0xa30>)
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f7fa f974 	bl	8000608 <__aeabi_dmul>
 8006320:	a373      	add	r3, pc, #460	@ (adr r3, 80064f0 <__ieee754_pow+0xa38>)
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	4680      	mov	r8, r0
 8006328:	4689      	mov	r9, r1
 800632a:	4620      	mov	r0, r4
 800632c:	4629      	mov	r1, r5
 800632e:	f7fa f96b 	bl	8000608 <__aeabi_dmul>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4640      	mov	r0, r8
 8006338:	4649      	mov	r1, r9
 800633a:	f7f9 ffaf 	bl	800029c <__adddf3>
 800633e:	4604      	mov	r4, r0
 8006340:	460d      	mov	r5, r1
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	e9dd 0100 	ldrd	r0, r1, [sp]
 800634a:	f7f9 ffa7 	bl	800029c <__adddf3>
 800634e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006352:	4680      	mov	r8, r0
 8006354:	4689      	mov	r9, r1
 8006356:	f7f9 ff9f 	bl	8000298 <__aeabi_dsub>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4620      	mov	r0, r4
 8006360:	4629      	mov	r1, r5
 8006362:	f7f9 ff99 	bl	8000298 <__aeabi_dsub>
 8006366:	4642      	mov	r2, r8
 8006368:	4606      	mov	r6, r0
 800636a:	460f      	mov	r7, r1
 800636c:	464b      	mov	r3, r9
 800636e:	4640      	mov	r0, r8
 8006370:	4649      	mov	r1, r9
 8006372:	f7fa f949 	bl	8000608 <__aeabi_dmul>
 8006376:	a360      	add	r3, pc, #384	@ (adr r3, 80064f8 <__ieee754_pow+0xa40>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	4604      	mov	r4, r0
 800637e:	460d      	mov	r5, r1
 8006380:	f7fa f942 	bl	8000608 <__aeabi_dmul>
 8006384:	a35e      	add	r3, pc, #376	@ (adr r3, 8006500 <__ieee754_pow+0xa48>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f7f9 ff85 	bl	8000298 <__aeabi_dsub>
 800638e:	4622      	mov	r2, r4
 8006390:	462b      	mov	r3, r5
 8006392:	f7fa f939 	bl	8000608 <__aeabi_dmul>
 8006396:	a35c      	add	r3, pc, #368	@ (adr r3, 8006508 <__ieee754_pow+0xa50>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f7f9 ff7e 	bl	800029c <__adddf3>
 80063a0:	4622      	mov	r2, r4
 80063a2:	462b      	mov	r3, r5
 80063a4:	f7fa f930 	bl	8000608 <__aeabi_dmul>
 80063a8:	a359      	add	r3, pc, #356	@ (adr r3, 8006510 <__ieee754_pow+0xa58>)
 80063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ae:	f7f9 ff73 	bl	8000298 <__aeabi_dsub>
 80063b2:	4622      	mov	r2, r4
 80063b4:	462b      	mov	r3, r5
 80063b6:	f7fa f927 	bl	8000608 <__aeabi_dmul>
 80063ba:	a357      	add	r3, pc, #348	@ (adr r3, 8006518 <__ieee754_pow+0xa60>)
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f7f9 ff6c 	bl	800029c <__adddf3>
 80063c4:	4622      	mov	r2, r4
 80063c6:	462b      	mov	r3, r5
 80063c8:	f7fa f91e 	bl	8000608 <__aeabi_dmul>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4640      	mov	r0, r8
 80063d2:	4649      	mov	r1, r9
 80063d4:	f7f9 ff60 	bl	8000298 <__aeabi_dsub>
 80063d8:	4604      	mov	r4, r0
 80063da:	460d      	mov	r5, r1
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4640      	mov	r0, r8
 80063e2:	4649      	mov	r1, r9
 80063e4:	f7fa f910 	bl	8000608 <__aeabi_dmul>
 80063e8:	2200      	movs	r2, #0
 80063ea:	e9cd 0100 	strd	r0, r1, [sp]
 80063ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063f2:	4620      	mov	r0, r4
 80063f4:	4629      	mov	r1, r5
 80063f6:	f7f9 ff4f 	bl	8000298 <__aeabi_dsub>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006402:	f7fa fa2b 	bl	800085c <__aeabi_ddiv>
 8006406:	4632      	mov	r2, r6
 8006408:	4604      	mov	r4, r0
 800640a:	460d      	mov	r5, r1
 800640c:	463b      	mov	r3, r7
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7fa f8f9 	bl	8000608 <__aeabi_dmul>
 8006416:	4632      	mov	r2, r6
 8006418:	463b      	mov	r3, r7
 800641a:	f7f9 ff3f 	bl	800029c <__adddf3>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4620      	mov	r0, r4
 8006424:	4629      	mov	r1, r5
 8006426:	f7f9 ff37 	bl	8000298 <__aeabi_dsub>
 800642a:	4642      	mov	r2, r8
 800642c:	464b      	mov	r3, r9
 800642e:	f7f9 ff33 	bl	8000298 <__aeabi_dsub>
 8006432:	460b      	mov	r3, r1
 8006434:	4602      	mov	r2, r0
 8006436:	493b      	ldr	r1, [pc, #236]	@ (8006524 <__ieee754_pow+0xa6c>)
 8006438:	2000      	movs	r0, #0
 800643a:	f7f9 ff2d 	bl	8000298 <__aeabi_dsub>
 800643e:	ec41 0b10 	vmov	d0, r0, r1
 8006442:	ee10 3a90 	vmov	r3, s1
 8006446:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800644a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800644e:	da30      	bge.n	80064b2 <__ieee754_pow+0x9fa>
 8006450:	4650      	mov	r0, sl
 8006452:	f000 f87d 	bl	8006550 <scalbn>
 8006456:	ec51 0b10 	vmov	r0, r1, d0
 800645a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800645e:	f7ff bbd2 	b.w	8005c06 <__ieee754_pow+0x14e>
 8006462:	4c31      	ldr	r4, [pc, #196]	@ (8006528 <__ieee754_pow+0xa70>)
 8006464:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006468:	42a3      	cmp	r3, r4
 800646a:	d91a      	bls.n	80064a2 <__ieee754_pow+0x9ea>
 800646c:	4b2f      	ldr	r3, [pc, #188]	@ (800652c <__ieee754_pow+0xa74>)
 800646e:	440b      	add	r3, r1
 8006470:	4303      	orrs	r3, r0
 8006472:	d009      	beq.n	8006488 <__ieee754_pow+0x9d0>
 8006474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006478:	2200      	movs	r2, #0
 800647a:	2300      	movs	r3, #0
 800647c:	f7fa fb36 	bl	8000aec <__aeabi_dcmplt>
 8006480:	3800      	subs	r0, #0
 8006482:	bf18      	it	ne
 8006484:	2001      	movne	r0, #1
 8006486:	e42b      	b.n	8005ce0 <__ieee754_pow+0x228>
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	f7f9 ff04 	bl	8000298 <__aeabi_dsub>
 8006490:	4632      	mov	r2, r6
 8006492:	463b      	mov	r3, r7
 8006494:	f7fa fb3e 	bl	8000b14 <__aeabi_dcmpge>
 8006498:	2800      	cmp	r0, #0
 800649a:	d1eb      	bne.n	8006474 <__ieee754_pow+0x9bc>
 800649c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800653c <__ieee754_pow+0xa84>
 80064a0:	e6f7      	b.n	8006292 <__ieee754_pow+0x7da>
 80064a2:	469a      	mov	sl, r3
 80064a4:	4b22      	ldr	r3, [pc, #136]	@ (8006530 <__ieee754_pow+0xa78>)
 80064a6:	459a      	cmp	sl, r3
 80064a8:	f63f aef3 	bhi.w	8006292 <__ieee754_pow+0x7da>
 80064ac:	f8dd a010 	ldr.w	sl, [sp, #16]
 80064b0:	e715      	b.n	80062de <__ieee754_pow+0x826>
 80064b2:	ec51 0b10 	vmov	r0, r1, d0
 80064b6:	4619      	mov	r1, r3
 80064b8:	e7cf      	b.n	800645a <__ieee754_pow+0x9a2>
 80064ba:	491a      	ldr	r1, [pc, #104]	@ (8006524 <__ieee754_pow+0xa6c>)
 80064bc:	2000      	movs	r0, #0
 80064be:	f7ff bb18 	b.w	8005af2 <__ieee754_pow+0x3a>
 80064c2:	2000      	movs	r0, #0
 80064c4:	2100      	movs	r1, #0
 80064c6:	f7ff bb14 	b.w	8005af2 <__ieee754_pow+0x3a>
 80064ca:	4630      	mov	r0, r6
 80064cc:	4639      	mov	r1, r7
 80064ce:	f7ff bb10 	b.w	8005af2 <__ieee754_pow+0x3a>
 80064d2:	460c      	mov	r4, r1
 80064d4:	f7ff bb5e 	b.w	8005b94 <__ieee754_pow+0xdc>
 80064d8:	2400      	movs	r4, #0
 80064da:	f7ff bb49 	b.w	8005b70 <__ieee754_pow+0xb8>
 80064de:	bf00      	nop
 80064e0:	00000000 	.word	0x00000000
 80064e4:	3fe62e43 	.word	0x3fe62e43
 80064e8:	fefa39ef 	.word	0xfefa39ef
 80064ec:	3fe62e42 	.word	0x3fe62e42
 80064f0:	0ca86c39 	.word	0x0ca86c39
 80064f4:	be205c61 	.word	0xbe205c61
 80064f8:	72bea4d0 	.word	0x72bea4d0
 80064fc:	3e663769 	.word	0x3e663769
 8006500:	c5d26bf1 	.word	0xc5d26bf1
 8006504:	3ebbbd41 	.word	0x3ebbbd41
 8006508:	af25de2c 	.word	0xaf25de2c
 800650c:	3f11566a 	.word	0x3f11566a
 8006510:	16bebd93 	.word	0x16bebd93
 8006514:	3f66c16c 	.word	0x3f66c16c
 8006518:	5555553e 	.word	0x5555553e
 800651c:	3fc55555 	.word	0x3fc55555
 8006520:	fff00000 	.word	0xfff00000
 8006524:	3ff00000 	.word	0x3ff00000
 8006528:	4090cbff 	.word	0x4090cbff
 800652c:	3f6f3400 	.word	0x3f6f3400
 8006530:	3fe00000 	.word	0x3fe00000
 8006534:	652b82fe 	.word	0x652b82fe
 8006538:	3c971547 	.word	0x3c971547
 800653c:	4090cc00 	.word	0x4090cc00

08006540 <fabs>:
 8006540:	ec51 0b10 	vmov	r0, r1, d0
 8006544:	4602      	mov	r2, r0
 8006546:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800654a:	ec43 2b10 	vmov	d0, r2, r3
 800654e:	4770      	bx	lr

08006550 <scalbn>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	ec55 4b10 	vmov	r4, r5, d0
 8006556:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800655a:	4606      	mov	r6, r0
 800655c:	462b      	mov	r3, r5
 800655e:	b991      	cbnz	r1, 8006586 <scalbn+0x36>
 8006560:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006564:	4323      	orrs	r3, r4
 8006566:	d03d      	beq.n	80065e4 <scalbn+0x94>
 8006568:	4b35      	ldr	r3, [pc, #212]	@ (8006640 <scalbn+0xf0>)
 800656a:	4620      	mov	r0, r4
 800656c:	4629      	mov	r1, r5
 800656e:	2200      	movs	r2, #0
 8006570:	f7fa f84a 	bl	8000608 <__aeabi_dmul>
 8006574:	4b33      	ldr	r3, [pc, #204]	@ (8006644 <scalbn+0xf4>)
 8006576:	429e      	cmp	r6, r3
 8006578:	4604      	mov	r4, r0
 800657a:	460d      	mov	r5, r1
 800657c:	da0f      	bge.n	800659e <scalbn+0x4e>
 800657e:	a328      	add	r3, pc, #160	@ (adr r3, 8006620 <scalbn+0xd0>)
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	e01e      	b.n	80065c4 <scalbn+0x74>
 8006586:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800658a:	4291      	cmp	r1, r2
 800658c:	d10b      	bne.n	80065a6 <scalbn+0x56>
 800658e:	4622      	mov	r2, r4
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	f7f9 fe82 	bl	800029c <__adddf3>
 8006598:	4604      	mov	r4, r0
 800659a:	460d      	mov	r5, r1
 800659c:	e022      	b.n	80065e4 <scalbn+0x94>
 800659e:	460b      	mov	r3, r1
 80065a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80065a4:	3936      	subs	r1, #54	@ 0x36
 80065a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80065aa:	4296      	cmp	r6, r2
 80065ac:	dd0d      	ble.n	80065ca <scalbn+0x7a>
 80065ae:	2d00      	cmp	r5, #0
 80065b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006628 <scalbn+0xd8>)
 80065b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065b6:	da02      	bge.n	80065be <scalbn+0x6e>
 80065b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006630 <scalbn+0xe0>)
 80065ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065be:	a31a      	add	r3, pc, #104	@ (adr r3, 8006628 <scalbn+0xd8>)
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f7fa f820 	bl	8000608 <__aeabi_dmul>
 80065c8:	e7e6      	b.n	8006598 <scalbn+0x48>
 80065ca:	1872      	adds	r2, r6, r1
 80065cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80065d0:	428a      	cmp	r2, r1
 80065d2:	dcec      	bgt.n	80065ae <scalbn+0x5e>
 80065d4:	2a00      	cmp	r2, #0
 80065d6:	dd08      	ble.n	80065ea <scalbn+0x9a>
 80065d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80065dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80065e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065e4:	ec45 4b10 	vmov	d0, r4, r5
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80065ee:	da08      	bge.n	8006602 <scalbn+0xb2>
 80065f0:	2d00      	cmp	r5, #0
 80065f2:	a10b      	add	r1, pc, #44	@ (adr r1, 8006620 <scalbn+0xd0>)
 80065f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065f8:	dac1      	bge.n	800657e <scalbn+0x2e>
 80065fa:	a10f      	add	r1, pc, #60	@ (adr r1, 8006638 <scalbn+0xe8>)
 80065fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006600:	e7bd      	b.n	800657e <scalbn+0x2e>
 8006602:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006606:	3236      	adds	r2, #54	@ 0x36
 8006608:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800660c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006610:	4620      	mov	r0, r4
 8006612:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <scalbn+0xf8>)
 8006614:	4629      	mov	r1, r5
 8006616:	2200      	movs	r2, #0
 8006618:	e7d4      	b.n	80065c4 <scalbn+0x74>
 800661a:	bf00      	nop
 800661c:	f3af 8000 	nop.w
 8006620:	c2f8f359 	.word	0xc2f8f359
 8006624:	01a56e1f 	.word	0x01a56e1f
 8006628:	8800759c 	.word	0x8800759c
 800662c:	7e37e43c 	.word	0x7e37e43c
 8006630:	8800759c 	.word	0x8800759c
 8006634:	fe37e43c 	.word	0xfe37e43c
 8006638:	c2f8f359 	.word	0xc2f8f359
 800663c:	81a56e1f 	.word	0x81a56e1f
 8006640:	43500000 	.word	0x43500000
 8006644:	ffff3cb0 	.word	0xffff3cb0
 8006648:	3c900000 	.word	0x3c900000

0800664c <with_errno>:
 800664c:	b510      	push	{r4, lr}
 800664e:	ed2d 8b02 	vpush	{d8}
 8006652:	eeb0 8a40 	vmov.f32	s16, s0
 8006656:	eef0 8a60 	vmov.f32	s17, s1
 800665a:	4604      	mov	r4, r0
 800665c:	f7fe f9bc 	bl	80049d8 <__errno>
 8006660:	eeb0 0a48 	vmov.f32	s0, s16
 8006664:	eef0 0a68 	vmov.f32	s1, s17
 8006668:	ecbd 8b02 	vpop	{d8}
 800666c:	6004      	str	r4, [r0, #0]
 800666e:	bd10      	pop	{r4, pc}

08006670 <xflow>:
 8006670:	4603      	mov	r3, r0
 8006672:	b507      	push	{r0, r1, r2, lr}
 8006674:	ec51 0b10 	vmov	r0, r1, d0
 8006678:	b183      	cbz	r3, 800669c <xflow+0x2c>
 800667a:	4602      	mov	r2, r0
 800667c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006680:	e9cd 2300 	strd	r2, r3, [sp]
 8006684:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006688:	f7f9 ffbe 	bl	8000608 <__aeabi_dmul>
 800668c:	ec41 0b10 	vmov	d0, r0, r1
 8006690:	2022      	movs	r0, #34	@ 0x22
 8006692:	b003      	add	sp, #12
 8006694:	f85d eb04 	ldr.w	lr, [sp], #4
 8006698:	f7ff bfd8 	b.w	800664c <with_errno>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	e7ee      	b.n	8006680 <xflow+0x10>
 80066a2:	0000      	movs	r0, r0
 80066a4:	0000      	movs	r0, r0
	...

080066a8 <__math_uflow>:
 80066a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80066b0 <__math_uflow+0x8>
 80066ac:	f7ff bfe0 	b.w	8006670 <xflow>
 80066b0:	00000000 	.word	0x00000000
 80066b4:	10000000 	.word	0x10000000

080066b8 <__math_oflow>:
 80066b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80066c0 <__math_oflow+0x8>
 80066bc:	f7ff bfd8 	b.w	8006670 <xflow>
 80066c0:	00000000 	.word	0x00000000
 80066c4:	70000000 	.word	0x70000000

080066c8 <_init>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	bf00      	nop
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr

080066d4 <_fini>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	bf00      	nop
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr
