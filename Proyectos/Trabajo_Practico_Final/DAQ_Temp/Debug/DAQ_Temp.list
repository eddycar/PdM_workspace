
DAQ_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006450  08006450  00007450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006648  08006648  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  08006648  08006648  00007648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006650  08006650  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006650  08006650  00007650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006654  08006654  00007654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08006658  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008080  2**0
                  CONTENTS
 10 .bss          000002cc  20000080  20000080  00008080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  00008080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b028  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022a5  00000000  00000000  000130d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  00015380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b9  00000000  00000000  00015dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c2c  00000000  00000000  00016589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb52  00000000  00000000  0003c1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8449  00000000  00000000  0004bd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124150  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035bc  00000000  00000000  00124194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00127750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006438 	.word	0x08006438

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08006438 	.word	0x08006438

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "FINITE_STATE_MACHINE.h"

int main(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000efc:	f000 fe0c 	bl	8001b18 <HAL_Init>

	/* Initialize Finite State Machine */
	SystemFSM_init();
 8000f00:	f000 fa12 	bl	8001328 <SystemFSM_init>

	/* Infinite loop */
	while (1) {
		SystemFSM_update();
 8000f04:	f000 fa1c 	bl	8001340 <SystemFSM_update>
 8000f08:	e7fc      	b.n	8000f04 <main+0xc>
	...

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a28      	ldr	r2, [pc, #160]	@ (800101c <HAL_SPI_MspInit+0xc0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d149      	bne.n	8001012 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b27      	ldr	r3, [pc, #156]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	4a26      	ldr	r2, [pc, #152]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000f88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8e:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a18      	ldr	r2, [pc, #96]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <HAL_SPI_MspInit+0xc4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fd2:	2360      	movs	r3, #96	@ 0x60
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	480d      	ldr	r0, [pc, #52]	@ (8001024 <HAL_SPI_MspInit+0xc8>)
 8000fee:	f000 ff0f 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ff2:	2320      	movs	r3, #32
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001002:	2305      	movs	r3, #5
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4806      	ldr	r0, [pc, #24]	@ (8001028 <HAL_SPI_MspInit+0xcc>)
 800100e:	f000 feff 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	@ 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40013000 	.word	0x40013000
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a19      	ldr	r2, [pc, #100]	@ (80010b0 <HAL_UART_MspInit+0x84>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12c      	bne.n	80010a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 8001058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <HAL_UART_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001086:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001098:	2307      	movs	r3, #7
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <HAL_UART_MspInit+0x8c>)
 80010a4:	f000 feb4 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	@ 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40004800 	.word	0x40004800
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020c00 	.word	0x40020c00

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <NMI_Handler+0x4>

080010c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <MemManage_Handler+0x4>

080010d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001112:	f000 fd53 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}

0800111a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e00a      	b.n	8001142 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800112c:	f3af 8000 	nop.w
 8001130:	4601      	mov	r1, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	60ba      	str	r2, [r7, #8]
 8001138:	b2ca      	uxtb	r2, r1
 800113a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	3301      	adds	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	429a      	cmp	r2, r3
 8001148:	dbf0      	blt.n	800112c <_read+0x12>
  }

  return len;
 800114a:	687b      	ldr	r3, [r7, #4]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e009      	b.n	800117a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	60ba      	str	r2, [r7, #8]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fc40 	bl	80019f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	dbf1      	blt.n	8001166 <_write+0x12>
  }
  return len;
 8001182:	687b      	ldr	r3, [r7, #4]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_close>:

int _close(int file)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011b4:	605a      	str	r2, [r3, #4]
  return 0;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_isatty>:

int _isatty(int file)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011cc:	2301      	movs	r3, #1
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011da:	b480      	push	{r7}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011fc:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <_sbrk+0x5c>)
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <_sbrk+0x60>)
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <_sbrk+0x64>)
 8001212:	4a12      	ldr	r2, [pc, #72]	@ (800125c <_sbrk+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	d207      	bcs.n	8001234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001224:	f003 fa90 	bl	8004748 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	220c      	movs	r2, #12
 800122c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e009      	b.n	8001248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	4a05      	ldr	r2, [pc, #20]	@ (8001258 <_sbrk+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20030000 	.word	0x20030000
 8001254:	00000400 	.word	0x00000400
 8001258:	2000009c 	.word	0x2000009c
 800125c:	20000350 	.word	0x20000350

08001260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001288:	f7ff ffea 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	@ (80012c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f003 fa4f 	bl	8004754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b6:	f7ff fe1f 	bl	8000ef8 <main>
  bx  lr    
 80012ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012c8:	08006658 	.word	0x08006658
  ldr r2, =_sbss
 80012cc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012d0:	2000034c 	.word	0x2000034c

080012d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC_IRQHandler>
	...

080012d8 <debounceFSM_init>:

static debounceState_t currentState;
static delay_t debounceDelay;
static bool_t buttonPressed = false;

void debounceFSM_init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	currentState = BUTTON_UP; //current state initializes
 80012dc:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <debounceFSM_init+0x18>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceDelay, DEBOUNCE_TIME); // 40 second timer initializes
 80012e2:	2128      	movs	r1, #40	@ 0x28
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <debounceFSM_init+0x1c>)
 80012e6:	f000 f807 	bl	80012f8 <delayInit>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000a0 	.word	0x200000a0
 80012f4:	200000a4 	.word	0x200000a4

080012f8 <delayInit>:
#include "API_delay.h"
#include "error_handler.h"

//Funcion para inicializar variables de delay
void delayInit(delay_t *delay, tick_t duration) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	if (delay == NULL) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <delayInit+0x16>
		write_error_flag(true);
 8001308:	2001      	movs	r0, #1
 800130a:	f002 ff75 	bl	80041f8 <write_error_flag>
	}
	delay->running = false;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	721a      	strb	r2, [r3, #8]
	delay->duration = duration;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	605a      	str	r2, [r3, #4]
	delay->startTime = 0;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <SystemFSM_init>:


float PT100_Temperature = 0.0f;

// initialize FSM
void SystemFSM_init(void) {
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	currentState = STATE_CONFIG;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <SystemFSM_init+0x14>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	200000b0 	.word	0x200000b0

08001340 <SystemFSM_update>:

// state transition function
void SystemFSM_update(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	switch (currentState) {
 8001346:	4b51      	ldr	r3, [pc, #324]	@ (800148c <SystemFSM_update+0x14c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b05      	cmp	r3, #5
 800134c:	f200 8093 	bhi.w	8001476 <SystemFSM_update+0x136>
 8001350:	a201      	add	r2, pc, #4	@ (adr r2, 8001358 <SystemFSM_update+0x18>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	08001371 	.word	0x08001371
 800135c:	080013a5 	.word	0x080013a5
 8001360:	080013b1 	.word	0x080013b1
 8001364:	080013e3 	.word	0x080013e3
 8001368:	08001421 	.word	0x08001421
 800136c:	0800145b 	.word	0x0800145b
	case STATE_CONFIG: /* Initialize peripherals */
		SystemClock_Config();
 8001370:	f002 fe3c 	bl	8003fec <SystemClock_Config>
		GPIO_Init();
 8001374:	f002 fea6 	bl	80040c4 <GPIO_Init>
		uartInit();
 8001378:	f000 fac2 	bl	8001900 <uartInit>
		debounceFSM_init();
 800137c:	f7ff ffac 	bl	80012d8 <debounceFSM_init>
		SPI1_Init();
 8001380:	f000 fa86 	bl	8001890 <SPI1_Init>
		MAX31865_Init(NUM_WIRES);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f895 	bl	80014b4 <MAX31865_Init>
		if (read_error_flag() == true) { //  errors?
 800138a:	f002 ff29 	bl	80041e0 <read_error_flag>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <SystemFSM_update+0x5c>
			currentState = STATE_FAILURE;
 8001394:	4b3d      	ldr	r3, [pc, #244]	@ (800148c <SystemFSM_update+0x14c>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
		} else {
			currentState = STATE_IDLE;
		}
		break;
 800139a:	e073      	b.n	8001484 <SystemFSM_update+0x144>
			currentState = STATE_IDLE;
 800139c:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <SystemFSM_update+0x14c>)
 800139e:	2202      	movs	r2, #2
 80013a0:	701a      	strb	r2, [r3, #0]
		break;
 80013a2:	e06f      	b.n	8001484 <SystemFSM_update+0x144>

	case STATE_FAILURE:   //Handle Errors
		Error_Handler();
 80013a4:	f002 ff38 	bl	8004218 <Error_Handler>
		currentState = STATE_CONFIG;
 80013a8:	4b38      	ldr	r3, [pc, #224]	@ (800148c <SystemFSM_update+0x14c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
		break;
 80013ae:	e069      	b.n	8001484 <SystemFSM_update+0x144>

	case STATE_IDLE:
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) { // If button is pressed App To Start Recording
 80013b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b4:	4836      	ldr	r0, [pc, #216]	@ (8001490 <SystemFSM_update+0x150>)
 80013b6:	f000 fed7 	bl	8002168 <HAL_GPIO_ReadPin>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d15e      	bne.n	800147e <SystemFSM_update+0x13e>
			trigger = true;
 80013c0:	4b34      	ldr	r3, [pc, #208]	@ (8001494 <SystemFSM_update+0x154>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_tx, "\rTrigger: %d\n", trigger);
 80013c6:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <SystemFSM_update+0x154>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4932      	ldr	r1, [pc, #200]	@ (8001498 <SystemFSM_update+0x158>)
 80013ce:	4833      	ldr	r0, [pc, #204]	@ (800149c <SystemFSM_update+0x15c>)
 80013d0:	f003 f874 	bl	80044bc <siprintf>
			uartSendString((uint8_t*) buffer_tx);
 80013d4:	4831      	ldr	r0, [pc, #196]	@ (800149c <SystemFSM_update+0x15c>)
 80013d6:	f000 fad9 	bl	800198c <uartSendString>
			currentState = STATE_DATA_ADQUISITION;
 80013da:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <SystemFSM_update+0x14c>)
 80013dc:	2203      	movs	r2, #3
 80013de:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013e0:	e04d      	b.n	800147e <SystemFSM_update+0x13e>

	case STATE_DATA_ADQUISITION: // Get Temperature y Save in buffer
		PT100_Temperature = MAX31865_Get_Temperature();
 80013e2:	f000 f8c1 	bl	8001568 <MAX31865_Get_Temperature>
 80013e6:	ec53 2b10 	vmov	r2, r3, d0
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fbbb 	bl	8000b68 <__aeabi_d2f>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a2a      	ldr	r2, [pc, #168]	@ (80014a0 <SystemFSM_update+0x160>)
 80013f6:	6013      	str	r3, [r2, #0]
		sprintf(buffer_tx, "\rTemp: %d Trigger: %d\n", (uint8_t)PT100_Temperature,trigger);
 80013f8:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <SystemFSM_update+0x160>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001402:	edc7 7a01 	vstr	s15, [r7, #4]
 8001406:	793b      	ldrb	r3, [r7, #4]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <SystemFSM_update+0x154>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4924      	ldr	r1, [pc, #144]	@ (80014a4 <SystemFSM_update+0x164>)
 8001412:	4822      	ldr	r0, [pc, #136]	@ (800149c <SystemFSM_update+0x15c>)
 8001414:	f003 f852 	bl	80044bc <siprintf>
		currentState = STATE_DATA_SENDING;
 8001418:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <SystemFSM_update+0x14c>)
 800141a:	2204      	movs	r2, #4
 800141c:	701a      	strb	r2, [r3, #0]
		break;
 800141e:	e031      	b.n	8001484 <SystemFSM_update+0x144>

	case STATE_DATA_SENDING:
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) { // If Button is pressed  App To Stop Recording
 8001420:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001424:	481a      	ldr	r0, [pc, #104]	@ (8001490 <SystemFSM_update+0x150>)
 8001426:	f000 fe9f 	bl	8002168 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b01      	cmp	r3, #1
 800142e:	d109      	bne.n	8001444 <SystemFSM_update+0x104>
			trigger = false;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <SystemFSM_update+0x154>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
			uartSendString((uint8_t*) buffer_tx);
 8001436:	4819      	ldr	r0, [pc, #100]	@ (800149c <SystemFSM_update+0x15c>)
 8001438:	f000 faa8 	bl	800198c <uartSendString>
			currentState = STATE_DATA_STORAGE;
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <SystemFSM_update+0x14c>)
 800143e:	2205      	movs	r2, #5
 8001440:	701a      	strb	r2, [r3, #0]
		else {
			uartSendString((uint8_t*) buffer_tx); // Send Temperature Data to App
			HAL_Delay(500);
			currentState = STATE_DATA_ADQUISITION;
		}
		break;
 8001442:	e01f      	b.n	8001484 <SystemFSM_update+0x144>
			uartSendString((uint8_t*) buffer_tx); // Send Temperature Data to App
 8001444:	4815      	ldr	r0, [pc, #84]	@ (800149c <SystemFSM_update+0x15c>)
 8001446:	f000 faa1 	bl	800198c <uartSendString>
			HAL_Delay(500);
 800144a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800144e:	f000 fbd5 	bl	8001bfc <HAL_Delay>
			currentState = STATE_DATA_ADQUISITION;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <SystemFSM_update+0x14c>)
 8001454:	2203      	movs	r2, #3
 8001456:	701a      	strb	r2, [r3, #0]
		break;
 8001458:	e014      	b.n	8001484 <SystemFSM_update+0x144>

	case STATE_DATA_STORAGE: // Saves Data and waita for flag to change to IDLE State
		uartReceiveStringSize((uint8_t *)buffer_rx, stringLength);
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <SystemFSM_update+0x168>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	4812      	ldr	r0, [pc, #72]	@ (80014ac <SystemFSM_update+0x16c>)
 8001462:	f000 fab3 	bl	80019cc <uartReceiveStringSize>
		if (buffer_rx[0] == 'T') {
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <SystemFSM_update+0x16c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b54      	cmp	r3, #84	@ 0x54
 800146c:	d109      	bne.n	8001482 <SystemFSM_update+0x142>
			currentState = STATE_IDLE;
 800146e:	4b07      	ldr	r3, [pc, #28]	@ (800148c <SystemFSM_update+0x14c>)
 8001470:	2202      	movs	r2, #2
 8001472:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001474:	e005      	b.n	8001482 <SystemFSM_update+0x142>

	default:
		printf("\rError Inesperado!\n");
 8001476:	480e      	ldr	r0, [pc, #56]	@ (80014b0 <SystemFSM_update+0x170>)
 8001478:	f003 f818 	bl	80044ac <puts>
	}
}
 800147c:	e002      	b.n	8001484 <SystemFSM_update+0x144>
		break;
 800147e:	bf00      	nop
 8001480:	e000      	b.n	8001484 <SystemFSM_update+0x144>
		break;
 8001482:	bf00      	nop
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000b0 	.word	0x200000b0
 8001490:	40020800 	.word	0x40020800
 8001494:	2000014d 	.word	0x2000014d
 8001498:	08006450 	.word	0x08006450
 800149c:	200000b4 	.word	0x200000b4
 80014a0:	20000150 	.word	0x20000150
 80014a4:	08006460 	.word	0x08006460
 80014a8:	20000004 	.word	0x20000004
 80014ac:	2000014c 	.word	0x2000014c
 80014b0:	08006478 	.word	0x08006478

080014b4 <MAX31865_Init>:
void cs_set();
void cs_reset();

extern SPI_HandleTypeDef hspi1;

void MAX31865_Init(uint8_t num_wires) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
	MAX31865_Sensor_Error = 0;
 80014be:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MAX31865_Init+0x68>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write[] = { 0x80, 0x00 };
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	81bb      	strh	r3, [r7, #12]

	// RTD configuration according to the number of threads
	if (num_wires == 2 || num_wires == 4) {
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d002      	beq.n	80014d4 <MAX31865_Init+0x20>
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d102      	bne.n	80014da <MAX31865_Init+0x26>
		MAX31865_Configuration_register_write[1] = 0xC2;
 80014d4:	23c2      	movs	r3, #194	@ 0xc2
 80014d6:	737b      	strb	r3, [r7, #13]
 80014d8:	e004      	b.n	80014e4 <MAX31865_Init+0x30>
	} else if (num_wires == 3) {
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d101      	bne.n	80014e4 <MAX31865_Init+0x30>
		MAX31865_Configuration_register_write[1] = 0xD2;
 80014e0:	23d2      	movs	r3, #210	@ 0xd2
 80014e2:	737b      	strb	r3, [r7, #13]
	}

	// Send configuration bytes to max31865
	cs_set();
 80014e4:	f000 f9bc 	bl	8001860 <cs_set>
	HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 80014e8:	f107 010c 	add.w	r1, r7, #12
 80014ec:	2364      	movs	r3, #100	@ 0x64
 80014ee:	2202      	movs	r2, #2
 80014f0:	480b      	ldr	r0, [pc, #44]	@ (8001520 <MAX31865_Init+0x6c>)
 80014f2:	f001 fb8c 	bl	8002c0e <HAL_SPI_Transmit>
	cs_reset();
 80014f6:	f000 f9bf 	bl	8001878 <cs_reset>

	if (MAX31865_Configuration_info() == 0xD0) {
 80014fa:	f000 f815 	bl	8001528 <MAX31865_Configuration_info>
 80014fe:	4603      	mov	r3, r0
 8001500:	2bd0      	cmp	r3, #208	@ 0xd0
 8001502:	d103      	bne.n	800150c <MAX31865_Init+0x58>
		printf("\rInitialization MAX31865 OK\r\n");
 8001504:	4807      	ldr	r0, [pc, #28]	@ (8001524 <MAX31865_Init+0x70>)
 8001506:	f002 ffd1 	bl	80044ac <puts>
	}else {
		write_error_flag(true);
	}
}
 800150a:	e002      	b.n	8001512 <MAX31865_Init+0x5e>
		write_error_flag(true);
 800150c:	2001      	movs	r0, #1
 800150e:	f002 fe73 	bl	80041f8 <write_error_flag>
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000154 	.word	0x20000154
 8001520:	20000158 	.word	0x20000158
 8001524:	0800648c 	.word	0x0800648c

08001528 <MAX31865_Configuration_info>:

// Get max31865 configuration info
uint8_t MAX31865_Configuration_info(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	uint8_t read_data = 0x00;
 800152e:	2300      	movs	r3, #0
 8001530:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration = 0x00;
 8001532:	2300      	movs	r3, #0
 8001534:	71bb      	strb	r3, [r7, #6]
	cs_set();
 8001536:	f000 f993 	bl	8001860 <cs_set>
	HAL_SPI_Transmit(&hspi1, &read_data, 1, 100);
 800153a:	1df9      	adds	r1, r7, #7
 800153c:	2364      	movs	r3, #100	@ 0x64
 800153e:	2201      	movs	r2, #1
 8001540:	4807      	ldr	r0, [pc, #28]	@ (8001560 <MAX31865_Configuration_info+0x38>)
 8001542:	f001 fb64 	bl	8002c0e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100);
 8001546:	1db9      	adds	r1, r7, #6
 8001548:	2364      	movs	r3, #100	@ 0x64
 800154a:	2201      	movs	r2, #1
 800154c:	4804      	ldr	r0, [pc, #16]	@ (8001560 <MAX31865_Configuration_info+0x38>)
 800154e:	f001 fca1 	bl	8002e94 <HAL_SPI_Receive>
	cs_reset();
 8001552:	f000 f991 	bl	8001878 <cs_reset>
	return MAX31865_Configuration;
 8001556:	79bb      	ldrb	r3, [r7, #6]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000158 	.word	0x20000158
 8001564:	00000000 	.word	0x00000000

08001568 <MAX31865_Get_Temperature>:

// Get Temperature
double MAX31865_Get_Temperature(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
		uint8_t Fault_Status;
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	uint8_t MAX31865_start_address_of_the_poll = 0x01;
 800156e:	2301      	movs	r3, #1
 8001570:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer[7];

	cs_set();
 8001572:	f000 f975 	bl	8001860 <cs_set>
	HAL_SPI_Transmit(&hspi1, &MAX31865_start_address_of_the_poll, 1, 100); // Sends the address of the register from which the data is read
 8001576:	1df9      	adds	r1, r7, #7
 8001578:	2364      	movs	r3, #100	@ 0x64
 800157a:	2201      	movs	r2, #1
 800157c:	482e      	ldr	r0, [pc, #184]	@ (8001638 <MAX31865_Get_Temperature+0xd0>)
 800157e:	f001 fb46 	bl	8002c0e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, MAX31865_rx_buffer, 7, 100); // Get All Data
 8001582:	4639      	mov	r1, r7
 8001584:	2364      	movs	r3, #100	@ 0x64
 8001586:	2207      	movs	r2, #7
 8001588:	482b      	ldr	r0, [pc, #172]	@ (8001638 <MAX31865_Get_Temperature+0xd0>)
 800158a:	f001 fc83 	bl	8002e94 <HAL_SPI_Receive>
	cs_reset();
 800158e:	f000 f973 	bl	8001878 <cs_reset>

	// assigns information to each regiter in the structure
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0]
 8001592:	783b      	ldrb	r3, [r7, #0]
			<< 8) | MAX31865_rx_buffer[1]) >> 1;
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	787a      	ldrb	r2, [r7, #1]
 8001598:	4313      	orrs	r3, r2
 800159a:	105b      	asrs	r3, r3, #1
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8)
 80015a0:	78bb      	ldrb	r3, [r7, #2]
 80015a2:	021b      	lsls	r3, r3, #8
			| MAX31865_rx_buffer[3]) >> 1;
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	105b      	asrs	r3, r3, #1
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8)
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8)
 80015ae:	793b      	ldrb	r3, [r7, #4]
 80015b0:	021b      	lsls	r3, r3, #8
			| MAX31865_rx_buffer[5];
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	797b      	ldrb	r3, [r7, #5]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	b29b      	uxth	r3, r3
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8)
 80015be:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6];
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	73bb      	strb	r3, [r7, #14]

	// error handling
	if (MAX31865_receieve_data.Fault_Status > 0x00) {
 80015c4:	7bbb      	ldrb	r3, [r7, #14]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <MAX31865_Get_Temperature+0x7a>

		MAX31865_Sensor_Error = 1;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <MAX31865_Get_Temperature+0xd4>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
		printf("\rSensor Error!\r\n");
 80015d0:	481b      	ldr	r0, [pc, #108]	@ (8001640 <MAX31865_Get_Temperature+0xd8>)
 80015d2:	f002 ff6b 	bl	80044ac <puts>

		/*----Automatic error reset ----*/
		// Module is reset
		MAX31865_Init(3);
 80015d6:	2003      	movs	r0, #3
 80015d8:	f7ff ff6c 	bl	80014b4 <MAX31865_Init>
		MAX31865_Sensor_Error = 0;
 80015dc:	4b17      	ldr	r3, [pc, #92]	@ (800163c <MAX31865_Get_Temperature+0xd4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
	}

	// convert ADC values to resistance
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers
 80015e2:	893b      	ldrh	r3, [r7, #8]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff95 	bl	8000514 <__aeabi_ui2d>
			* MAX31865_Rref ) / (double) 32768.0; // ADC resolution 15 bits
 80015ea:	a311      	add	r3, pc, #68	@ (adr r3, 8001630 <MAX31865_Get_Temperature+0xc8>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f80a 	bl	8000608 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <MAX31865_Get_Temperature+0xdc>)
 8001602:	f7ff f92b 	bl	800085c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("\rRrtd = %d\n", (int) data);

	// converts and returns temperature values
	return MAX31865_Get_Temperature_math(data);
 800160e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001612:	f000 f819 	bl	8001648 <MAX31865_Get_Temperature_math>
 8001616:	eeb0 7a40 	vmov.f32	s14, s0
 800161a:	eef0 7a60 	vmov.f32	s15, s1
}
 800161e:	eeb0 0a47 	vmov.f32	s0, s14
 8001622:	eef0 0a67 	vmov.f32	s1, s15
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	f3af 8000 	nop.w
 8001630:	00000000 	.word	0x00000000
 8001634:	407ac800 	.word	0x407ac800
 8001638:	20000158 	.word	0x20000158
 800163c:	20000154 	.word	0x20000154
 8001640:	080064ac 	.word	0x080064ac
 8001644:	40e00000 	.word	0x40e00000

08001648 <MAX31865_Get_Temperature_math>:

// Conversion of resistance to temperature
double MAX31865_Get_Temperature_math(double PT100_Resistance) {
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	ed87 0b00 	vstr	d0, [r7]
	double MAX31865_PT100_T = 0.0;
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	//If the resistance is high (greater than or equal to 100 ohms) use:
	if (PT100_Resistance >= (double) 100.0) {
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b7d      	ldr	r3, [pc, #500]	@ (8001858 <MAX31865_Get_Temperature_math+0x210>)
 8001664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001668:	f7ff fa54 	bl	8000b14 <__aeabi_dcmpge>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d03c      	beq.n	80016ec <MAX31865_Get_Temperature_math+0xa4>
		double MAX31865_math_Discriminant = (double) 0.00001527480889
				- ((double) -0.00000231
						* (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	4b78      	ldr	r3, [pc, #480]	@ (8001858 <MAX31865_Get_Temperature_math+0x210>)
 8001678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800167c:	f7ff f8ee 	bl	800085c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	f04f 0000 	mov.w	r0, #0
 8001688:	4974      	ldr	r1, [pc, #464]	@ (800185c <MAX31865_Get_Temperature_math+0x214>)
 800168a:	f7fe fe05 	bl	8000298 <__aeabi_dsub>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	a354      	add	r3, pc, #336	@ (adr r3, 80017e8 <MAX31865_Get_Temperature_math+0x1a0>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffb4 	bl	8000608 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
		double MAX31865_math_Discriminant = (double) 0.00001527480889
 80016a8:	a351      	add	r3, pc, #324	@ (adr r3, 80017f0 <MAX31865_Get_Temperature_math+0x1a8>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7fe fdf5 	bl	800029c <__adddf3>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T = ((double) -0.0039083
				+ sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 80016ba:	ed97 0b02 	vldr	d0, [r7, #8]
 80016be:	f003 ff9f 	bl	8005600 <sqrt>
 80016c2:	ec51 0b10 	vmov	r0, r1, d0
 80016c6:	a34c      	add	r3, pc, #304	@ (adr r3, 80017f8 <MAX31865_Get_Temperature_math+0x1b0>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7fe fde4 	bl	8000298 <__aeabi_dsub>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
		MAX31865_PT100_T = ((double) -0.0039083
 80016d8:	a349      	add	r3, pc, #292	@ (adr r3, 8001800 <MAX31865_Get_Temperature_math+0x1b8>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7ff f8bd 	bl	800085c <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80016ea:	e06f      	b.n	80017cc <MAX31865_Get_Temperature_math+0x184>
		// If the resistance is low (less than 100 ohms), another polynomial formula is used to calculate the temperature.
	} else {
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5)
 80016ec:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8001808 <MAX31865_Get_Temperature_math+0x1c0>
 80016f0:	ed97 0b00 	vldr	d0, [r7]
 80016f4:	f003 ff14 	bl	8005520 <pow>
 80016f8:	ec51 0b10 	vmov	r0, r1, d0
 80016fc:	a344      	add	r3, pc, #272	@ (adr r3, 8001810 <MAX31865_Get_Temperature_math+0x1c8>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe ff81 	bl	8000608 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4614      	mov	r4, r2
 800170c:	461d      	mov	r5, r3
				- (double) 0.000000066245 * pow(PT100_Resistance, 4)
 800170e:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8001818 <MAX31865_Get_Temperature_math+0x1d0>
 8001712:	ed97 0b00 	vldr	d0, [r7]
 8001716:	f003 ff03 	bl	8005520 <pow>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	a340      	add	r3, pc, #256	@ (adr r3, 8001820 <MAX31865_Get_Temperature_math+0x1d8>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f7fe ff70 	bl	8000608 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f7fe fdb2 	bl	8000298 <__aeabi_dsub>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4614      	mov	r4, r2
 800173a:	461d      	mov	r5, r3
				- (double) 0.000000184636 * pow(PT100_Resistance, 3)
 800173c:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 8001828 <MAX31865_Get_Temperature_math+0x1e0>
 8001740:	ed97 0b00 	vldr	d0, [r7]
 8001744:	f003 feec 	bl	8005520 <pow>
 8001748:	ec51 0b10 	vmov	r0, r1, d0
 800174c:	a338      	add	r3, pc, #224	@ (adr r3, 8001830 <MAX31865_Get_Temperature_math+0x1e8>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe ff59 	bl	8000608 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7fe fd9b 	bl	8000298 <__aeabi_dsub>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4614      	mov	r4, r2
 8001768:	461d      	mov	r5, r3
				+ (double) 0.002320232987 * pow(PT100_Resistance, 2)
 800176a:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8001838 <MAX31865_Get_Temperature_math+0x1f0>
 800176e:	ed97 0b00 	vldr	d0, [r7]
 8001772:	f003 fed5 	bl	8005520 <pow>
 8001776:	ec51 0b10 	vmov	r0, r1, d0
 800177a:	a331      	add	r3, pc, #196	@ (adr r3, 8001840 <MAX31865_Get_Temperature_math+0x1f8>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe ff42 	bl	8000608 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fd86 	bl	800029c <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4614      	mov	r4, r2
 8001796:	461d      	mov	r5, r3
				+ (double) 2.229927824035 * PT100_Resistance
 8001798:	a32b      	add	r3, pc, #172	@ (adr r3, 8001848 <MAX31865_Get_Temperature_math+0x200>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017a2:	f7fe ff31 	bl	8000608 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7fe fd75 	bl	800029c <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5)
 80017ba:	a325      	add	r3, pc, #148	@ (adr r3, 8001850 <MAX31865_Get_Temperature_math+0x208>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe fd6a 	bl	8000298 <__aeabi_dsub>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
				- (double) 242.090854986215;
	}
	return MAX31865_PT100_T;
 80017cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80017d4:	eeb0 0a47 	vmov.f32	s0, s14
 80017d8:	eef0 0a67 	vmov.f32	s1, s15
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bdb0      	pop	{r4, r5, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	f3af 8000 	nop.w
 80017e8:	ee19ce88 	.word	0xee19ce88
 80017ec:	3ec360af 	.word	0x3ec360af
 80017f0:	dfc928d8 	.word	0xdfc928d8
 80017f4:	3ef0044c 	.word	0x3ef0044c
 80017f8:	4aed641c 	.word	0x4aed641c
 80017fc:	3f700226 	.word	0x3f700226
 8001800:	ee19ce88 	.word	0xee19ce88
 8001804:	beb360af 	.word	0xbeb360af
 8001808:	00000000 	.word	0x00000000
 800180c:	40140000 	.word	0x40140000
 8001810:	e63e6cde 	.word	0xe63e6cde
 8001814:	3df28de3 	.word	0x3df28de3
 8001818:	00000000 	.word	0x00000000
 800181c:	40100000 	.word	0x40100000
 8001820:	5d50ae3a 	.word	0x5d50ae3a
 8001824:	3e71c852 	.word	0x3e71c852
 8001828:	00000000 	.word	0x00000000
 800182c:	40080000 	.word	0x40080000
 8001830:	6e664b7f 	.word	0x6e664b7f
 8001834:	3e88c80b 	.word	0x3e88c80b
 8001838:	00000000 	.word	0x00000000
 800183c:	40000000 	.word	0x40000000
 8001840:	998b63de 	.word	0x998b63de
 8001844:	3f6301e1 	.word	0x3f6301e1
 8001848:	66255dbb 	.word	0x66255dbb
 800184c:	4001d6e4 	.word	0x4001d6e4
 8001850:	48b74f1a 	.word	0x48b74f1a
 8001854:	406e42e8 	.word	0x406e42e8
 8001858:	40590000 	.word	0x40590000
 800185c:	3ff00000 	.word	0x3ff00000

08001860 <cs_set>:

// CS GND
void cs_set() {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2110      	movs	r1, #16
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <cs_set+0x14>)
 800186a:	f000 fc95 	bl	8002198 <HAL_GPIO_WritePin>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40020000 	.word	0x40020000

08001878 <cs_reset>:

// CS VDD
void cs_reset() {
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2110      	movs	r1, #16
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <cs_reset+0x14>)
 8001882:	f000 fc89 	bl	8002198 <HAL_GPIO_WritePin>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40020000 	.word	0x40020000

08001890 <SPI1_Init>:
#include "SPI.h"
#include "error_handler.h"

SPI_HandleTypeDef hspi1;

void SPI1_Init(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <SPI1_Init+0x68>)
 8001896:	4a19      	ldr	r2, [pc, #100]	@ (80018fc <SPI1_Init+0x6c>)
 8001898:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800189a:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <SPI1_Init+0x68>)
 800189c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018a0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <SPI1_Init+0x68>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <SPI1_Init+0x68>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ae:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <SPI1_Init+0x68>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <SPI1_Init+0x68>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <SPI1_Init+0x68>)
 80018bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <SPI1_Init+0x68>)
 80018c4:	2220      	movs	r2, #32
 80018c6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <SPI1_Init+0x68>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <SPI1_Init+0x68>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <SPI1_Init+0x68>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <SPI1_Init+0x68>)
 80018dc:	220a      	movs	r2, #10
 80018de:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80018e0:	4805      	ldr	r0, [pc, #20]	@ (80018f8 <SPI1_Init+0x68>)
 80018e2:	f001 f90b 	bl	8002afc <HAL_SPI_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <SPI1_Init+0x62>
		write_error_flag(true);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f002 fc83 	bl	80041f8 <write_error_flag>
	}
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000158 	.word	0x20000158
 80018fc:	40013000 	.word	0x40013000

08001900 <uartInit>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

static void printUARTConfiguration(UART_HandleTypeDef UartHandle); // function To print the UART configuratión

bool_t uartInit() {
 8001900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001902:	b091      	sub	sp, #68	@ 0x44
 8001904:	af0e      	add	r7, sp, #56	@ 0x38
	bool_t isConnectionSuccesfull = true;
 8001906:	2301      	movs	r3, #1
 8001908:	71fb      	strb	r3, [r7, #7]

	UartHandle3.Instance = USART3;
 800190a:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <uartInit+0x84>)
 800190c:	4a1e      	ldr	r2, [pc, #120]	@ (8001988 <uartInit+0x88>)
 800190e:	601a      	str	r2, [r3, #0]
	UartHandle3.Init.BaudRate = 9600;
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <uartInit+0x84>)
 8001912:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001916:	605a      	str	r2, [r3, #4]
	UartHandle3.Init.WordLength = UART_WORDLENGTH_8B;
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <uartInit+0x84>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
	UartHandle3.Init.StopBits = UART_STOPBITS_1;
 800191e:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <uartInit+0x84>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
	UartHandle3.Init.Parity = UART_PARITY_NONE;
 8001924:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <uartInit+0x84>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
	UartHandle3.Init.Mode = UART_MODE_TX_RX;
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <uartInit+0x84>)
 800192c:	220c      	movs	r2, #12
 800192e:	615a      	str	r2, [r3, #20]
	UartHandle3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001930:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <uartInit+0x84>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
	UartHandle3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <uartInit+0x84>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle3) != HAL_OK) {
 800193c:	4811      	ldr	r0, [pc, #68]	@ (8001984 <uartInit+0x84>)
 800193e:	f001 feb3 	bl	80036a8 <HAL_UART_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <uartInit+0x54>
		write_error_flag(true);
 8001948:	2001      	movs	r0, #1
 800194a:	f002 fc55 	bl	80041f8 <write_error_flag>
		isConnectionSuccesfull = false;
 800194e:	2300      	movs	r3, #0
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	e011      	b.n	8001978 <uartInit+0x78>

	} else {
		printUARTConfiguration(UartHandle3); // If the serial conection is successful, print uart configuration
 8001954:	4e0b      	ldr	r6, [pc, #44]	@ (8001984 <uartInit+0x84>)
 8001956:	466d      	mov	r5, sp
 8001958:	f106 0410 	add.w	r4, r6, #16
 800195c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001968:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001970:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001974:	f000 f850 	bl	8001a18 <printUARTConfiguration>
	}
	return isConnectionSuccesfull;
 8001978:	79fb      	ldrb	r3, [r7, #7]
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001982:	bf00      	nop
 8001984:	200001b0 	.word	0x200001b0
 8001988:	40004800 	.word	0x40004800

0800198c <uartSendString>:

void uartSendString(uint8_t *pstring) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	if (pstring == NULL) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <uartSendString+0x28>
		write_error_flag(true);
 800199a:	2001      	movs	r0, #1
 800199c:	f002 fc2c 	bl	80041f8 <write_error_flag>
	}
	while (*pstring != '\0') {
 80019a0:	e008      	b.n	80019b4 <uartSendString+0x28>
		HAL_UART_Transmit(&UartHandle3, pstring++, 1, HAL_MAX_DELAY); // Prints character by character through serial port
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	1c4b      	adds	r3, r1, #1
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	2201      	movs	r2, #1
 80019ae:	4806      	ldr	r0, [pc, #24]	@ (80019c8 <uartSendString+0x3c>)
 80019b0:	f001 feca 	bl	8003748 <HAL_UART_Transmit>
	while (*pstring != '\0') {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f2      	bne.n	80019a2 <uartSendString+0x16>
	}
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200001b0 	.word	0x200001b0

080019cc <uartReceiveStringSize>:
	for (uint16_t i = 0; i < size; i++) {
		HAL_UART_Transmit(&UartHandle3, pstring++, 1, HAL_MAX_DELAY); // Prints character by character up to user-defined length through serial port
	}
}

void uartReceiveStringSize(uint8_t *pString, uint16_t size) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&UartHandle3, pString, size, HAL_MAX_DELAY);
 80019d8:	887a      	ldrh	r2, [r7, #2]
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4803      	ldr	r0, [pc, #12]	@ (80019f0 <uartReceiveStringSize+0x24>)
 80019e2:	f001 ff3c 	bl	800385e <HAL_UART_Receive>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200001b0 	.word	0x200001b0

080019f4 <__io_putchar>:

// Function to redirect the standar output to the usart module
PUTCHAR_PROTOTYPE {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UartHandle3, (uint8_t*) &ch, 1, 0xFFFF);
 80019fc:	1d39      	adds	r1, r7, #4
 80019fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a02:	2201      	movs	r2, #1
 8001a04:	4803      	ldr	r0, [pc, #12]	@ (8001a14 <__io_putchar+0x20>)
 8001a06:	f001 fe9f 	bl	8003748 <HAL_UART_Transmit>

	return ch;
 8001a0a:	687b      	ldr	r3, [r7, #4]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200001b0 	.word	0x200001b0

08001a18 <printUARTConfiguration>:

static void printUARTConfiguration(UART_HandleTypeDef UartHandle) {
 8001a18:	b084      	sub	sp, #16
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	f107 0c08 	add.w	ip, r7, #8
 8001a22:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// print configuration parameters through serial terminal
	printf("\rConfiguracion del UART:\n");
 8001a26:	482a      	ldr	r0, [pc, #168]	@ (8001ad0 <printUARTConfiguration+0xb8>)
 8001a28:	f002 fd40 	bl	80044ac <puts>
	printf("\rBaudRate: %lu\n", UartHandle.Init.BaudRate);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4828      	ldr	r0, [pc, #160]	@ (8001ad4 <printUARTConfiguration+0xbc>)
 8001a32:	f002 fcd3 	bl	80043dc <iprintf>
	printf("\rWordLength: %d bits\n",
			(UartHandle.Init.WordLength == UART_WORDLENGTH_8B) ? 8 : 9);
 8001a36:	693b      	ldr	r3, [r7, #16]
	printf("\rWordLength: %d bits\n",
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <printUARTConfiguration+0x28>
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	e000      	b.n	8001a42 <printUARTConfiguration+0x2a>
 8001a40:	2309      	movs	r3, #9
 8001a42:	4619      	mov	r1, r3
 8001a44:	4824      	ldr	r0, [pc, #144]	@ (8001ad8 <printUARTConfiguration+0xc0>)
 8001a46:	f002 fcc9 	bl	80043dc <iprintf>
	printf("\rStopBits: %s\n",
			(UartHandle.Init.StopBits == UART_STOPBITS_1) ? "1 bit" : "2 bits");
 8001a4a:	697b      	ldr	r3, [r7, #20]
	printf("\rStopBits: %s\n",
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <printUARTConfiguration+0x3c>
 8001a50:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <printUARTConfiguration+0xc4>)
 8001a52:	e000      	b.n	8001a56 <printUARTConfiguration+0x3e>
 8001a54:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <printUARTConfiguration+0xc8>)
 8001a56:	4619      	mov	r1, r3
 8001a58:	4822      	ldr	r0, [pc, #136]	@ (8001ae4 <printUARTConfiguration+0xcc>)
 8001a5a:	f002 fcbf 	bl	80043dc <iprintf>
	printf("\rParity: %s\n",
			(UartHandle.Init.Parity == UART_PARITY_NONE) ? "Ninguno" :
 8001a5e:	69bb      	ldr	r3, [r7, #24]
	printf("\rParity: %s\n",
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <printUARTConfiguration+0x5c>
			(UartHandle.Init.Parity == UART_PARITY_EVEN) ? "Par" : "Impar");
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6a:	d101      	bne.n	8001a70 <printUARTConfiguration+0x58>
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <printUARTConfiguration+0xd0>)
 8001a6e:	e002      	b.n	8001a76 <printUARTConfiguration+0x5e>
 8001a70:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <printUARTConfiguration+0xd4>)
 8001a72:	e000      	b.n	8001a76 <printUARTConfiguration+0x5e>
	printf("\rParity: %s\n",
 8001a74:	4b1e      	ldr	r3, [pc, #120]	@ (8001af0 <printUARTConfiguration+0xd8>)
 8001a76:	4619      	mov	r1, r3
 8001a78:	481e      	ldr	r0, [pc, #120]	@ (8001af4 <printUARTConfiguration+0xdc>)
 8001a7a:	f002 fcaf 	bl	80043dc <iprintf>
	printf("\rControl de flujo: %s\n",
			(UartHandle.Init.HwFlowCtl == UART_HWCONTROL_NONE) ?
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
	printf("\rControl de flujo: %s\n",
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <printUARTConfiguration+0x70>
 8001a84:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <printUARTConfiguration+0xe0>)
 8001a86:	e000      	b.n	8001a8a <printUARTConfiguration+0x72>
 8001a88:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <printUARTConfiguration+0xe4>)
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	481c      	ldr	r0, [pc, #112]	@ (8001b00 <printUARTConfiguration+0xe8>)
 8001a8e:	f002 fca5 	bl	80043dc <iprintf>
					"Deshabilitado" : "Habilitado");
	printf("\rModo: %s\n",
			(UartHandle.Init.Mode == UART_MODE_TX) ? "Transmision" :
 8001a92:	69fb      	ldr	r3, [r7, #28]
	printf("\rModo: %s\n",
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d006      	beq.n	8001aa6 <printUARTConfiguration+0x8e>
			(UartHandle.Init.Mode == UART_MODE_RX) ?
 8001a98:	69fb      	ldr	r3, [r7, #28]
					"Recepcion" : "Transmision y Recepcion");
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d101      	bne.n	8001aa2 <printUARTConfiguration+0x8a>
 8001a9e:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <printUARTConfiguration+0xec>)
 8001aa0:	e002      	b.n	8001aa8 <printUARTConfiguration+0x90>
 8001aa2:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <printUARTConfiguration+0xf0>)
 8001aa4:	e000      	b.n	8001aa8 <printUARTConfiguration+0x90>
	printf("\rModo: %s\n",
 8001aa6:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <printUARTConfiguration+0xf4>)
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4819      	ldr	r0, [pc, #100]	@ (8001b10 <printUARTConfiguration+0xf8>)
 8001aac:	f002 fc96 	bl	80043dc <iprintf>
	printf("\rOversampling: %d\n",
			(UartHandle.Init.OverSampling == UART_OVERSAMPLING_16) ? 16 : 8);
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	printf("\rOversampling: %d\n",
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <printUARTConfiguration+0xa2>
 8001ab6:	2310      	movs	r3, #16
 8001ab8:	e000      	b.n	8001abc <printUARTConfiguration+0xa4>
 8001aba:	2308      	movs	r3, #8
 8001abc:	4619      	mov	r1, r3
 8001abe:	4815      	ldr	r0, [pc, #84]	@ (8001b14 <printUARTConfiguration+0xfc>)
 8001ac0:	f002 fc8c 	bl	80043dc <iprintf>
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001acc:	b004      	add	sp, #16
 8001ace:	4770      	bx	lr
 8001ad0:	080064bc 	.word	0x080064bc
 8001ad4:	080064d8 	.word	0x080064d8
 8001ad8:	080064e8 	.word	0x080064e8
 8001adc:	08006500 	.word	0x08006500
 8001ae0:	08006508 	.word	0x08006508
 8001ae4:	08006510 	.word	0x08006510
 8001ae8:	08006520 	.word	0x08006520
 8001aec:	08006524 	.word	0x08006524
 8001af0:	0800652c 	.word	0x0800652c
 8001af4:	08006534 	.word	0x08006534
 8001af8:	08006544 	.word	0x08006544
 8001afc:	08006554 	.word	0x08006554
 8001b00:	08006560 	.word	0x08006560
 8001b04:	08006578 	.word	0x08006578
 8001b08:	08006584 	.word	0x08006584
 8001b0c:	0800659c 	.word	0x0800659c
 8001b10:	080065a8 	.word	0x080065a8
 8001b14:	080065b4 	.word	0x080065b4

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f931 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff f9de 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f93b 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 f911 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	@ (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	2000000c 	.word	0x2000000c
 8001bb8:	20000008 	.word	0x20000008

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	200001f8 	.word	0x200001f8

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	@ (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200001f8 	.word	0x200001f8

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <HAL_Delay+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000000c 	.word	0x2000000c

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	@ (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	@ (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	@ 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	@ 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff47 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff5c 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff8e 	bl	8001cfc <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5d 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffb0 	bl	8001d64 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	@ 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e177      	b.n	800211c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 8166 	bne.w	8002116 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d005      	beq.n	8001e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d130      	bne.n	8001ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0201 	and.w	r2, r3, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d017      	beq.n	8001f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d123      	bne.n	8001f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0203 	and.w	r2, r3, #3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80c0 	beq.w	8002116 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b66      	ldr	r3, [pc, #408]	@ (8002134 <HAL_GPIO_Init+0x324>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	4a65      	ldr	r2, [pc, #404]	@ (8002134 <HAL_GPIO_Init+0x324>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa6:	4b63      	ldr	r3, [pc, #396]	@ (8002134 <HAL_GPIO_Init+0x324>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb2:	4a61      	ldr	r2, [pc, #388]	@ (8002138 <HAL_GPIO_Init+0x328>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a58      	ldr	r2, [pc, #352]	@ (800213c <HAL_GPIO_Init+0x32c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d037      	beq.n	800204e <HAL_GPIO_Init+0x23e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a57      	ldr	r2, [pc, #348]	@ (8002140 <HAL_GPIO_Init+0x330>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d031      	beq.n	800204a <HAL_GPIO_Init+0x23a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a56      	ldr	r2, [pc, #344]	@ (8002144 <HAL_GPIO_Init+0x334>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d02b      	beq.n	8002046 <HAL_GPIO_Init+0x236>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a55      	ldr	r2, [pc, #340]	@ (8002148 <HAL_GPIO_Init+0x338>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d025      	beq.n	8002042 <HAL_GPIO_Init+0x232>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a54      	ldr	r2, [pc, #336]	@ (800214c <HAL_GPIO_Init+0x33c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <HAL_GPIO_Init+0x22e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a53      	ldr	r2, [pc, #332]	@ (8002150 <HAL_GPIO_Init+0x340>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0x22a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a52      	ldr	r2, [pc, #328]	@ (8002154 <HAL_GPIO_Init+0x344>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0x226>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a51      	ldr	r2, [pc, #324]	@ (8002158 <HAL_GPIO_Init+0x348>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_Init+0x222>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a50      	ldr	r2, [pc, #320]	@ (800215c <HAL_GPIO_Init+0x34c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x21e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4f      	ldr	r2, [pc, #316]	@ (8002160 <HAL_GPIO_Init+0x350>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_Init+0x21a>
 8002026:	2309      	movs	r3, #9
 8002028:	e012      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800202a:	230a      	movs	r3, #10
 800202c:	e010      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800202e:	2308      	movs	r3, #8
 8002030:	e00e      	b.n	8002050 <HAL_GPIO_Init+0x240>
 8002032:	2307      	movs	r3, #7
 8002034:	e00c      	b.n	8002050 <HAL_GPIO_Init+0x240>
 8002036:	2306      	movs	r3, #6
 8002038:	e00a      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800203a:	2305      	movs	r3, #5
 800203c:	e008      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800203e:	2304      	movs	r3, #4
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x240>
 8002042:	2303      	movs	r3, #3
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x240>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800204e:	2300      	movs	r3, #0
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	f002 0203 	and.w	r2, r2, #3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002060:	4935      	ldr	r1, [pc, #212]	@ (8002138 <HAL_GPIO_Init+0x328>)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b3d      	ldr	r3, [pc, #244]	@ (8002164 <HAL_GPIO_Init+0x354>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002092:	4a34      	ldr	r2, [pc, #208]	@ (8002164 <HAL_GPIO_Init+0x354>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002098:	4b32      	ldr	r3, [pc, #200]	@ (8002164 <HAL_GPIO_Init+0x354>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020bc:	4a29      	ldr	r2, [pc, #164]	@ (8002164 <HAL_GPIO_Init+0x354>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c2:	4b28      	ldr	r3, [pc, #160]	@ (8002164 <HAL_GPIO_Init+0x354>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002164 <HAL_GPIO_Init+0x354>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <HAL_GPIO_Init+0x354>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <HAL_GPIO_Init+0x354>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3301      	adds	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b0f      	cmp	r3, #15
 8002120:	f67f ae84 	bls.w	8001e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3724      	adds	r7, #36	@ 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40022000 	.word	0x40022000
 8002160:	40022400 	.word	0x40022400
 8002164:	40013c00 	.word	0x40013c00

08002168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e001      	b.n	800218a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
 80021a4:	4613      	mov	r3, r2
 80021a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a8:	787b      	ldrb	r3, [r7, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b4:	e003      	b.n	80021be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	041a      	lsls	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	619a      	str	r2, [r3, #24]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e267      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d075      	beq.n	80022d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ea:	4b88      	ldr	r3, [pc, #544]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d00c      	beq.n	8002210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f6:	4b85      	ldr	r3, [pc, #532]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d112      	bne.n	8002228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002202:	4b82      	ldr	r3, [pc, #520]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800220e:	d10b      	bne.n	8002228 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	4b7e      	ldr	r3, [pc, #504]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d05b      	beq.n	80022d4 <HAL_RCC_OscConfig+0x108>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d157      	bne.n	80022d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e242      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002230:	d106      	bne.n	8002240 <HAL_RCC_OscConfig+0x74>
 8002232:	4b76      	ldr	r3, [pc, #472]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a75      	ldr	r2, [pc, #468]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e01d      	b.n	800227c <HAL_RCC_OscConfig+0xb0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x98>
 800224a:	4b70      	ldr	r3, [pc, #448]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6f      	ldr	r2, [pc, #444]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b6d      	ldr	r3, [pc, #436]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6c      	ldr	r2, [pc, #432]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0xb0>
 8002264:	4b69      	ldr	r3, [pc, #420]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a68      	ldr	r2, [pc, #416]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800226a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b66      	ldr	r3, [pc, #408]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a65      	ldr	r2, [pc, #404]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800227a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d013      	beq.n	80022ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fcae 	bl	8001be4 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fcaa 	bl	8001be4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	@ 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e207      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b5b      	ldr	r3, [pc, #364]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0xc0>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fc9a 	bl	8001be4 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff fc96 	bl	8001be4 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	@ 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e1f3      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	4b51      	ldr	r3, [pc, #324]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0xe8>
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d063      	beq.n	80023aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022e2:	4b4a      	ldr	r3, [pc, #296]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ee:	4b47      	ldr	r3, [pc, #284]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d11c      	bne.n	8002334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fa:	4b44      	ldr	r3, [pc, #272]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d116      	bne.n	8002334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	4b41      	ldr	r3, [pc, #260]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_RCC_OscConfig+0x152>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e1c7      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4b3b      	ldr	r3, [pc, #236]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4937      	ldr	r1, [pc, #220]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	e03a      	b.n	80023aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233c:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <HAL_RCC_OscConfig+0x244>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7ff fc4f 	bl	8001be4 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234a:	f7ff fc4b 	bl	8001be4 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1a8      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b28      	ldr	r3, [pc, #160]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4925      	ldr	r1, [pc, #148]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
 800237c:	e015      	b.n	80023aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237e:	4b24      	ldr	r3, [pc, #144]	@ (8002410 <HAL_RCC_OscConfig+0x244>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff fc2e 	bl	8001be4 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238c:	f7ff fc2a 	bl	8001be4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e187      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	4b1b      	ldr	r3, [pc, #108]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d036      	beq.n	8002424 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d016      	beq.n	80023ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HAL_RCC_OscConfig+0x248>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7ff fc0e 	bl	8001be4 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023cc:	f7ff fc0a 	bl	8001be4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e167      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80023e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x200>
 80023ea:	e01b      	b.n	8002424 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <HAL_RCC_OscConfig+0x248>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fbf7 	bl	8001be4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f8:	e00e      	b.n	8002418 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fa:	f7ff fbf3 	bl	8001be4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d907      	bls.n	8002418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e150      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
 800240c:	40023800 	.word	0x40023800
 8002410:	42470000 	.word	0x42470000
 8002414:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	4b88      	ldr	r3, [pc, #544]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 800241a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1ea      	bne.n	80023fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8097 	beq.w	8002560 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002436:	4b81      	ldr	r3, [pc, #516]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10f      	bne.n	8002462 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b7d      	ldr	r3, [pc, #500]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	4a7c      	ldr	r2, [pc, #496]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	@ 0x40
 8002452:	4b7a      	ldr	r3, [pc, #488]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b77      	ldr	r3, [pc, #476]	@ (8002640 <HAL_RCC_OscConfig+0x474>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b74      	ldr	r3, [pc, #464]	@ (8002640 <HAL_RCC_OscConfig+0x474>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a73      	ldr	r2, [pc, #460]	@ (8002640 <HAL_RCC_OscConfig+0x474>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7ff fbb3 	bl	8001be4 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7ff fbaf 	bl	8001be4 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e10c      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b6a      	ldr	r3, [pc, #424]	@ (8002640 <HAL_RCC_OscConfig+0x474>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2ea>
 80024a8:	4b64      	ldr	r3, [pc, #400]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	4a63      	ldr	r2, [pc, #396]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b4:	e01c      	b.n	80024f0 <HAL_RCC_OscConfig+0x324>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x30c>
 80024be:	4b5f      	ldr	r3, [pc, #380]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c2:	4a5e      	ldr	r2, [pc, #376]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ca:	4b5c      	ldr	r3, [pc, #368]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ce:	4a5b      	ldr	r2, [pc, #364]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0x324>
 80024d8:	4b58      	ldr	r3, [pc, #352]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024dc:	4a57      	ldr	r2, [pc, #348]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e4:	4b55      	ldr	r3, [pc, #340]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e8:	4a54      	ldr	r2, [pc, #336]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024ea:	f023 0304 	bic.w	r3, r3, #4
 80024ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d015      	beq.n	8002524 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7ff fb74 	bl	8001be4 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7ff fb70 	bl	8001be4 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0cb      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002516:	4b49      	ldr	r3, [pc, #292]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0ee      	beq.n	8002500 <HAL_RCC_OscConfig+0x334>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7ff fb5e 	bl	8001be4 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7ff fb5a 	bl	8001be4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0b5      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002542:	4b3e      	ldr	r3, [pc, #248]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1ee      	bne.n	800252c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002554:	4b39      	ldr	r3, [pc, #228]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	4a38      	ldr	r2, [pc, #224]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 800255a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800255e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a1 	beq.w	80026ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800256a:	4b34      	ldr	r3, [pc, #208]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b08      	cmp	r3, #8
 8002574:	d05c      	beq.n	8002630 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d141      	bne.n	8002602 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	4b31      	ldr	r3, [pc, #196]	@ (8002644 <HAL_RCC_OscConfig+0x478>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fb2e 	bl	8001be4 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258c:	f7ff fb2a 	bl	8001be4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e087      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	4b27      	ldr	r3, [pc, #156]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	019b      	lsls	r3, r3, #6
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	3b01      	subs	r3, #1
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	491b      	ldr	r1, [pc, #108]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002644 <HAL_RCC_OscConfig+0x478>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7ff fb03 	bl	8001be4 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e2:	f7ff faff 	bl	8001be4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e05c      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x416>
 8002600:	e054      	b.n	80026ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_RCC_OscConfig+0x478>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7ff faec 	bl	8001be4 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002610:	f7ff fae8 	bl	8001be4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e045      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x444>
 800262e:	e03d      	b.n	80026ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d107      	bne.n	8002648 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e038      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
 800263c:	40023800 	.word	0x40023800
 8002640:	40007000 	.word	0x40007000
 8002644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002648:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <HAL_RCC_OscConfig+0x4ec>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d028      	beq.n	80026a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d121      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d11a      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002678:	4013      	ands	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800267e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002680:	4293      	cmp	r3, r2
 8002682:	d111      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	3b01      	subs	r3, #1
 8002692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800

080026bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0cc      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b68      	ldr	r3, [pc, #416]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d90c      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b65      	ldr	r3, [pc, #404]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b63      	ldr	r3, [pc, #396]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b8      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a58      	ldr	r2, [pc, #352]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800271a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b53      	ldr	r3, [pc, #332]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a52      	ldr	r2, [pc, #328]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b50      	ldr	r3, [pc, #320]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494d      	ldr	r1, [pc, #308]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d044      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d119      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d003      	beq.n	800277a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002776:	2b03      	cmp	r3, #3
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b3f      	ldr	r3, [pc, #252]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e06f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3b      	ldr	r3, [pc, #236]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e067      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b37      	ldr	r3, [pc, #220]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4934      	ldr	r1, [pc, #208]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7ff fa1a 	bl	8001be4 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7ff fa16 	bl	8001be4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e04f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d20c      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e032      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4916      	ldr	r1, [pc, #88]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490e      	ldr	r1, [pc, #56]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f821 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	490a      	ldr	r1, [pc, #40]	@ (800287c <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	4a09      	ldr	r2, [pc, #36]	@ (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800285e:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f97a 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023c00 	.word	0x40023c00
 8002878:	40023800 	.word	0x40023800
 800287c:	080065c8 	.word	0x080065c8
 8002880:	20000000 	.word	0x20000000
 8002884:	20000008 	.word	0x20000008

08002888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800288c:	b094      	sub	sp, #80	@ 0x50
 800288e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	647b      	str	r3, [r7, #68]	@ 0x44
 8002894:	2300      	movs	r3, #0
 8002896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002898:	2300      	movs	r3, #0
 800289a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a0:	4b79      	ldr	r3, [pc, #484]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d00d      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x40>
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	f200 80e1 	bhi.w	8002a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x34>
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d003      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ba:	e0db      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b73      	ldr	r3, [pc, #460]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80028be:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80028c0:	e0db      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c2:	4b73      	ldr	r3, [pc, #460]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80028c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028c6:	e0d8      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d063      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028de:	4b6a      	ldr	r3, [pc, #424]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	099b      	lsrs	r3, r3, #6
 80028e4:	2200      	movs	r2, #0
 80028e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028f2:	2300      	movs	r3, #0
 80028f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028fa:	4622      	mov	r2, r4
 80028fc:	462b      	mov	r3, r5
 80028fe:	f04f 0000 	mov.w	r0, #0
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	0159      	lsls	r1, r3, #5
 8002908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290c:	0150      	lsls	r0, r2, #5
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4621      	mov	r1, r4
 8002914:	1a51      	subs	r1, r2, r1
 8002916:	6139      	str	r1, [r7, #16]
 8002918:	4629      	mov	r1, r5
 800291a:	eb63 0301 	sbc.w	r3, r3, r1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800292c:	4659      	mov	r1, fp
 800292e:	018b      	lsls	r3, r1, #6
 8002930:	4651      	mov	r1, sl
 8002932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002936:	4651      	mov	r1, sl
 8002938:	018a      	lsls	r2, r1, #6
 800293a:	4651      	mov	r1, sl
 800293c:	ebb2 0801 	subs.w	r8, r2, r1
 8002940:	4659      	mov	r1, fp
 8002942:	eb63 0901 	sbc.w	r9, r3, r1
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800295a:	4690      	mov	r8, r2
 800295c:	4699      	mov	r9, r3
 800295e:	4623      	mov	r3, r4
 8002960:	eb18 0303 	adds.w	r3, r8, r3
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	462b      	mov	r3, r5
 8002968:	eb49 0303 	adc.w	r3, r9, r3
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800297a:	4629      	mov	r1, r5
 800297c:	024b      	lsls	r3, r1, #9
 800297e:	4621      	mov	r1, r4
 8002980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002984:	4621      	mov	r1, r4
 8002986:	024a      	lsls	r2, r1, #9
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800298e:	2200      	movs	r2, #0
 8002990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002998:	f7fe f936 	bl	8000c08 <__aeabi_uldivmod>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4613      	mov	r3, r2
 80029a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029a4:	e058      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a6:	4b38      	ldr	r3, [pc, #224]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	099b      	lsrs	r3, r3, #6
 80029ac:	2200      	movs	r2, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	4611      	mov	r1, r2
 80029b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029b6:	623b      	str	r3, [r7, #32]
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80029bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029c0:	4642      	mov	r2, r8
 80029c2:	464b      	mov	r3, r9
 80029c4:	f04f 0000 	mov.w	r0, #0
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	0159      	lsls	r1, r3, #5
 80029ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d2:	0150      	lsls	r0, r2, #5
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4641      	mov	r1, r8
 80029da:	ebb2 0a01 	subs.w	sl, r2, r1
 80029de:	4649      	mov	r1, r9
 80029e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029f8:	ebb2 040a 	subs.w	r4, r2, sl
 80029fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	00eb      	lsls	r3, r5, #3
 8002a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a0e:	00e2      	lsls	r2, r4, #3
 8002a10:	4614      	mov	r4, r2
 8002a12:	461d      	mov	r5, r3
 8002a14:	4643      	mov	r3, r8
 8002a16:	18e3      	adds	r3, r4, r3
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	eb45 0303 	adc.w	r3, r5, r3
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a2e:	4629      	mov	r1, r5
 8002a30:	028b      	lsls	r3, r1, #10
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a38:	4621      	mov	r1, r4
 8002a3a:	028a      	lsls	r2, r1, #10
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a42:	2200      	movs	r2, #0
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	61fa      	str	r2, [r7, #28]
 8002a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a4c:	f7fe f8dc 	bl	8000c08 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	3301      	adds	r3, #1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002a68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3750      	adds	r7, #80	@ 0x50
 8002a80:	46bd      	mov	sp, r7
 8002a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	007a1200 	.word	0x007a1200

08002a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000000 	.word	0x20000000

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4903      	ldr	r1, [pc, #12]	@ (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	080065d8 	.word	0x080065d8

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	@ (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	080065d8 	.word	0x080065d8

08002afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07b      	b.n	8002c06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d108      	bne.n	8002b28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b1e:	d009      	beq.n	8002b34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
 8002b26:	e005      	b.n	8002b34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe fa04 	bl	8000f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb8:	ea42 0103 	orr.w	r1, r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	f003 0104 	and.w	r1, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	f003 0210 	and.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b088      	sub	sp, #32
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_SPI_Transmit+0x22>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e12d      	b.n	8002e8c <HAL_SPI_Transmit+0x27e>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c38:	f7fe ffd4 	bl	8001be4 <HAL_GetTick>
 8002c3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d002      	beq.n	8002c54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c52:	e116      	b.n	8002e82 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_SPI_Transmit+0x52>
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c64:	e10d      	b.n	8002e82 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2203      	movs	r2, #3
 8002c6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	88fa      	ldrh	r2, [r7, #6]
 8002c7e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cac:	d10f      	bne.n	8002cce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ccc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd8:	2b40      	cmp	r3, #64	@ 0x40
 8002cda:	d007      	beq.n	8002cec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cf4:	d14f      	bne.n	8002d96 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_SPI_Transmit+0xf6>
 8002cfe:	8afb      	ldrh	r3, [r7, #22]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d142      	bne.n	8002d8a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d14:	1c9a      	adds	r2, r3, #2
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d28:	e02f      	b.n	8002d8a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d112      	bne.n	8002d5e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3c:	881a      	ldrh	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	1c9a      	adds	r2, r3, #2
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d5c:	e015      	b.n	8002d8a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5e:	f7fe ff41 	bl	8001be4 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d803      	bhi.n	8002d76 <HAL_SPI_Transmit+0x168>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d102      	bne.n	8002d7c <HAL_SPI_Transmit+0x16e>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002d88:	e07b      	b.n	8002e82 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ca      	bne.n	8002d2a <HAL_SPI_Transmit+0x11c>
 8002d94:	e050      	b.n	8002e38 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_Transmit+0x196>
 8002d9e:	8afb      	ldrh	r3, [r7, #22]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d144      	bne.n	8002e2e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	7812      	ldrb	r2, [r2, #0]
 8002db0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002dca:	e030      	b.n	8002e2e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d113      	bne.n	8002e02 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	330c      	adds	r3, #12
 8002de4:	7812      	ldrb	r2, [r2, #0]
 8002de6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e00:	e015      	b.n	8002e2e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e02:	f7fe feef 	bl	8001be4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d803      	bhi.n	8002e1a <HAL_SPI_Transmit+0x20c>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d102      	bne.n	8002e20 <HAL_SPI_Transmit+0x212>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d106      	bne.n	8002e2e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002e2c:	e029      	b.n	8002e82 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1c9      	bne.n	8002dcc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	6839      	ldr	r1, [r7, #0]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fbdf 	bl	8003600 <SPI_EndRxTxTransaction>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	77fb      	strb	r3, [r7, #31]
 8002e78:	e003      	b.n	8002e82 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002e8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d002      	beq.n	8002eba <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eb8:	e0fb      	b.n	80030b2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ec2:	d112      	bne.n	8002eea <HAL_SPI_Receive+0x56>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10e      	bne.n	8002eea <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ed4:	88fa      	ldrh	r2, [r7, #6]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	4613      	mov	r3, r2
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f8ef 	bl	80030c4 <HAL_SPI_TransmitReceive>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	e0e8      	b.n	80030bc <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_SPI_Receive+0x64>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0e1      	b.n	80030bc <HAL_SPI_Receive+0x228>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f00:	f7fe fe70 	bl	8001be4 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SPI_Receive+0x7e>
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f16:	e0cc      	b.n	80030b2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f5e:	d10f      	bne.n	8002f80 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8a:	2b40      	cmp	r3, #64	@ 0x40
 8002f8c:	d007      	beq.n	8002f9e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d16a      	bne.n	800307c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fa6:	e032      	b.n	800300e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d115      	bne.n	8002fe2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f103 020c 	add.w	r2, r3, #12
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc2:	7812      	ldrb	r2, [r2, #0]
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fe0:	e015      	b.n	800300e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe2:	f7fe fdff 	bl	8001be4 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d803      	bhi.n	8002ffa <HAL_SPI_Receive+0x166>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d102      	bne.n	8003000 <HAL_SPI_Receive+0x16c>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800300c:	e051      	b.n	80030b2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1c7      	bne.n	8002fa8 <HAL_SPI_Receive+0x114>
 8003018:	e035      	b.n	8003086 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d113      	bne.n	8003050 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003032:	b292      	uxth	r2, r2
 8003034:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303a:	1c9a      	adds	r2, r3, #2
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800304e:	e015      	b.n	800307c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003050:	f7fe fdc8 	bl	8001be4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d803      	bhi.n	8003068 <HAL_SPI_Receive+0x1d4>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d102      	bne.n	800306e <HAL_SPI_Receive+0x1da>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800307a:	e01a      	b.n	80030b2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1c9      	bne.n	800301a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fa52 	bl	8003534 <SPI_EndRxTransaction>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
 80030a8:	e003      	b.n	80030b2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	@ 0x30
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030d2:	2301      	movs	r3, #1
 80030d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_SPI_TransmitReceive+0x26>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e198      	b.n	800341c <HAL_SPI_TransmitReceive+0x358>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030f2:	f7fe fd77 	bl	8001be4 <HAL_GetTick>
 80030f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003108:	887b      	ldrh	r3, [r7, #2]
 800310a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800310c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003110:	2b01      	cmp	r3, #1
 8003112:	d00f      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x70>
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800311a:	d107      	bne.n	800312c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d103      	bne.n	800312c <HAL_SPI_TransmitReceive+0x68>
 8003124:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003128:	2b04      	cmp	r3, #4
 800312a:	d003      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800312c:	2302      	movs	r3, #2
 800312e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003132:	e16d      	b.n	8003410 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_SPI_TransmitReceive+0x82>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_SPI_TransmitReceive+0x82>
 8003140:	887b      	ldrh	r3, [r7, #2]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800314c:	e160      	b.n	8003410 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b04      	cmp	r3, #4
 8003158:	d003      	beq.n	8003162 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2205      	movs	r2, #5
 800315e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	887a      	ldrh	r2, [r7, #2]
 8003172:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	887a      	ldrh	r2, [r7, #2]
 800318a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a2:	2b40      	cmp	r3, #64	@ 0x40
 80031a4:	d007      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031be:	d17c      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_SPI_TransmitReceive+0x10a>
 80031c8:	8b7b      	ldrh	r3, [r7, #26]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d16a      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	881a      	ldrh	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	1c9a      	adds	r2, r3, #2
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f2:	e057      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d11b      	bne.n	800323a <HAL_SPI_TransmitReceive+0x176>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d016      	beq.n	800323a <HAL_SPI_TransmitReceive+0x176>
 800320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d113      	bne.n	800323a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	1c9a      	adds	r2, r3, #2
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b01      	cmp	r3, #1
 8003246:	d119      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1b8>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d014      	beq.n	800327c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	b292      	uxth	r2, r2
 800325e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003264:	1c9a      	adds	r2, r3, #2
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003278:	2301      	movs	r3, #1
 800327a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800327c:	f7fe fcb2 	bl	8001be4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003288:	429a      	cmp	r2, r3
 800328a:	d80b      	bhi.n	80032a4 <HAL_SPI_TransmitReceive+0x1e0>
 800328c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d007      	beq.n	80032a4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80032a2:	e0b5      	b.n	8003410 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1a2      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x130>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d19d      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x130>
 80032b8:	e080      	b.n	80033bc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x204>
 80032c2:	8b7b      	ldrh	r3, [r7, #26]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d16f      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	7812      	ldrb	r2, [r2, #0]
 80032d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ee:	e05b      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d11c      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x274>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d017      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x274>
 8003308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330a:	2b01      	cmp	r3, #1
 800330c:	d114      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d119      	bne.n	800337a <HAL_SPI_TransmitReceive+0x2b6>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d014      	beq.n	800337a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003376:	2301      	movs	r3, #1
 8003378:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800337a:	f7fe fc33 	bl	8001be4 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003386:	429a      	cmp	r2, r3
 8003388:	d803      	bhi.n	8003392 <HAL_SPI_TransmitReceive+0x2ce>
 800338a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d102      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x2d4>
 8003392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003394:	2b00      	cmp	r3, #0
 8003396:	d107      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80033a6:	e033      	b.n	8003410 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d19e      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x22c>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d199      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f91d 	bl	8003600 <SPI_EndRxTxTransaction>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80033d8:	e01a      	b.n	8003410 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003406:	e003      	b.n	8003410 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003418:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800341c:	4618      	mov	r0, r3
 800341e:	3730      	adds	r7, #48	@ 0x30
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003434:	f7fe fbd6 	bl	8001be4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	4413      	add	r3, r2
 8003442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003444:	f7fe fbce 	bl	8001be4 <HAL_GetTick>
 8003448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800344a:	4b39      	ldr	r3, [pc, #228]	@ (8003530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	015b      	lsls	r3, r3, #5
 8003450:	0d1b      	lsrs	r3, r3, #20
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345a:	e054      	b.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d050      	beq.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003464:	f7fe fbbe 	bl	8001be4 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	429a      	cmp	r2, r3
 8003472:	d902      	bls.n	800347a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d13d      	bne.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003492:	d111      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349c:	d004      	beq.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a6:	d107      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c0:	d10f      	bne.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e017      	b.n	8003526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3b01      	subs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	429a      	cmp	r2, r3
 8003522:	d19b      	bne.n	800345c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000000 	.word	0x20000000

08003534 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003548:	d111      	bne.n	800356e <SPI_EndRxTransaction+0x3a>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003552:	d004      	beq.n	800355e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355c:	d107      	bne.n	800356e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003576:	d12a      	bne.n	80035ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003580:	d012      	beq.n	80035a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2200      	movs	r2, #0
 800358a:	2180      	movs	r1, #128	@ 0x80
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff ff49 	bl	8003424 <SPI_WaitFlagStateUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d02d      	beq.n	80035f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e026      	b.n	80035f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2200      	movs	r2, #0
 80035b0:	2101      	movs	r1, #1
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7ff ff36 	bl	8003424 <SPI_WaitFlagStateUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d01a      	beq.n	80035f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e013      	b.n	80035f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2101      	movs	r1, #1
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7ff ff23 	bl	8003424 <SPI_WaitFlagStateUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e000      	b.n	80035f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2201      	movs	r2, #1
 8003614:	2102      	movs	r1, #2
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff ff04 	bl	8003424 <SPI_WaitFlagStateUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003626:	f043 0220 	orr.w	r2, r3, #32
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e032      	b.n	8003698 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003632:	4b1b      	ldr	r3, [pc, #108]	@ (80036a0 <SPI_EndRxTxTransaction+0xa0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <SPI_EndRxTxTransaction+0xa4>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	0d5b      	lsrs	r3, r3, #21
 800363e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003650:	d112      	bne.n	8003678 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2200      	movs	r2, #0
 800365a:	2180      	movs	r1, #128	@ 0x80
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff fee1 	bl	8003424 <SPI_WaitFlagStateUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d016      	beq.n	8003696 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e00f      	b.n	8003698 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3b01      	subs	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368e:	2b80      	cmp	r3, #128	@ 0x80
 8003690:	d0f2      	beq.n	8003678 <SPI_EndRxTxTransaction+0x78>
 8003692:	e000      	b.n	8003696 <SPI_EndRxTxTransaction+0x96>
        break;
 8003694:	bf00      	nop
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000000 	.word	0x20000000
 80036a4:	165e9f81 	.word	0x165e9f81

080036a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e042      	b.n	8003740 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fcac 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	@ 0x24
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fa09 	bl	8003b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	@ 0x28
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b20      	cmp	r3, #32
 8003766:	d175      	bne.n	8003854 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_UART_Transmit+0x2c>
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e06e      	b.n	8003856 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2221      	movs	r2, #33	@ 0x21
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003786:	f7fe fa2d 	bl	8001be4 <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a0:	d108      	bne.n	80037b4 <HAL_UART_Transmit+0x6c>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	e003      	b.n	80037bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037bc:	e02e      	b.n	800381c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2180      	movs	r1, #128	@ 0x80
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f8df 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e03a      	b.n	8003856 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	3302      	adds	r3, #2
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	e007      	b.n	800380e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	781a      	ldrb	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	3301      	adds	r3, #1
 800380c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1cb      	bne.n	80037be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	2140      	movs	r1, #64	@ 0x40
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f8ab 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e006      	b.n	8003856 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b08a      	sub	sp, #40	@ 0x28
 8003862:	af02      	add	r7, sp, #8
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	f040 8081 	bne.w	8003982 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_UART_Receive+0x2e>
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e079      	b.n	8003984 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2222      	movs	r2, #34	@ 0x22
 800389a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038a4:	f7fe f99e 	bl	8001be4 <HAL_GetTick>
 80038a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038be:	d108      	bne.n	80038d2 <HAL_UART_Receive+0x74>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	e003      	b.n	80038da <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038da:	e047      	b.n	800396c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2200      	movs	r2, #0
 80038e4:	2120      	movs	r1, #32
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f850 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e042      	b.n	8003984 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10c      	bne.n	800391e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b29b      	uxth	r3, r3
 800390c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003910:	b29a      	uxth	r2, r3
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	3302      	adds	r3, #2
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	e01f      	b.n	800395e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003926:	d007      	beq.n	8003938 <HAL_UART_Receive+0xda>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <HAL_UART_Receive+0xe8>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d106      	bne.n	8003946 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	b2da      	uxtb	r2, r3
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e008      	b.n	8003958 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003952:	b2da      	uxtb	r2, r3
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	3301      	adds	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1b2      	bne.n	80038dc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003982:	2302      	movs	r3, #2
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399c:	e03b      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d037      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fe f91d 	bl	8001be4 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <UART_WaitOnFlagUntilTimeout+0x30>
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e03a      	b.n	8003a36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d023      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b80      	cmp	r3, #128	@ 0x80
 80039d2:	d020      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b40      	cmp	r3, #64	@ 0x40
 80039d8:	d01d      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d116      	bne.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f81d 	bl	8003a3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2208      	movs	r2, #8
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00f      	b.n	8003a36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	bf0c      	ite	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	2300      	movne	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d0b4      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b095      	sub	sp, #84	@ 0x54
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a66:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e5      	bne.n	8003a7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d119      	bne.n	8003aea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f023 0310 	bic.w	r3, r3, #16
 8003acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ad6:	61ba      	str	r2, [r7, #24]
 8003ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6979      	ldr	r1, [r7, #20]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003af8:	bf00      	nop
 8003afa:	3754      	adds	r7, #84	@ 0x54
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b0c0      	sub	sp, #256	@ 0x100
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	68d9      	ldr	r1, [r3, #12]
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	ea40 0301 	orr.w	r3, r0, r1
 8003b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b5c:	f021 010c 	bic.w	r1, r1, #12
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7e:	6999      	ldr	r1, [r3, #24]
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	ea40 0301 	orr.w	r3, r0, r1
 8003b8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b8f      	ldr	r3, [pc, #572]	@ (8003dd0 <UART_SetConfig+0x2cc>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d005      	beq.n	8003ba4 <UART_SetConfig+0xa0>
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8003dd4 <UART_SetConfig+0x2d0>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d104      	bne.n	8003bae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba4:	f7fe ff96 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8003ba8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bac:	e003      	b.n	8003bb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bae:	f7fe ff7d 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8003bb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc0:	f040 810c 	bne.w	8003ddc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	1891      	adds	r1, r2, r2
 8003bdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bde:	415b      	adcs	r3, r3
 8003be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003be6:	4621      	mov	r1, r4
 8003be8:	eb12 0801 	adds.w	r8, r2, r1
 8003bec:	4629      	mov	r1, r5
 8003bee:	eb43 0901 	adc.w	r9, r3, r1
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c06:	4690      	mov	r8, r2
 8003c08:	4699      	mov	r9, r3
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	eb18 0303 	adds.w	r3, r8, r3
 8003c10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c14:	462b      	mov	r3, r5
 8003c16:	eb49 0303 	adc.w	r3, r9, r3
 8003c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c32:	460b      	mov	r3, r1
 8003c34:	18db      	adds	r3, r3, r3
 8003c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c38:	4613      	mov	r3, r2
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c48:	f7fc ffde 	bl	8000c08 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4b61      	ldr	r3, [pc, #388]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003c52:	fba3 2302 	umull	r2, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	011c      	lsls	r4, r3, #4
 8003c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	1891      	adds	r1, r2, r2
 8003c72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c74:	415b      	adcs	r3, r3
 8003c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c82:	4649      	mov	r1, r9
 8003c84:	eb43 0b01 	adc.w	fp, r3, r1
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c9c:	4692      	mov	sl, r2
 8003c9e:	469b      	mov	fp, r3
 8003ca0:	4643      	mov	r3, r8
 8003ca2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003caa:	464b      	mov	r3, r9
 8003cac:	eb4b 0303 	adc.w	r3, fp, r3
 8003cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	18db      	adds	r3, r3, r3
 8003ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cce:	4613      	mov	r3, r2
 8003cd0:	eb42 0303 	adc.w	r3, r2, r3
 8003cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cde:	f7fc ff93 	bl	8000c08 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003cea:	fba3 2301 	umull	r2, r3, r3, r1
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2264      	movs	r2, #100	@ 0x64
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	1acb      	subs	r3, r1, r3
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cfe:	4b36      	ldr	r3, [pc, #216]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003d00:	fba3 2302 	umull	r2, r3, r3, r2
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d0c:	441c      	add	r4, r3
 8003d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	1891      	adds	r1, r2, r2
 8003d26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d30:	4641      	mov	r1, r8
 8003d32:	1851      	adds	r1, r2, r1
 8003d34:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d36:	4649      	mov	r1, r9
 8003d38:	414b      	adcs	r3, r1
 8003d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d48:	4659      	mov	r1, fp
 8003d4a:	00cb      	lsls	r3, r1, #3
 8003d4c:	4651      	mov	r1, sl
 8003d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d52:	4651      	mov	r1, sl
 8003d54:	00ca      	lsls	r2, r1, #3
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d64:	464b      	mov	r3, r9
 8003d66:	460a      	mov	r2, r1
 8003d68:	eb42 0303 	adc.w	r3, r2, r3
 8003d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d84:	460b      	mov	r3, r1
 8003d86:	18db      	adds	r3, r3, r3
 8003d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	eb42 0303 	adc.w	r3, r2, r3
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d9a:	f7fc ff35 	bl	8000c08 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	2164      	movs	r1, #100	@ 0x64
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	3332      	adds	r3, #50	@ 0x32
 8003db6:	4a08      	ldr	r2, [pc, #32]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	f003 0207 	and.w	r2, r3, #7
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4422      	add	r2, r4
 8003dca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dcc:	e106      	b.n	8003fdc <UART_SetConfig+0x4d8>
 8003dce:	bf00      	nop
 8003dd0:	40011000 	.word	0x40011000
 8003dd4:	40011400 	.word	0x40011400
 8003dd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003de6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dee:	4642      	mov	r2, r8
 8003df0:	464b      	mov	r3, r9
 8003df2:	1891      	adds	r1, r2, r2
 8003df4:	6239      	str	r1, [r7, #32]
 8003df6:	415b      	adcs	r3, r3
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dfe:	4641      	mov	r1, r8
 8003e00:	1854      	adds	r4, r2, r1
 8003e02:	4649      	mov	r1, r9
 8003e04:	eb43 0501 	adc.w	r5, r3, r1
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	00eb      	lsls	r3, r5, #3
 8003e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e16:	00e2      	lsls	r2, r4, #3
 8003e18:	4614      	mov	r4, r2
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	4643      	mov	r3, r8
 8003e1e:	18e3      	adds	r3, r4, r3
 8003e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e24:	464b      	mov	r3, r9
 8003e26:	eb45 0303 	adc.w	r3, r5, r3
 8003e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	008b      	lsls	r3, r1, #2
 8003e4e:	4621      	mov	r1, r4
 8003e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e54:	4621      	mov	r1, r4
 8003e56:	008a      	lsls	r2, r1, #2
 8003e58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e5c:	f7fc fed4 	bl	8000c08 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4b60      	ldr	r3, [pc, #384]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003e66:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	011c      	lsls	r4, r3, #4
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	61b9      	str	r1, [r7, #24]
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e90:	4641      	mov	r1, r8
 8003e92:	1851      	adds	r1, r2, r1
 8003e94:	6139      	str	r1, [r7, #16]
 8003e96:	4649      	mov	r1, r9
 8003e98:	414b      	adcs	r3, r1
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	00cb      	lsls	r3, r1, #3
 8003eac:	4651      	mov	r1, sl
 8003eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	00ca      	lsls	r2, r1, #3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ee8:	4649      	mov	r1, r9
 8003eea:	008b      	lsls	r3, r1, #2
 8003eec:	4641      	mov	r1, r8
 8003eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	008a      	lsls	r2, r1, #2
 8003ef6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003efa:	f7fc fe85 	bl	8000c08 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	4b38      	ldr	r3, [pc, #224]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003f06:	fba3 2301 	umull	r2, r3, r3, r1
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2264      	movs	r2, #100	@ 0x64
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	1acb      	subs	r3, r1, r3
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	3332      	adds	r3, #50	@ 0x32
 8003f18:	4a33      	ldr	r2, [pc, #204]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f24:	441c      	add	r4, r3
 8003f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f76:	464b      	mov	r3, r9
 8003f78:	460a      	mov	r2, r1
 8003f7a:	eb42 0303 	adc.w	r3, r2, r3
 8003f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f98:	4649      	mov	r1, r9
 8003f9a:	008b      	lsls	r3, r1, #2
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	008a      	lsls	r2, r1, #2
 8003fa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003faa:	f7fc fe2d 	bl	8000c08 <__aeabi_uldivmod>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	2164      	movs	r1, #100	@ 0x64
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	3332      	adds	r3, #50	@ 0x32
 8003fc6:	4a08      	ldr	r2, [pc, #32]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	f003 020f 	and.w	r2, r3, #15
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4422      	add	r2, r4
 8003fda:	609a      	str	r2, [r3, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe8:	51eb851f 	.word	0x51eb851f

08003fec <SystemClock_Config>:

/*
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b094      	sub	sp, #80	@ 0x50
 8003ff0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003ff2:	f107 0320 	add.w	r3, r7, #32
 8003ff6:	2230      	movs	r2, #48	@ 0x30
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fb56 	bl	80046ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	60da      	str	r2, [r3, #12]
 800400e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004010:	2300      	movs	r3, #0
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	4b29      	ldr	r3, [pc, #164]	@ (80040bc <SystemClock_Config+0xd0>)
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	4a28      	ldr	r2, [pc, #160]	@ (80040bc <SystemClock_Config+0xd0>)
 800401a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800401e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004020:	4b26      	ldr	r3, [pc, #152]	@ (80040bc <SystemClock_Config+0xd0>)
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800402c:	2300      	movs	r3, #0
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	4b23      	ldr	r3, [pc, #140]	@ (80040c0 <SystemClock_Config+0xd4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a22      	ldr	r2, [pc, #136]	@ (80040c0 <SystemClock_Config+0xd4>)
 8004036:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4b20      	ldr	r3, [pc, #128]	@ (80040c0 <SystemClock_Config+0xd4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004048:	2301      	movs	r3, #1
 800404a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800404c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004052:	2302      	movs	r3, #2
 8004054:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004056:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800405a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800405c:	2304      	movs	r3, #4
 800405e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8004060:	23a8      	movs	r3, #168	@ 0xa8
 8004062:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004064:	2302      	movs	r3, #2
 8004066:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004068:	2304      	movs	r3, #4
 800406a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800406c:	f107 0320 	add.w	r3, r7, #32
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe f8ab 	bl	80021cc <HAL_RCC_OscConfig>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <SystemClock_Config+0x96>
		write_error_flag(true);
 800407c:	2001      	movs	r0, #1
 800407e:	f000 f8bb 	bl	80041f8 <write_error_flag>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004082:	230f      	movs	r3, #15
 8004084:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004086:	2302      	movs	r3, #2
 8004088:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800408e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004092:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004094:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004098:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	2105      	movs	r1, #5
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe fb0b 	bl	80026bc <HAL_RCC_ClockConfig>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <SystemClock_Config+0xc6>
		write_error_flag(true);
 80040ac:	2001      	movs	r0, #1
 80040ae:	f000 f8a3 	bl	80041f8 <write_error_flag>
	}
}
 80040b2:	bf00      	nop
 80040b4:	3750      	adds	r7, #80	@ 0x50
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40007000 	.word	0x40007000

080040c4 <GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void GPIO_Init(void) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	@ 0x28
 80040c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80040ca:	f107 0314 	add.w	r3, r7, #20
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	605a      	str	r2, [r3, #4]
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	60da      	str	r2, [r3, #12]
 80040d8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	4b3c      	ldr	r3, [pc, #240]	@ (80041d0 <GPIO_Init+0x10c>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	4a3b      	ldr	r2, [pc, #236]	@ (80041d0 <GPIO_Init+0x10c>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ea:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <GPIO_Init+0x10c>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	4b35      	ldr	r3, [pc, #212]	@ (80041d0 <GPIO_Init+0x10c>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	4a34      	ldr	r2, [pc, #208]	@ (80041d0 <GPIO_Init+0x10c>)
 8004100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004104:	6313      	str	r3, [r2, #48]	@ 0x30
 8004106:	4b32      	ldr	r3, [pc, #200]	@ (80041d0 <GPIO_Init+0x10c>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	4b2e      	ldr	r3, [pc, #184]	@ (80041d0 <GPIO_Init+0x10c>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	4a2d      	ldr	r2, [pc, #180]	@ (80041d0 <GPIO_Init+0x10c>)
 800411c:	f043 0302 	orr.w	r3, r3, #2
 8004120:	6313      	str	r3, [r2, #48]	@ 0x30
 8004122:	4b2b      	ldr	r3, [pc, #172]	@ (80041d0 <GPIO_Init+0x10c>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	4b27      	ldr	r3, [pc, #156]	@ (80041d0 <GPIO_Init+0x10c>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	4a26      	ldr	r2, [pc, #152]	@ (80041d0 <GPIO_Init+0x10c>)
 8004138:	f043 0308 	orr.w	r3, r3, #8
 800413c:	6313      	str	r3, [r2, #48]	@ 0x30
 800413e:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <GPIO_Init+0x10c>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <GPIO_Init+0x10c>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	4a1f      	ldr	r2, [pc, #124]	@ (80041d0 <GPIO_Init+0x10c>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6313      	str	r3, [r2, #48]	@ 0x30
 800415a:	4b1d      	ldr	r3, [pc, #116]	@ (80041d0 <GPIO_Init+0x10c>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8004166:	2200      	movs	r2, #0
 8004168:	f244 0181 	movw	r1, #16513	@ 0x4081
 800416c:	4819      	ldr	r0, [pc, #100]	@ (80041d4 <GPIO_Init+0x110>)
 800416e:	f7fe f813 	bl	8002198 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004172:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004176:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004178:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800417c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004182:	f107 0314 	add.w	r3, r7, #20
 8004186:	4619      	mov	r1, r3
 8004188:	4813      	ldr	r0, [pc, #76]	@ (80041d8 <GPIO_Init+0x114>)
 800418a:	f7fd fe41 	bl	8001e10 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800418e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8004192:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004194:	2301      	movs	r3, #1
 8004196:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419c:	2300      	movs	r3, #0
 800419e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	4619      	mov	r1, r3
 80041a6:	480b      	ldr	r0, [pc, #44]	@ (80041d4 <GPIO_Init+0x110>)
 80041a8:	f7fd fe32 	bl	8001e10 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80041ac:	2310      	movs	r3, #16
 80041ae:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041b0:	2301      	movs	r3, #1
 80041b2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b8:	2300      	movs	r3, #0
 80041ba:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041bc:	f107 0314 	add.w	r3, r7, #20
 80041c0:	4619      	mov	r1, r3
 80041c2:	4806      	ldr	r0, [pc, #24]	@ (80041dc <GPIO_Init+0x118>)
 80041c4:	f7fd fe24 	bl	8001e10 <HAL_GPIO_Init>
}
 80041c8:	bf00      	nop
 80041ca:	3728      	adds	r7, #40	@ 0x28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40020400 	.word	0x40020400
 80041d8:	40020800 	.word	0x40020800
 80041dc:	40020000 	.word	0x40020000

080041e0 <read_error_flag>:
 * @retval None
 */

static bool_t handle_error_flag = false;

bool_t read_error_flag(void) {
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
	return handle_error_flag;
 80041e4:	4b03      	ldr	r3, [pc, #12]	@ (80041f4 <read_error_flag+0x14>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	200001fc 	.word	0x200001fc

080041f8 <write_error_flag>:
void write_error_flag(bool_t value) {
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
	handle_error_flag = value;
 8004202:	4a04      	ldr	r2, [pc, #16]	@ (8004214 <write_error_flag+0x1c>)
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	7013      	strb	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	200001fc 	.word	0x200001fc

08004218 <Error_Handler>:

void Error_Handler(void) {
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800421c:	b672      	cpsid	i
}
 800421e:	bf00      	nop
	__disable_irq();
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004220:	2201      	movs	r2, #1
 8004222:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004226:	480a      	ldr	r0, [pc, #40]	@ (8004250 <Error_Handler+0x38>)
 8004228:	f7fd ffb6 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800422c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004230:	f7fd fce4 	bl	8001bfc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8004234:	2200      	movs	r2, #0
 8004236:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800423a:	4805      	ldr	r0, [pc, #20]	@ (8004250 <Error_Handler+0x38>)
 800423c:	f7fd ffac 	bl	8002198 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8004240:	b662      	cpsie	i
}
 8004242:	bf00      	nop
	__enable_irq();
	handle_error_flag = false;
 8004244:	4b03      	ldr	r3, [pc, #12]	@ (8004254 <Error_Handler+0x3c>)
 8004246:	2200      	movs	r2, #0
 8004248:	701a      	strb	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40020400 	.word	0x40020400
 8004254:	200001fc 	.word	0x200001fc

08004258 <std>:
 8004258:	2300      	movs	r3, #0
 800425a:	b510      	push	{r4, lr}
 800425c:	4604      	mov	r4, r0
 800425e:	e9c0 3300 	strd	r3, r3, [r0]
 8004262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004266:	6083      	str	r3, [r0, #8]
 8004268:	8181      	strh	r1, [r0, #12]
 800426a:	6643      	str	r3, [r0, #100]	@ 0x64
 800426c:	81c2      	strh	r2, [r0, #14]
 800426e:	6183      	str	r3, [r0, #24]
 8004270:	4619      	mov	r1, r3
 8004272:	2208      	movs	r2, #8
 8004274:	305c      	adds	r0, #92	@ 0x5c
 8004276:	f000 fa19 	bl	80046ac <memset>
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <std+0x58>)
 800427c:	6263      	str	r3, [r4, #36]	@ 0x24
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <std+0x5c>)
 8004280:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <std+0x60>)
 8004284:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <std+0x64>)
 8004288:	6323      	str	r3, [r4, #48]	@ 0x30
 800428a:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <std+0x68>)
 800428c:	6224      	str	r4, [r4, #32]
 800428e:	429c      	cmp	r4, r3
 8004290:	d006      	beq.n	80042a0 <std+0x48>
 8004292:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004296:	4294      	cmp	r4, r2
 8004298:	d002      	beq.n	80042a0 <std+0x48>
 800429a:	33d0      	adds	r3, #208	@ 0xd0
 800429c:	429c      	cmp	r4, r3
 800429e:	d105      	bne.n	80042ac <std+0x54>
 80042a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a8:	f000 ba78 	b.w	800479c <__retarget_lock_init_recursive>
 80042ac:	bd10      	pop	{r4, pc}
 80042ae:	bf00      	nop
 80042b0:	080044fd 	.word	0x080044fd
 80042b4:	0800451f 	.word	0x0800451f
 80042b8:	08004557 	.word	0x08004557
 80042bc:	0800457b 	.word	0x0800457b
 80042c0:	20000200 	.word	0x20000200

080042c4 <stdio_exit_handler>:
 80042c4:	4a02      	ldr	r2, [pc, #8]	@ (80042d0 <stdio_exit_handler+0xc>)
 80042c6:	4903      	ldr	r1, [pc, #12]	@ (80042d4 <stdio_exit_handler+0x10>)
 80042c8:	4803      	ldr	r0, [pc, #12]	@ (80042d8 <stdio_exit_handler+0x14>)
 80042ca:	f000 b869 	b.w	80043a0 <_fwalk_sglue>
 80042ce:	bf00      	nop
 80042d0:	20000010 	.word	0x20000010
 80042d4:	080052ed 	.word	0x080052ed
 80042d8:	20000020 	.word	0x20000020

080042dc <cleanup_stdio>:
 80042dc:	6841      	ldr	r1, [r0, #4]
 80042de:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <cleanup_stdio+0x34>)
 80042e0:	4299      	cmp	r1, r3
 80042e2:	b510      	push	{r4, lr}
 80042e4:	4604      	mov	r4, r0
 80042e6:	d001      	beq.n	80042ec <cleanup_stdio+0x10>
 80042e8:	f001 f800 	bl	80052ec <_fflush_r>
 80042ec:	68a1      	ldr	r1, [r4, #8]
 80042ee:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <cleanup_stdio+0x38>)
 80042f0:	4299      	cmp	r1, r3
 80042f2:	d002      	beq.n	80042fa <cleanup_stdio+0x1e>
 80042f4:	4620      	mov	r0, r4
 80042f6:	f000 fff9 	bl	80052ec <_fflush_r>
 80042fa:	68e1      	ldr	r1, [r4, #12]
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <cleanup_stdio+0x3c>)
 80042fe:	4299      	cmp	r1, r3
 8004300:	d004      	beq.n	800430c <cleanup_stdio+0x30>
 8004302:	4620      	mov	r0, r4
 8004304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004308:	f000 bff0 	b.w	80052ec <_fflush_r>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	bf00      	nop
 8004310:	20000200 	.word	0x20000200
 8004314:	20000268 	.word	0x20000268
 8004318:	200002d0 	.word	0x200002d0

0800431c <global_stdio_init.part.0>:
 800431c:	b510      	push	{r4, lr}
 800431e:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <global_stdio_init.part.0+0x30>)
 8004320:	4c0b      	ldr	r4, [pc, #44]	@ (8004350 <global_stdio_init.part.0+0x34>)
 8004322:	4a0c      	ldr	r2, [pc, #48]	@ (8004354 <global_stdio_init.part.0+0x38>)
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	4620      	mov	r0, r4
 8004328:	2200      	movs	r2, #0
 800432a:	2104      	movs	r1, #4
 800432c:	f7ff ff94 	bl	8004258 <std>
 8004330:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004334:	2201      	movs	r2, #1
 8004336:	2109      	movs	r1, #9
 8004338:	f7ff ff8e 	bl	8004258 <std>
 800433c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004340:	2202      	movs	r2, #2
 8004342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004346:	2112      	movs	r1, #18
 8004348:	f7ff bf86 	b.w	8004258 <std>
 800434c:	20000338 	.word	0x20000338
 8004350:	20000200 	.word	0x20000200
 8004354:	080042c5 	.word	0x080042c5

08004358 <__sfp_lock_acquire>:
 8004358:	4801      	ldr	r0, [pc, #4]	@ (8004360 <__sfp_lock_acquire+0x8>)
 800435a:	f000 ba20 	b.w	800479e <__retarget_lock_acquire_recursive>
 800435e:	bf00      	nop
 8004360:	20000341 	.word	0x20000341

08004364 <__sfp_lock_release>:
 8004364:	4801      	ldr	r0, [pc, #4]	@ (800436c <__sfp_lock_release+0x8>)
 8004366:	f000 ba1b 	b.w	80047a0 <__retarget_lock_release_recursive>
 800436a:	bf00      	nop
 800436c:	20000341 	.word	0x20000341

08004370 <__sinit>:
 8004370:	b510      	push	{r4, lr}
 8004372:	4604      	mov	r4, r0
 8004374:	f7ff fff0 	bl	8004358 <__sfp_lock_acquire>
 8004378:	6a23      	ldr	r3, [r4, #32]
 800437a:	b11b      	cbz	r3, 8004384 <__sinit+0x14>
 800437c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004380:	f7ff bff0 	b.w	8004364 <__sfp_lock_release>
 8004384:	4b04      	ldr	r3, [pc, #16]	@ (8004398 <__sinit+0x28>)
 8004386:	6223      	str	r3, [r4, #32]
 8004388:	4b04      	ldr	r3, [pc, #16]	@ (800439c <__sinit+0x2c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f5      	bne.n	800437c <__sinit+0xc>
 8004390:	f7ff ffc4 	bl	800431c <global_stdio_init.part.0>
 8004394:	e7f2      	b.n	800437c <__sinit+0xc>
 8004396:	bf00      	nop
 8004398:	080042dd 	.word	0x080042dd
 800439c:	20000338 	.word	0x20000338

080043a0 <_fwalk_sglue>:
 80043a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043a4:	4607      	mov	r7, r0
 80043a6:	4688      	mov	r8, r1
 80043a8:	4614      	mov	r4, r2
 80043aa:	2600      	movs	r6, #0
 80043ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043b0:	f1b9 0901 	subs.w	r9, r9, #1
 80043b4:	d505      	bpl.n	80043c2 <_fwalk_sglue+0x22>
 80043b6:	6824      	ldr	r4, [r4, #0]
 80043b8:	2c00      	cmp	r4, #0
 80043ba:	d1f7      	bne.n	80043ac <_fwalk_sglue+0xc>
 80043bc:	4630      	mov	r0, r6
 80043be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c2:	89ab      	ldrh	r3, [r5, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d907      	bls.n	80043d8 <_fwalk_sglue+0x38>
 80043c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043cc:	3301      	adds	r3, #1
 80043ce:	d003      	beq.n	80043d8 <_fwalk_sglue+0x38>
 80043d0:	4629      	mov	r1, r5
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c0      	blx	r8
 80043d6:	4306      	orrs	r6, r0
 80043d8:	3568      	adds	r5, #104	@ 0x68
 80043da:	e7e9      	b.n	80043b0 <_fwalk_sglue+0x10>

080043dc <iprintf>:
 80043dc:	b40f      	push	{r0, r1, r2, r3}
 80043de:	b507      	push	{r0, r1, r2, lr}
 80043e0:	4906      	ldr	r1, [pc, #24]	@ (80043fc <iprintf+0x20>)
 80043e2:	ab04      	add	r3, sp, #16
 80043e4:	6808      	ldr	r0, [r1, #0]
 80043e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ea:	6881      	ldr	r1, [r0, #8]
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	f000 fc53 	bl	8004c98 <_vfiprintf_r>
 80043f2:	b003      	add	sp, #12
 80043f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043f8:	b004      	add	sp, #16
 80043fa:	4770      	bx	lr
 80043fc:	2000001c 	.word	0x2000001c

08004400 <_puts_r>:
 8004400:	6a03      	ldr	r3, [r0, #32]
 8004402:	b570      	push	{r4, r5, r6, lr}
 8004404:	6884      	ldr	r4, [r0, #8]
 8004406:	4605      	mov	r5, r0
 8004408:	460e      	mov	r6, r1
 800440a:	b90b      	cbnz	r3, 8004410 <_puts_r+0x10>
 800440c:	f7ff ffb0 	bl	8004370 <__sinit>
 8004410:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004412:	07db      	lsls	r3, r3, #31
 8004414:	d405      	bmi.n	8004422 <_puts_r+0x22>
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	0598      	lsls	r0, r3, #22
 800441a:	d402      	bmi.n	8004422 <_puts_r+0x22>
 800441c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800441e:	f000 f9be 	bl	800479e <__retarget_lock_acquire_recursive>
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	0719      	lsls	r1, r3, #28
 8004426:	d502      	bpl.n	800442e <_puts_r+0x2e>
 8004428:	6923      	ldr	r3, [r4, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d135      	bne.n	800449a <_puts_r+0x9a>
 800442e:	4621      	mov	r1, r4
 8004430:	4628      	mov	r0, r5
 8004432:	f000 f8e5 	bl	8004600 <__swsetup_r>
 8004436:	b380      	cbz	r0, 800449a <_puts_r+0x9a>
 8004438:	f04f 35ff 	mov.w	r5, #4294967295
 800443c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800443e:	07da      	lsls	r2, r3, #31
 8004440:	d405      	bmi.n	800444e <_puts_r+0x4e>
 8004442:	89a3      	ldrh	r3, [r4, #12]
 8004444:	059b      	lsls	r3, r3, #22
 8004446:	d402      	bmi.n	800444e <_puts_r+0x4e>
 8004448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800444a:	f000 f9a9 	bl	80047a0 <__retarget_lock_release_recursive>
 800444e:	4628      	mov	r0, r5
 8004450:	bd70      	pop	{r4, r5, r6, pc}
 8004452:	2b00      	cmp	r3, #0
 8004454:	da04      	bge.n	8004460 <_puts_r+0x60>
 8004456:	69a2      	ldr	r2, [r4, #24]
 8004458:	429a      	cmp	r2, r3
 800445a:	dc17      	bgt.n	800448c <_puts_r+0x8c>
 800445c:	290a      	cmp	r1, #10
 800445e:	d015      	beq.n	800448c <_puts_r+0x8c>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	6022      	str	r2, [r4, #0]
 8004466:	7019      	strb	r1, [r3, #0]
 8004468:	68a3      	ldr	r3, [r4, #8]
 800446a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800446e:	3b01      	subs	r3, #1
 8004470:	60a3      	str	r3, [r4, #8]
 8004472:	2900      	cmp	r1, #0
 8004474:	d1ed      	bne.n	8004452 <_puts_r+0x52>
 8004476:	2b00      	cmp	r3, #0
 8004478:	da11      	bge.n	800449e <_puts_r+0x9e>
 800447a:	4622      	mov	r2, r4
 800447c:	210a      	movs	r1, #10
 800447e:	4628      	mov	r0, r5
 8004480:	f000 f87f 	bl	8004582 <__swbuf_r>
 8004484:	3001      	adds	r0, #1
 8004486:	d0d7      	beq.n	8004438 <_puts_r+0x38>
 8004488:	250a      	movs	r5, #10
 800448a:	e7d7      	b.n	800443c <_puts_r+0x3c>
 800448c:	4622      	mov	r2, r4
 800448e:	4628      	mov	r0, r5
 8004490:	f000 f877 	bl	8004582 <__swbuf_r>
 8004494:	3001      	adds	r0, #1
 8004496:	d1e7      	bne.n	8004468 <_puts_r+0x68>
 8004498:	e7ce      	b.n	8004438 <_puts_r+0x38>
 800449a:	3e01      	subs	r6, #1
 800449c:	e7e4      	b.n	8004468 <_puts_r+0x68>
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	6022      	str	r2, [r4, #0]
 80044a4:	220a      	movs	r2, #10
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e7ee      	b.n	8004488 <_puts_r+0x88>
	...

080044ac <puts>:
 80044ac:	4b02      	ldr	r3, [pc, #8]	@ (80044b8 <puts+0xc>)
 80044ae:	4601      	mov	r1, r0
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	f7ff bfa5 	b.w	8004400 <_puts_r>
 80044b6:	bf00      	nop
 80044b8:	2000001c 	.word	0x2000001c

080044bc <siprintf>:
 80044bc:	b40e      	push	{r1, r2, r3}
 80044be:	b500      	push	{lr}
 80044c0:	b09c      	sub	sp, #112	@ 0x70
 80044c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80044c4:	9002      	str	r0, [sp, #8]
 80044c6:	9006      	str	r0, [sp, #24]
 80044c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044cc:	4809      	ldr	r0, [pc, #36]	@ (80044f4 <siprintf+0x38>)
 80044ce:	9107      	str	r1, [sp, #28]
 80044d0:	9104      	str	r1, [sp, #16]
 80044d2:	4909      	ldr	r1, [pc, #36]	@ (80044f8 <siprintf+0x3c>)
 80044d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80044d8:	9105      	str	r1, [sp, #20]
 80044da:	6800      	ldr	r0, [r0, #0]
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	a902      	add	r1, sp, #8
 80044e0:	f000 fab4 	bl	8004a4c <_svfiprintf_r>
 80044e4:	9b02      	ldr	r3, [sp, #8]
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	b01c      	add	sp, #112	@ 0x70
 80044ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80044f0:	b003      	add	sp, #12
 80044f2:	4770      	bx	lr
 80044f4:	2000001c 	.word	0x2000001c
 80044f8:	ffff0208 	.word	0xffff0208

080044fc <__sread>:
 80044fc:	b510      	push	{r4, lr}
 80044fe:	460c      	mov	r4, r1
 8004500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004504:	f000 f8fc 	bl	8004700 <_read_r>
 8004508:	2800      	cmp	r0, #0
 800450a:	bfab      	itete	ge
 800450c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800450e:	89a3      	ldrhlt	r3, [r4, #12]
 8004510:	181b      	addge	r3, r3, r0
 8004512:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004516:	bfac      	ite	ge
 8004518:	6563      	strge	r3, [r4, #84]	@ 0x54
 800451a:	81a3      	strhlt	r3, [r4, #12]
 800451c:	bd10      	pop	{r4, pc}

0800451e <__swrite>:
 800451e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004522:	461f      	mov	r7, r3
 8004524:	898b      	ldrh	r3, [r1, #12]
 8004526:	05db      	lsls	r3, r3, #23
 8004528:	4605      	mov	r5, r0
 800452a:	460c      	mov	r4, r1
 800452c:	4616      	mov	r6, r2
 800452e:	d505      	bpl.n	800453c <__swrite+0x1e>
 8004530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004534:	2302      	movs	r3, #2
 8004536:	2200      	movs	r2, #0
 8004538:	f000 f8d0 	bl	80046dc <_lseek_r>
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	4632      	mov	r2, r6
 800454a:	463b      	mov	r3, r7
 800454c:	4628      	mov	r0, r5
 800454e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004552:	f000 b8e7 	b.w	8004724 <_write_r>

08004556 <__sseek>:
 8004556:	b510      	push	{r4, lr}
 8004558:	460c      	mov	r4, r1
 800455a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800455e:	f000 f8bd 	bl	80046dc <_lseek_r>
 8004562:	1c43      	adds	r3, r0, #1
 8004564:	89a3      	ldrh	r3, [r4, #12]
 8004566:	bf15      	itete	ne
 8004568:	6560      	strne	r0, [r4, #84]	@ 0x54
 800456a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800456e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004572:	81a3      	strheq	r3, [r4, #12]
 8004574:	bf18      	it	ne
 8004576:	81a3      	strhne	r3, [r4, #12]
 8004578:	bd10      	pop	{r4, pc}

0800457a <__sclose>:
 800457a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457e:	f000 b89d 	b.w	80046bc <_close_r>

08004582 <__swbuf_r>:
 8004582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004584:	460e      	mov	r6, r1
 8004586:	4614      	mov	r4, r2
 8004588:	4605      	mov	r5, r0
 800458a:	b118      	cbz	r0, 8004594 <__swbuf_r+0x12>
 800458c:	6a03      	ldr	r3, [r0, #32]
 800458e:	b90b      	cbnz	r3, 8004594 <__swbuf_r+0x12>
 8004590:	f7ff feee 	bl	8004370 <__sinit>
 8004594:	69a3      	ldr	r3, [r4, #24]
 8004596:	60a3      	str	r3, [r4, #8]
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	071a      	lsls	r2, r3, #28
 800459c:	d501      	bpl.n	80045a2 <__swbuf_r+0x20>
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	b943      	cbnz	r3, 80045b4 <__swbuf_r+0x32>
 80045a2:	4621      	mov	r1, r4
 80045a4:	4628      	mov	r0, r5
 80045a6:	f000 f82b 	bl	8004600 <__swsetup_r>
 80045aa:	b118      	cbz	r0, 80045b4 <__swbuf_r+0x32>
 80045ac:	f04f 37ff 	mov.w	r7, #4294967295
 80045b0:	4638      	mov	r0, r7
 80045b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	6922      	ldr	r2, [r4, #16]
 80045b8:	1a98      	subs	r0, r3, r2
 80045ba:	6963      	ldr	r3, [r4, #20]
 80045bc:	b2f6      	uxtb	r6, r6
 80045be:	4283      	cmp	r3, r0
 80045c0:	4637      	mov	r7, r6
 80045c2:	dc05      	bgt.n	80045d0 <__swbuf_r+0x4e>
 80045c4:	4621      	mov	r1, r4
 80045c6:	4628      	mov	r0, r5
 80045c8:	f000 fe90 	bl	80052ec <_fflush_r>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d1ed      	bne.n	80045ac <__swbuf_r+0x2a>
 80045d0:	68a3      	ldr	r3, [r4, #8]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	60a3      	str	r3, [r4, #8]
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	6022      	str	r2, [r4, #0]
 80045dc:	701e      	strb	r6, [r3, #0]
 80045de:	6962      	ldr	r2, [r4, #20]
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d004      	beq.n	80045f0 <__swbuf_r+0x6e>
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	07db      	lsls	r3, r3, #31
 80045ea:	d5e1      	bpl.n	80045b0 <__swbuf_r+0x2e>
 80045ec:	2e0a      	cmp	r6, #10
 80045ee:	d1df      	bne.n	80045b0 <__swbuf_r+0x2e>
 80045f0:	4621      	mov	r1, r4
 80045f2:	4628      	mov	r0, r5
 80045f4:	f000 fe7a 	bl	80052ec <_fflush_r>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d0d9      	beq.n	80045b0 <__swbuf_r+0x2e>
 80045fc:	e7d6      	b.n	80045ac <__swbuf_r+0x2a>
	...

08004600 <__swsetup_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4b29      	ldr	r3, [pc, #164]	@ (80046a8 <__swsetup_r+0xa8>)
 8004604:	4605      	mov	r5, r0
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	460c      	mov	r4, r1
 800460a:	b118      	cbz	r0, 8004614 <__swsetup_r+0x14>
 800460c:	6a03      	ldr	r3, [r0, #32]
 800460e:	b90b      	cbnz	r3, 8004614 <__swsetup_r+0x14>
 8004610:	f7ff feae 	bl	8004370 <__sinit>
 8004614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004618:	0719      	lsls	r1, r3, #28
 800461a:	d422      	bmi.n	8004662 <__swsetup_r+0x62>
 800461c:	06da      	lsls	r2, r3, #27
 800461e:	d407      	bmi.n	8004630 <__swsetup_r+0x30>
 8004620:	2209      	movs	r2, #9
 8004622:	602a      	str	r2, [r5, #0]
 8004624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004628:	81a3      	strh	r3, [r4, #12]
 800462a:	f04f 30ff 	mov.w	r0, #4294967295
 800462e:	e033      	b.n	8004698 <__swsetup_r+0x98>
 8004630:	0758      	lsls	r0, r3, #29
 8004632:	d512      	bpl.n	800465a <__swsetup_r+0x5a>
 8004634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004636:	b141      	cbz	r1, 800464a <__swsetup_r+0x4a>
 8004638:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800463c:	4299      	cmp	r1, r3
 800463e:	d002      	beq.n	8004646 <__swsetup_r+0x46>
 8004640:	4628      	mov	r0, r5
 8004642:	f000 f8af 	bl	80047a4 <_free_r>
 8004646:	2300      	movs	r3, #0
 8004648:	6363      	str	r3, [r4, #52]	@ 0x34
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004650:	81a3      	strh	r3, [r4, #12]
 8004652:	2300      	movs	r3, #0
 8004654:	6063      	str	r3, [r4, #4]
 8004656:	6923      	ldr	r3, [r4, #16]
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	f043 0308 	orr.w	r3, r3, #8
 8004660:	81a3      	strh	r3, [r4, #12]
 8004662:	6923      	ldr	r3, [r4, #16]
 8004664:	b94b      	cbnz	r3, 800467a <__swsetup_r+0x7a>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800466c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004670:	d003      	beq.n	800467a <__swsetup_r+0x7a>
 8004672:	4621      	mov	r1, r4
 8004674:	4628      	mov	r0, r5
 8004676:	f000 fe87 	bl	8005388 <__smakebuf_r>
 800467a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800467e:	f013 0201 	ands.w	r2, r3, #1
 8004682:	d00a      	beq.n	800469a <__swsetup_r+0x9a>
 8004684:	2200      	movs	r2, #0
 8004686:	60a2      	str	r2, [r4, #8]
 8004688:	6962      	ldr	r2, [r4, #20]
 800468a:	4252      	negs	r2, r2
 800468c:	61a2      	str	r2, [r4, #24]
 800468e:	6922      	ldr	r2, [r4, #16]
 8004690:	b942      	cbnz	r2, 80046a4 <__swsetup_r+0xa4>
 8004692:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004696:	d1c5      	bne.n	8004624 <__swsetup_r+0x24>
 8004698:	bd38      	pop	{r3, r4, r5, pc}
 800469a:	0799      	lsls	r1, r3, #30
 800469c:	bf58      	it	pl
 800469e:	6962      	ldrpl	r2, [r4, #20]
 80046a0:	60a2      	str	r2, [r4, #8]
 80046a2:	e7f4      	b.n	800468e <__swsetup_r+0x8e>
 80046a4:	2000      	movs	r0, #0
 80046a6:	e7f7      	b.n	8004698 <__swsetup_r+0x98>
 80046a8:	2000001c 	.word	0x2000001c

080046ac <memset>:
 80046ac:	4402      	add	r2, r0
 80046ae:	4603      	mov	r3, r0
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d100      	bne.n	80046b6 <memset+0xa>
 80046b4:	4770      	bx	lr
 80046b6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ba:	e7f9      	b.n	80046b0 <memset+0x4>

080046bc <_close_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4d06      	ldr	r5, [pc, #24]	@ (80046d8 <_close_r+0x1c>)
 80046c0:	2300      	movs	r3, #0
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	602b      	str	r3, [r5, #0]
 80046c8:	f7fc fd60 	bl	800118c <_close>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_close_r+0x1a>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_close_r+0x1a>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	2000033c 	.word	0x2000033c

080046dc <_lseek_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	4d07      	ldr	r5, [pc, #28]	@ (80046fc <_lseek_r+0x20>)
 80046e0:	4604      	mov	r4, r0
 80046e2:	4608      	mov	r0, r1
 80046e4:	4611      	mov	r1, r2
 80046e6:	2200      	movs	r2, #0
 80046e8:	602a      	str	r2, [r5, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f7fc fd75 	bl	80011da <_lseek>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d102      	bne.n	80046fa <_lseek_r+0x1e>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	b103      	cbz	r3, 80046fa <_lseek_r+0x1e>
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	2000033c 	.word	0x2000033c

08004700 <_read_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d07      	ldr	r5, [pc, #28]	@ (8004720 <_read_r+0x20>)
 8004704:	4604      	mov	r4, r0
 8004706:	4608      	mov	r0, r1
 8004708:	4611      	mov	r1, r2
 800470a:	2200      	movs	r2, #0
 800470c:	602a      	str	r2, [r5, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	f7fc fd03 	bl	800111a <_read>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d102      	bne.n	800471e <_read_r+0x1e>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	b103      	cbz	r3, 800471e <_read_r+0x1e>
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	bd38      	pop	{r3, r4, r5, pc}
 8004720:	2000033c 	.word	0x2000033c

08004724 <_write_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d07      	ldr	r5, [pc, #28]	@ (8004744 <_write_r+0x20>)
 8004728:	4604      	mov	r4, r0
 800472a:	4608      	mov	r0, r1
 800472c:	4611      	mov	r1, r2
 800472e:	2200      	movs	r2, #0
 8004730:	602a      	str	r2, [r5, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	f7fc fd0e 	bl	8001154 <_write>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_write_r+0x1e>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	b103      	cbz	r3, 8004742 <_write_r+0x1e>
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	2000033c 	.word	0x2000033c

08004748 <__errno>:
 8004748:	4b01      	ldr	r3, [pc, #4]	@ (8004750 <__errno+0x8>)
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	2000001c 	.word	0x2000001c

08004754 <__libc_init_array>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4d0d      	ldr	r5, [pc, #52]	@ (800478c <__libc_init_array+0x38>)
 8004758:	4c0d      	ldr	r4, [pc, #52]	@ (8004790 <__libc_init_array+0x3c>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	2600      	movs	r6, #0
 8004760:	42a6      	cmp	r6, r4
 8004762:	d109      	bne.n	8004778 <__libc_init_array+0x24>
 8004764:	4d0b      	ldr	r5, [pc, #44]	@ (8004794 <__libc_init_array+0x40>)
 8004766:	4c0c      	ldr	r4, [pc, #48]	@ (8004798 <__libc_init_array+0x44>)
 8004768:	f001 fe66 	bl	8006438 <_init>
 800476c:	1b64      	subs	r4, r4, r5
 800476e:	10a4      	asrs	r4, r4, #2
 8004770:	2600      	movs	r6, #0
 8004772:	42a6      	cmp	r6, r4
 8004774:	d105      	bne.n	8004782 <__libc_init_array+0x2e>
 8004776:	bd70      	pop	{r4, r5, r6, pc}
 8004778:	f855 3b04 	ldr.w	r3, [r5], #4
 800477c:	4798      	blx	r3
 800477e:	3601      	adds	r6, #1
 8004780:	e7ee      	b.n	8004760 <__libc_init_array+0xc>
 8004782:	f855 3b04 	ldr.w	r3, [r5], #4
 8004786:	4798      	blx	r3
 8004788:	3601      	adds	r6, #1
 800478a:	e7f2      	b.n	8004772 <__libc_init_array+0x1e>
 800478c:	08006650 	.word	0x08006650
 8004790:	08006650 	.word	0x08006650
 8004794:	08006650 	.word	0x08006650
 8004798:	08006654 	.word	0x08006654

0800479c <__retarget_lock_init_recursive>:
 800479c:	4770      	bx	lr

0800479e <__retarget_lock_acquire_recursive>:
 800479e:	4770      	bx	lr

080047a0 <__retarget_lock_release_recursive>:
 80047a0:	4770      	bx	lr
	...

080047a4 <_free_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4605      	mov	r5, r0
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d041      	beq.n	8004830 <_free_r+0x8c>
 80047ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b0:	1f0c      	subs	r4, r1, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfb8      	it	lt
 80047b6:	18e4      	addlt	r4, r4, r3
 80047b8:	f000 f8e0 	bl	800497c <__malloc_lock>
 80047bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004834 <_free_r+0x90>)
 80047be:	6813      	ldr	r3, [r2, #0]
 80047c0:	b933      	cbnz	r3, 80047d0 <_free_r+0x2c>
 80047c2:	6063      	str	r3, [r4, #4]
 80047c4:	6014      	str	r4, [r2, #0]
 80047c6:	4628      	mov	r0, r5
 80047c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047cc:	f000 b8dc 	b.w	8004988 <__malloc_unlock>
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	d908      	bls.n	80047e6 <_free_r+0x42>
 80047d4:	6820      	ldr	r0, [r4, #0]
 80047d6:	1821      	adds	r1, r4, r0
 80047d8:	428b      	cmp	r3, r1
 80047da:	bf01      	itttt	eq
 80047dc:	6819      	ldreq	r1, [r3, #0]
 80047de:	685b      	ldreq	r3, [r3, #4]
 80047e0:	1809      	addeq	r1, r1, r0
 80047e2:	6021      	streq	r1, [r4, #0]
 80047e4:	e7ed      	b.n	80047c2 <_free_r+0x1e>
 80047e6:	461a      	mov	r2, r3
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	b10b      	cbz	r3, 80047f0 <_free_r+0x4c>
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	d9fa      	bls.n	80047e6 <_free_r+0x42>
 80047f0:	6811      	ldr	r1, [r2, #0]
 80047f2:	1850      	adds	r0, r2, r1
 80047f4:	42a0      	cmp	r0, r4
 80047f6:	d10b      	bne.n	8004810 <_free_r+0x6c>
 80047f8:	6820      	ldr	r0, [r4, #0]
 80047fa:	4401      	add	r1, r0
 80047fc:	1850      	adds	r0, r2, r1
 80047fe:	4283      	cmp	r3, r0
 8004800:	6011      	str	r1, [r2, #0]
 8004802:	d1e0      	bne.n	80047c6 <_free_r+0x22>
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	6053      	str	r3, [r2, #4]
 800480a:	4408      	add	r0, r1
 800480c:	6010      	str	r0, [r2, #0]
 800480e:	e7da      	b.n	80047c6 <_free_r+0x22>
 8004810:	d902      	bls.n	8004818 <_free_r+0x74>
 8004812:	230c      	movs	r3, #12
 8004814:	602b      	str	r3, [r5, #0]
 8004816:	e7d6      	b.n	80047c6 <_free_r+0x22>
 8004818:	6820      	ldr	r0, [r4, #0]
 800481a:	1821      	adds	r1, r4, r0
 800481c:	428b      	cmp	r3, r1
 800481e:	bf04      	itt	eq
 8004820:	6819      	ldreq	r1, [r3, #0]
 8004822:	685b      	ldreq	r3, [r3, #4]
 8004824:	6063      	str	r3, [r4, #4]
 8004826:	bf04      	itt	eq
 8004828:	1809      	addeq	r1, r1, r0
 800482a:	6021      	streq	r1, [r4, #0]
 800482c:	6054      	str	r4, [r2, #4]
 800482e:	e7ca      	b.n	80047c6 <_free_r+0x22>
 8004830:	bd38      	pop	{r3, r4, r5, pc}
 8004832:	bf00      	nop
 8004834:	20000348 	.word	0x20000348

08004838 <sbrk_aligned>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	4e0f      	ldr	r6, [pc, #60]	@ (8004878 <sbrk_aligned+0x40>)
 800483c:	460c      	mov	r4, r1
 800483e:	6831      	ldr	r1, [r6, #0]
 8004840:	4605      	mov	r5, r0
 8004842:	b911      	cbnz	r1, 800484a <sbrk_aligned+0x12>
 8004844:	f000 fe18 	bl	8005478 <_sbrk_r>
 8004848:	6030      	str	r0, [r6, #0]
 800484a:	4621      	mov	r1, r4
 800484c:	4628      	mov	r0, r5
 800484e:	f000 fe13 	bl	8005478 <_sbrk_r>
 8004852:	1c43      	adds	r3, r0, #1
 8004854:	d103      	bne.n	800485e <sbrk_aligned+0x26>
 8004856:	f04f 34ff 	mov.w	r4, #4294967295
 800485a:	4620      	mov	r0, r4
 800485c:	bd70      	pop	{r4, r5, r6, pc}
 800485e:	1cc4      	adds	r4, r0, #3
 8004860:	f024 0403 	bic.w	r4, r4, #3
 8004864:	42a0      	cmp	r0, r4
 8004866:	d0f8      	beq.n	800485a <sbrk_aligned+0x22>
 8004868:	1a21      	subs	r1, r4, r0
 800486a:	4628      	mov	r0, r5
 800486c:	f000 fe04 	bl	8005478 <_sbrk_r>
 8004870:	3001      	adds	r0, #1
 8004872:	d1f2      	bne.n	800485a <sbrk_aligned+0x22>
 8004874:	e7ef      	b.n	8004856 <sbrk_aligned+0x1e>
 8004876:	bf00      	nop
 8004878:	20000344 	.word	0x20000344

0800487c <_malloc_r>:
 800487c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004880:	1ccd      	adds	r5, r1, #3
 8004882:	f025 0503 	bic.w	r5, r5, #3
 8004886:	3508      	adds	r5, #8
 8004888:	2d0c      	cmp	r5, #12
 800488a:	bf38      	it	cc
 800488c:	250c      	movcc	r5, #12
 800488e:	2d00      	cmp	r5, #0
 8004890:	4606      	mov	r6, r0
 8004892:	db01      	blt.n	8004898 <_malloc_r+0x1c>
 8004894:	42a9      	cmp	r1, r5
 8004896:	d904      	bls.n	80048a2 <_malloc_r+0x26>
 8004898:	230c      	movs	r3, #12
 800489a:	6033      	str	r3, [r6, #0]
 800489c:	2000      	movs	r0, #0
 800489e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004978 <_malloc_r+0xfc>
 80048a6:	f000 f869 	bl	800497c <__malloc_lock>
 80048aa:	f8d8 3000 	ldr.w	r3, [r8]
 80048ae:	461c      	mov	r4, r3
 80048b0:	bb44      	cbnz	r4, 8004904 <_malloc_r+0x88>
 80048b2:	4629      	mov	r1, r5
 80048b4:	4630      	mov	r0, r6
 80048b6:	f7ff ffbf 	bl	8004838 <sbrk_aligned>
 80048ba:	1c43      	adds	r3, r0, #1
 80048bc:	4604      	mov	r4, r0
 80048be:	d158      	bne.n	8004972 <_malloc_r+0xf6>
 80048c0:	f8d8 4000 	ldr.w	r4, [r8]
 80048c4:	4627      	mov	r7, r4
 80048c6:	2f00      	cmp	r7, #0
 80048c8:	d143      	bne.n	8004952 <_malloc_r+0xd6>
 80048ca:	2c00      	cmp	r4, #0
 80048cc:	d04b      	beq.n	8004966 <_malloc_r+0xea>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	4639      	mov	r1, r7
 80048d2:	4630      	mov	r0, r6
 80048d4:	eb04 0903 	add.w	r9, r4, r3
 80048d8:	f000 fdce 	bl	8005478 <_sbrk_r>
 80048dc:	4581      	cmp	r9, r0
 80048de:	d142      	bne.n	8004966 <_malloc_r+0xea>
 80048e0:	6821      	ldr	r1, [r4, #0]
 80048e2:	1a6d      	subs	r5, r5, r1
 80048e4:	4629      	mov	r1, r5
 80048e6:	4630      	mov	r0, r6
 80048e8:	f7ff ffa6 	bl	8004838 <sbrk_aligned>
 80048ec:	3001      	adds	r0, #1
 80048ee:	d03a      	beq.n	8004966 <_malloc_r+0xea>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	442b      	add	r3, r5
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	f8d8 3000 	ldr.w	r3, [r8]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	bb62      	cbnz	r2, 8004958 <_malloc_r+0xdc>
 80048fe:	f8c8 7000 	str.w	r7, [r8]
 8004902:	e00f      	b.n	8004924 <_malloc_r+0xa8>
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	1b52      	subs	r2, r2, r5
 8004908:	d420      	bmi.n	800494c <_malloc_r+0xd0>
 800490a:	2a0b      	cmp	r2, #11
 800490c:	d917      	bls.n	800493e <_malloc_r+0xc2>
 800490e:	1961      	adds	r1, r4, r5
 8004910:	42a3      	cmp	r3, r4
 8004912:	6025      	str	r5, [r4, #0]
 8004914:	bf18      	it	ne
 8004916:	6059      	strne	r1, [r3, #4]
 8004918:	6863      	ldr	r3, [r4, #4]
 800491a:	bf08      	it	eq
 800491c:	f8c8 1000 	streq.w	r1, [r8]
 8004920:	5162      	str	r2, [r4, r5]
 8004922:	604b      	str	r3, [r1, #4]
 8004924:	4630      	mov	r0, r6
 8004926:	f000 f82f 	bl	8004988 <__malloc_unlock>
 800492a:	f104 000b 	add.w	r0, r4, #11
 800492e:	1d23      	adds	r3, r4, #4
 8004930:	f020 0007 	bic.w	r0, r0, #7
 8004934:	1ac2      	subs	r2, r0, r3
 8004936:	bf1c      	itt	ne
 8004938:	1a1b      	subne	r3, r3, r0
 800493a:	50a3      	strne	r3, [r4, r2]
 800493c:	e7af      	b.n	800489e <_malloc_r+0x22>
 800493e:	6862      	ldr	r2, [r4, #4]
 8004940:	42a3      	cmp	r3, r4
 8004942:	bf0c      	ite	eq
 8004944:	f8c8 2000 	streq.w	r2, [r8]
 8004948:	605a      	strne	r2, [r3, #4]
 800494a:	e7eb      	b.n	8004924 <_malloc_r+0xa8>
 800494c:	4623      	mov	r3, r4
 800494e:	6864      	ldr	r4, [r4, #4]
 8004950:	e7ae      	b.n	80048b0 <_malloc_r+0x34>
 8004952:	463c      	mov	r4, r7
 8004954:	687f      	ldr	r7, [r7, #4]
 8004956:	e7b6      	b.n	80048c6 <_malloc_r+0x4a>
 8004958:	461a      	mov	r2, r3
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	42a3      	cmp	r3, r4
 800495e:	d1fb      	bne.n	8004958 <_malloc_r+0xdc>
 8004960:	2300      	movs	r3, #0
 8004962:	6053      	str	r3, [r2, #4]
 8004964:	e7de      	b.n	8004924 <_malloc_r+0xa8>
 8004966:	230c      	movs	r3, #12
 8004968:	6033      	str	r3, [r6, #0]
 800496a:	4630      	mov	r0, r6
 800496c:	f000 f80c 	bl	8004988 <__malloc_unlock>
 8004970:	e794      	b.n	800489c <_malloc_r+0x20>
 8004972:	6005      	str	r5, [r0, #0]
 8004974:	e7d6      	b.n	8004924 <_malloc_r+0xa8>
 8004976:	bf00      	nop
 8004978:	20000348 	.word	0x20000348

0800497c <__malloc_lock>:
 800497c:	4801      	ldr	r0, [pc, #4]	@ (8004984 <__malloc_lock+0x8>)
 800497e:	f7ff bf0e 	b.w	800479e <__retarget_lock_acquire_recursive>
 8004982:	bf00      	nop
 8004984:	20000340 	.word	0x20000340

08004988 <__malloc_unlock>:
 8004988:	4801      	ldr	r0, [pc, #4]	@ (8004990 <__malloc_unlock+0x8>)
 800498a:	f7ff bf09 	b.w	80047a0 <__retarget_lock_release_recursive>
 800498e:	bf00      	nop
 8004990:	20000340 	.word	0x20000340

08004994 <__ssputs_r>:
 8004994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	688e      	ldr	r6, [r1, #8]
 800499a:	461f      	mov	r7, r3
 800499c:	42be      	cmp	r6, r7
 800499e:	680b      	ldr	r3, [r1, #0]
 80049a0:	4682      	mov	sl, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	4690      	mov	r8, r2
 80049a6:	d82d      	bhi.n	8004a04 <__ssputs_r+0x70>
 80049a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80049b0:	d026      	beq.n	8004a00 <__ssputs_r+0x6c>
 80049b2:	6965      	ldr	r5, [r4, #20]
 80049b4:	6909      	ldr	r1, [r1, #16]
 80049b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049ba:	eba3 0901 	sub.w	r9, r3, r1
 80049be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049c2:	1c7b      	adds	r3, r7, #1
 80049c4:	444b      	add	r3, r9
 80049c6:	106d      	asrs	r5, r5, #1
 80049c8:	429d      	cmp	r5, r3
 80049ca:	bf38      	it	cc
 80049cc:	461d      	movcc	r5, r3
 80049ce:	0553      	lsls	r3, r2, #21
 80049d0:	d527      	bpl.n	8004a22 <__ssputs_r+0x8e>
 80049d2:	4629      	mov	r1, r5
 80049d4:	f7ff ff52 	bl	800487c <_malloc_r>
 80049d8:	4606      	mov	r6, r0
 80049da:	b360      	cbz	r0, 8004a36 <__ssputs_r+0xa2>
 80049dc:	6921      	ldr	r1, [r4, #16]
 80049de:	464a      	mov	r2, r9
 80049e0:	f000 fd5a 	bl	8005498 <memcpy>
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ee:	81a3      	strh	r3, [r4, #12]
 80049f0:	6126      	str	r6, [r4, #16]
 80049f2:	6165      	str	r5, [r4, #20]
 80049f4:	444e      	add	r6, r9
 80049f6:	eba5 0509 	sub.w	r5, r5, r9
 80049fa:	6026      	str	r6, [r4, #0]
 80049fc:	60a5      	str	r5, [r4, #8]
 80049fe:	463e      	mov	r6, r7
 8004a00:	42be      	cmp	r6, r7
 8004a02:	d900      	bls.n	8004a06 <__ssputs_r+0x72>
 8004a04:	463e      	mov	r6, r7
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	4632      	mov	r2, r6
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	f000 fcf8 	bl	8005400 <memmove>
 8004a10:	68a3      	ldr	r3, [r4, #8]
 8004a12:	1b9b      	subs	r3, r3, r6
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	4433      	add	r3, r6
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a22:	462a      	mov	r2, r5
 8004a24:	f000 fd46 	bl	80054b4 <_realloc_r>
 8004a28:	4606      	mov	r6, r0
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d1e0      	bne.n	80049f0 <__ssputs_r+0x5c>
 8004a2e:	6921      	ldr	r1, [r4, #16]
 8004a30:	4650      	mov	r0, sl
 8004a32:	f7ff feb7 	bl	80047a4 <_free_r>
 8004a36:	230c      	movs	r3, #12
 8004a38:	f8ca 3000 	str.w	r3, [sl]
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a42:	81a3      	strh	r3, [r4, #12]
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	e7e9      	b.n	8004a1e <__ssputs_r+0x8a>
	...

08004a4c <_svfiprintf_r>:
 8004a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a50:	4698      	mov	r8, r3
 8004a52:	898b      	ldrh	r3, [r1, #12]
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	b09d      	sub	sp, #116	@ 0x74
 8004a58:	4607      	mov	r7, r0
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	d510      	bpl.n	8004a82 <_svfiprintf_r+0x36>
 8004a60:	690b      	ldr	r3, [r1, #16]
 8004a62:	b973      	cbnz	r3, 8004a82 <_svfiprintf_r+0x36>
 8004a64:	2140      	movs	r1, #64	@ 0x40
 8004a66:	f7ff ff09 	bl	800487c <_malloc_r>
 8004a6a:	6028      	str	r0, [r5, #0]
 8004a6c:	6128      	str	r0, [r5, #16]
 8004a6e:	b930      	cbnz	r0, 8004a7e <_svfiprintf_r+0x32>
 8004a70:	230c      	movs	r3, #12
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	f04f 30ff 	mov.w	r0, #4294967295
 8004a78:	b01d      	add	sp, #116	@ 0x74
 8004a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7e:	2340      	movs	r3, #64	@ 0x40
 8004a80:	616b      	str	r3, [r5, #20]
 8004a82:	2300      	movs	r3, #0
 8004a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a86:	2320      	movs	r3, #32
 8004a88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a90:	2330      	movs	r3, #48	@ 0x30
 8004a92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c30 <_svfiprintf_r+0x1e4>
 8004a96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a9a:	f04f 0901 	mov.w	r9, #1
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	469a      	mov	sl, r3
 8004aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aa6:	b10a      	cbz	r2, 8004aac <_svfiprintf_r+0x60>
 8004aa8:	2a25      	cmp	r2, #37	@ 0x25
 8004aaa:	d1f9      	bne.n	8004aa0 <_svfiprintf_r+0x54>
 8004aac:	ebba 0b04 	subs.w	fp, sl, r4
 8004ab0:	d00b      	beq.n	8004aca <_svfiprintf_r+0x7e>
 8004ab2:	465b      	mov	r3, fp
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f7ff ff6b 	bl	8004994 <__ssputs_r>
 8004abe:	3001      	adds	r0, #1
 8004ac0:	f000 80a7 	beq.w	8004c12 <_svfiprintf_r+0x1c6>
 8004ac4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ac6:	445a      	add	r2, fp
 8004ac8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aca:	f89a 3000 	ldrb.w	r3, [sl]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 809f 	beq.w	8004c12 <_svfiprintf_r+0x1c6>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ade:	f10a 0a01 	add.w	sl, sl, #1
 8004ae2:	9304      	str	r3, [sp, #16]
 8004ae4:	9307      	str	r3, [sp, #28]
 8004ae6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004aea:	931a      	str	r3, [sp, #104]	@ 0x68
 8004aec:	4654      	mov	r4, sl
 8004aee:	2205      	movs	r2, #5
 8004af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af4:	484e      	ldr	r0, [pc, #312]	@ (8004c30 <_svfiprintf_r+0x1e4>)
 8004af6:	f7fb fb7b 	bl	80001f0 <memchr>
 8004afa:	9a04      	ldr	r2, [sp, #16]
 8004afc:	b9d8      	cbnz	r0, 8004b36 <_svfiprintf_r+0xea>
 8004afe:	06d0      	lsls	r0, r2, #27
 8004b00:	bf44      	itt	mi
 8004b02:	2320      	movmi	r3, #32
 8004b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b08:	0711      	lsls	r1, r2, #28
 8004b0a:	bf44      	itt	mi
 8004b0c:	232b      	movmi	r3, #43	@ 0x2b
 8004b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b12:	f89a 3000 	ldrb.w	r3, [sl]
 8004b16:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b18:	d015      	beq.n	8004b46 <_svfiprintf_r+0xfa>
 8004b1a:	9a07      	ldr	r2, [sp, #28]
 8004b1c:	4654      	mov	r4, sl
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f04f 0c0a 	mov.w	ip, #10
 8004b24:	4621      	mov	r1, r4
 8004b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b2a:	3b30      	subs	r3, #48	@ 0x30
 8004b2c:	2b09      	cmp	r3, #9
 8004b2e:	d94b      	bls.n	8004bc8 <_svfiprintf_r+0x17c>
 8004b30:	b1b0      	cbz	r0, 8004b60 <_svfiprintf_r+0x114>
 8004b32:	9207      	str	r2, [sp, #28]
 8004b34:	e014      	b.n	8004b60 <_svfiprintf_r+0x114>
 8004b36:	eba0 0308 	sub.w	r3, r0, r8
 8004b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	9304      	str	r3, [sp, #16]
 8004b42:	46a2      	mov	sl, r4
 8004b44:	e7d2      	b.n	8004aec <_svfiprintf_r+0xa0>
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	1d19      	adds	r1, r3, #4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	9103      	str	r1, [sp, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bfbb      	ittet	lt
 8004b52:	425b      	neglt	r3, r3
 8004b54:	f042 0202 	orrlt.w	r2, r2, #2
 8004b58:	9307      	strge	r3, [sp, #28]
 8004b5a:	9307      	strlt	r3, [sp, #28]
 8004b5c:	bfb8      	it	lt
 8004b5e:	9204      	strlt	r2, [sp, #16]
 8004b60:	7823      	ldrb	r3, [r4, #0]
 8004b62:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b64:	d10a      	bne.n	8004b7c <_svfiprintf_r+0x130>
 8004b66:	7863      	ldrb	r3, [r4, #1]
 8004b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b6a:	d132      	bne.n	8004bd2 <_svfiprintf_r+0x186>
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	9203      	str	r2, [sp, #12]
 8004b74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b78:	3402      	adds	r4, #2
 8004b7a:	9305      	str	r3, [sp, #20]
 8004b7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004c40 <_svfiprintf_r+0x1f4>
 8004b80:	7821      	ldrb	r1, [r4, #0]
 8004b82:	2203      	movs	r2, #3
 8004b84:	4650      	mov	r0, sl
 8004b86:	f7fb fb33 	bl	80001f0 <memchr>
 8004b8a:	b138      	cbz	r0, 8004b9c <_svfiprintf_r+0x150>
 8004b8c:	9b04      	ldr	r3, [sp, #16]
 8004b8e:	eba0 000a 	sub.w	r0, r0, sl
 8004b92:	2240      	movs	r2, #64	@ 0x40
 8004b94:	4082      	lsls	r2, r0
 8004b96:	4313      	orrs	r3, r2
 8004b98:	3401      	adds	r4, #1
 8004b9a:	9304      	str	r3, [sp, #16]
 8004b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba0:	4824      	ldr	r0, [pc, #144]	@ (8004c34 <_svfiprintf_r+0x1e8>)
 8004ba2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ba6:	2206      	movs	r2, #6
 8004ba8:	f7fb fb22 	bl	80001f0 <memchr>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d036      	beq.n	8004c1e <_svfiprintf_r+0x1d2>
 8004bb0:	4b21      	ldr	r3, [pc, #132]	@ (8004c38 <_svfiprintf_r+0x1ec>)
 8004bb2:	bb1b      	cbnz	r3, 8004bfc <_svfiprintf_r+0x1b0>
 8004bb4:	9b03      	ldr	r3, [sp, #12]
 8004bb6:	3307      	adds	r3, #7
 8004bb8:	f023 0307 	bic.w	r3, r3, #7
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	9303      	str	r3, [sp, #12]
 8004bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bc2:	4433      	add	r3, r6
 8004bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bc6:	e76a      	b.n	8004a9e <_svfiprintf_r+0x52>
 8004bc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bcc:	460c      	mov	r4, r1
 8004bce:	2001      	movs	r0, #1
 8004bd0:	e7a8      	b.n	8004b24 <_svfiprintf_r+0xd8>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	3401      	adds	r4, #1
 8004bd6:	9305      	str	r3, [sp, #20]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f04f 0c0a 	mov.w	ip, #10
 8004bde:	4620      	mov	r0, r4
 8004be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004be4:	3a30      	subs	r2, #48	@ 0x30
 8004be6:	2a09      	cmp	r2, #9
 8004be8:	d903      	bls.n	8004bf2 <_svfiprintf_r+0x1a6>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0c6      	beq.n	8004b7c <_svfiprintf_r+0x130>
 8004bee:	9105      	str	r1, [sp, #20]
 8004bf0:	e7c4      	b.n	8004b7c <_svfiprintf_r+0x130>
 8004bf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e7f0      	b.n	8004bde <_svfiprintf_r+0x192>
 8004bfc:	ab03      	add	r3, sp, #12
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	462a      	mov	r2, r5
 8004c02:	4b0e      	ldr	r3, [pc, #56]	@ (8004c3c <_svfiprintf_r+0x1f0>)
 8004c04:	a904      	add	r1, sp, #16
 8004c06:	4638      	mov	r0, r7
 8004c08:	f3af 8000 	nop.w
 8004c0c:	1c42      	adds	r2, r0, #1
 8004c0e:	4606      	mov	r6, r0
 8004c10:	d1d6      	bne.n	8004bc0 <_svfiprintf_r+0x174>
 8004c12:	89ab      	ldrh	r3, [r5, #12]
 8004c14:	065b      	lsls	r3, r3, #25
 8004c16:	f53f af2d 	bmi.w	8004a74 <_svfiprintf_r+0x28>
 8004c1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c1c:	e72c      	b.n	8004a78 <_svfiprintf_r+0x2c>
 8004c1e:	ab03      	add	r3, sp, #12
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	462a      	mov	r2, r5
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <_svfiprintf_r+0x1f0>)
 8004c26:	a904      	add	r1, sp, #16
 8004c28:	4638      	mov	r0, r7
 8004c2a:	f000 f9bb 	bl	8004fa4 <_printf_i>
 8004c2e:	e7ed      	b.n	8004c0c <_svfiprintf_r+0x1c0>
 8004c30:	080065e0 	.word	0x080065e0
 8004c34:	080065ea 	.word	0x080065ea
 8004c38:	00000000 	.word	0x00000000
 8004c3c:	08004995 	.word	0x08004995
 8004c40:	080065e6 	.word	0x080065e6

08004c44 <__sfputc_r>:
 8004c44:	6893      	ldr	r3, [r2, #8]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	b410      	push	{r4}
 8004c4c:	6093      	str	r3, [r2, #8]
 8004c4e:	da08      	bge.n	8004c62 <__sfputc_r+0x1e>
 8004c50:	6994      	ldr	r4, [r2, #24]
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	db01      	blt.n	8004c5a <__sfputc_r+0x16>
 8004c56:	290a      	cmp	r1, #10
 8004c58:	d103      	bne.n	8004c62 <__sfputc_r+0x1e>
 8004c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c5e:	f7ff bc90 	b.w	8004582 <__swbuf_r>
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	1c58      	adds	r0, r3, #1
 8004c66:	6010      	str	r0, [r2, #0]
 8004c68:	7019      	strb	r1, [r3, #0]
 8004c6a:	4608      	mov	r0, r1
 8004c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <__sfputs_r>:
 8004c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c74:	4606      	mov	r6, r0
 8004c76:	460f      	mov	r7, r1
 8004c78:	4614      	mov	r4, r2
 8004c7a:	18d5      	adds	r5, r2, r3
 8004c7c:	42ac      	cmp	r4, r5
 8004c7e:	d101      	bne.n	8004c84 <__sfputs_r+0x12>
 8004c80:	2000      	movs	r0, #0
 8004c82:	e007      	b.n	8004c94 <__sfputs_r+0x22>
 8004c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c88:	463a      	mov	r2, r7
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff ffda 	bl	8004c44 <__sfputc_r>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d1f3      	bne.n	8004c7c <__sfputs_r+0xa>
 8004c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c98 <_vfiprintf_r>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	b09d      	sub	sp, #116	@ 0x74
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	4698      	mov	r8, r3
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	b118      	cbz	r0, 8004cb0 <_vfiprintf_r+0x18>
 8004ca8:	6a03      	ldr	r3, [r0, #32]
 8004caa:	b90b      	cbnz	r3, 8004cb0 <_vfiprintf_r+0x18>
 8004cac:	f7ff fb60 	bl	8004370 <__sinit>
 8004cb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cb2:	07d9      	lsls	r1, r3, #31
 8004cb4:	d405      	bmi.n	8004cc2 <_vfiprintf_r+0x2a>
 8004cb6:	89ab      	ldrh	r3, [r5, #12]
 8004cb8:	059a      	lsls	r2, r3, #22
 8004cba:	d402      	bmi.n	8004cc2 <_vfiprintf_r+0x2a>
 8004cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cbe:	f7ff fd6e 	bl	800479e <__retarget_lock_acquire_recursive>
 8004cc2:	89ab      	ldrh	r3, [r5, #12]
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	d501      	bpl.n	8004ccc <_vfiprintf_r+0x34>
 8004cc8:	692b      	ldr	r3, [r5, #16]
 8004cca:	b99b      	cbnz	r3, 8004cf4 <_vfiprintf_r+0x5c>
 8004ccc:	4629      	mov	r1, r5
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f7ff fc96 	bl	8004600 <__swsetup_r>
 8004cd4:	b170      	cbz	r0, 8004cf4 <_vfiprintf_r+0x5c>
 8004cd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cd8:	07dc      	lsls	r4, r3, #31
 8004cda:	d504      	bpl.n	8004ce6 <_vfiprintf_r+0x4e>
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	b01d      	add	sp, #116	@ 0x74
 8004ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	0598      	lsls	r0, r3, #22
 8004cea:	d4f7      	bmi.n	8004cdc <_vfiprintf_r+0x44>
 8004cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cee:	f7ff fd57 	bl	80047a0 <__retarget_lock_release_recursive>
 8004cf2:	e7f3      	b.n	8004cdc <_vfiprintf_r+0x44>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d02:	2330      	movs	r3, #48	@ 0x30
 8004d04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004eb4 <_vfiprintf_r+0x21c>
 8004d08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d0c:	f04f 0901 	mov.w	r9, #1
 8004d10:	4623      	mov	r3, r4
 8004d12:	469a      	mov	sl, r3
 8004d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d18:	b10a      	cbz	r2, 8004d1e <_vfiprintf_r+0x86>
 8004d1a:	2a25      	cmp	r2, #37	@ 0x25
 8004d1c:	d1f9      	bne.n	8004d12 <_vfiprintf_r+0x7a>
 8004d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d22:	d00b      	beq.n	8004d3c <_vfiprintf_r+0xa4>
 8004d24:	465b      	mov	r3, fp
 8004d26:	4622      	mov	r2, r4
 8004d28:	4629      	mov	r1, r5
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f7ff ffa1 	bl	8004c72 <__sfputs_r>
 8004d30:	3001      	adds	r0, #1
 8004d32:	f000 80a7 	beq.w	8004e84 <_vfiprintf_r+0x1ec>
 8004d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d38:	445a      	add	r2, fp
 8004d3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 809f 	beq.w	8004e84 <_vfiprintf_r+0x1ec>
 8004d46:	2300      	movs	r3, #0
 8004d48:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d50:	f10a 0a01 	add.w	sl, sl, #1
 8004d54:	9304      	str	r3, [sp, #16]
 8004d56:	9307      	str	r3, [sp, #28]
 8004d58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d5e:	4654      	mov	r4, sl
 8004d60:	2205      	movs	r2, #5
 8004d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d66:	4853      	ldr	r0, [pc, #332]	@ (8004eb4 <_vfiprintf_r+0x21c>)
 8004d68:	f7fb fa42 	bl	80001f0 <memchr>
 8004d6c:	9a04      	ldr	r2, [sp, #16]
 8004d6e:	b9d8      	cbnz	r0, 8004da8 <_vfiprintf_r+0x110>
 8004d70:	06d1      	lsls	r1, r2, #27
 8004d72:	bf44      	itt	mi
 8004d74:	2320      	movmi	r3, #32
 8004d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d7a:	0713      	lsls	r3, r2, #28
 8004d7c:	bf44      	itt	mi
 8004d7e:	232b      	movmi	r3, #43	@ 0x2b
 8004d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d84:	f89a 3000 	ldrb.w	r3, [sl]
 8004d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d8a:	d015      	beq.n	8004db8 <_vfiprintf_r+0x120>
 8004d8c:	9a07      	ldr	r2, [sp, #28]
 8004d8e:	4654      	mov	r4, sl
 8004d90:	2000      	movs	r0, #0
 8004d92:	f04f 0c0a 	mov.w	ip, #10
 8004d96:	4621      	mov	r1, r4
 8004d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d9c:	3b30      	subs	r3, #48	@ 0x30
 8004d9e:	2b09      	cmp	r3, #9
 8004da0:	d94b      	bls.n	8004e3a <_vfiprintf_r+0x1a2>
 8004da2:	b1b0      	cbz	r0, 8004dd2 <_vfiprintf_r+0x13a>
 8004da4:	9207      	str	r2, [sp, #28]
 8004da6:	e014      	b.n	8004dd2 <_vfiprintf_r+0x13a>
 8004da8:	eba0 0308 	sub.w	r3, r0, r8
 8004dac:	fa09 f303 	lsl.w	r3, r9, r3
 8004db0:	4313      	orrs	r3, r2
 8004db2:	9304      	str	r3, [sp, #16]
 8004db4:	46a2      	mov	sl, r4
 8004db6:	e7d2      	b.n	8004d5e <_vfiprintf_r+0xc6>
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	1d19      	adds	r1, r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	9103      	str	r1, [sp, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bfbb      	ittet	lt
 8004dc4:	425b      	neglt	r3, r3
 8004dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8004dca:	9307      	strge	r3, [sp, #28]
 8004dcc:	9307      	strlt	r3, [sp, #28]
 8004dce:	bfb8      	it	lt
 8004dd0:	9204      	strlt	r2, [sp, #16]
 8004dd2:	7823      	ldrb	r3, [r4, #0]
 8004dd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dd6:	d10a      	bne.n	8004dee <_vfiprintf_r+0x156>
 8004dd8:	7863      	ldrb	r3, [r4, #1]
 8004dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ddc:	d132      	bne.n	8004e44 <_vfiprintf_r+0x1ac>
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	1d1a      	adds	r2, r3, #4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	9203      	str	r2, [sp, #12]
 8004de6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004dea:	3402      	adds	r4, #2
 8004dec:	9305      	str	r3, [sp, #20]
 8004dee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ec4 <_vfiprintf_r+0x22c>
 8004df2:	7821      	ldrb	r1, [r4, #0]
 8004df4:	2203      	movs	r2, #3
 8004df6:	4650      	mov	r0, sl
 8004df8:	f7fb f9fa 	bl	80001f0 <memchr>
 8004dfc:	b138      	cbz	r0, 8004e0e <_vfiprintf_r+0x176>
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	eba0 000a 	sub.w	r0, r0, sl
 8004e04:	2240      	movs	r2, #64	@ 0x40
 8004e06:	4082      	lsls	r2, r0
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	3401      	adds	r4, #1
 8004e0c:	9304      	str	r3, [sp, #16]
 8004e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e12:	4829      	ldr	r0, [pc, #164]	@ (8004eb8 <_vfiprintf_r+0x220>)
 8004e14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e18:	2206      	movs	r2, #6
 8004e1a:	f7fb f9e9 	bl	80001f0 <memchr>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d03f      	beq.n	8004ea2 <_vfiprintf_r+0x20a>
 8004e22:	4b26      	ldr	r3, [pc, #152]	@ (8004ebc <_vfiprintf_r+0x224>)
 8004e24:	bb1b      	cbnz	r3, 8004e6e <_vfiprintf_r+0x1d6>
 8004e26:	9b03      	ldr	r3, [sp, #12]
 8004e28:	3307      	adds	r3, #7
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	3308      	adds	r3, #8
 8004e30:	9303      	str	r3, [sp, #12]
 8004e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e34:	443b      	add	r3, r7
 8004e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e38:	e76a      	b.n	8004d10 <_vfiprintf_r+0x78>
 8004e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e3e:	460c      	mov	r4, r1
 8004e40:	2001      	movs	r0, #1
 8004e42:	e7a8      	b.n	8004d96 <_vfiprintf_r+0xfe>
 8004e44:	2300      	movs	r3, #0
 8004e46:	3401      	adds	r4, #1
 8004e48:	9305      	str	r3, [sp, #20]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f04f 0c0a 	mov.w	ip, #10
 8004e50:	4620      	mov	r0, r4
 8004e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e56:	3a30      	subs	r2, #48	@ 0x30
 8004e58:	2a09      	cmp	r2, #9
 8004e5a:	d903      	bls.n	8004e64 <_vfiprintf_r+0x1cc>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0c6      	beq.n	8004dee <_vfiprintf_r+0x156>
 8004e60:	9105      	str	r1, [sp, #20]
 8004e62:	e7c4      	b.n	8004dee <_vfiprintf_r+0x156>
 8004e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e68:	4604      	mov	r4, r0
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e7f0      	b.n	8004e50 <_vfiprintf_r+0x1b8>
 8004e6e:	ab03      	add	r3, sp, #12
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	462a      	mov	r2, r5
 8004e74:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <_vfiprintf_r+0x228>)
 8004e76:	a904      	add	r1, sp, #16
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f3af 8000 	nop.w
 8004e7e:	4607      	mov	r7, r0
 8004e80:	1c78      	adds	r0, r7, #1
 8004e82:	d1d6      	bne.n	8004e32 <_vfiprintf_r+0x19a>
 8004e84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e86:	07d9      	lsls	r1, r3, #31
 8004e88:	d405      	bmi.n	8004e96 <_vfiprintf_r+0x1fe>
 8004e8a:	89ab      	ldrh	r3, [r5, #12]
 8004e8c:	059a      	lsls	r2, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <_vfiprintf_r+0x1fe>
 8004e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e92:	f7ff fc85 	bl	80047a0 <__retarget_lock_release_recursive>
 8004e96:	89ab      	ldrh	r3, [r5, #12]
 8004e98:	065b      	lsls	r3, r3, #25
 8004e9a:	f53f af1f 	bmi.w	8004cdc <_vfiprintf_r+0x44>
 8004e9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ea0:	e71e      	b.n	8004ce0 <_vfiprintf_r+0x48>
 8004ea2:	ab03      	add	r3, sp, #12
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <_vfiprintf_r+0x228>)
 8004eaa:	a904      	add	r1, sp, #16
 8004eac:	4630      	mov	r0, r6
 8004eae:	f000 f879 	bl	8004fa4 <_printf_i>
 8004eb2:	e7e4      	b.n	8004e7e <_vfiprintf_r+0x1e6>
 8004eb4:	080065e0 	.word	0x080065e0
 8004eb8:	080065ea 	.word	0x080065ea
 8004ebc:	00000000 	.word	0x00000000
 8004ec0:	08004c73 	.word	0x08004c73
 8004ec4:	080065e6 	.word	0x080065e6

08004ec8 <_printf_common>:
 8004ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ecc:	4616      	mov	r6, r2
 8004ece:	4698      	mov	r8, r3
 8004ed0:	688a      	ldr	r2, [r1, #8]
 8004ed2:	690b      	ldr	r3, [r1, #16]
 8004ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	bfb8      	it	lt
 8004edc:	4613      	movlt	r3, r2
 8004ede:	6033      	str	r3, [r6, #0]
 8004ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ee4:	4607      	mov	r7, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	b10a      	cbz	r2, 8004eee <_printf_common+0x26>
 8004eea:	3301      	adds	r3, #1
 8004eec:	6033      	str	r3, [r6, #0]
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	0699      	lsls	r1, r3, #26
 8004ef2:	bf42      	ittt	mi
 8004ef4:	6833      	ldrmi	r3, [r6, #0]
 8004ef6:	3302      	addmi	r3, #2
 8004ef8:	6033      	strmi	r3, [r6, #0]
 8004efa:	6825      	ldr	r5, [r4, #0]
 8004efc:	f015 0506 	ands.w	r5, r5, #6
 8004f00:	d106      	bne.n	8004f10 <_printf_common+0x48>
 8004f02:	f104 0a19 	add.w	sl, r4, #25
 8004f06:	68e3      	ldr	r3, [r4, #12]
 8004f08:	6832      	ldr	r2, [r6, #0]
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	42ab      	cmp	r3, r5
 8004f0e:	dc26      	bgt.n	8004f5e <_printf_common+0x96>
 8004f10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f14:	6822      	ldr	r2, [r4, #0]
 8004f16:	3b00      	subs	r3, #0
 8004f18:	bf18      	it	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	0692      	lsls	r2, r2, #26
 8004f1e:	d42b      	bmi.n	8004f78 <_printf_common+0xb0>
 8004f20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f24:	4641      	mov	r1, r8
 8004f26:	4638      	mov	r0, r7
 8004f28:	47c8      	blx	r9
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d01e      	beq.n	8004f6c <_printf_common+0xa4>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	6922      	ldr	r2, [r4, #16]
 8004f32:	f003 0306 	and.w	r3, r3, #6
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	bf02      	ittt	eq
 8004f3a:	68e5      	ldreq	r5, [r4, #12]
 8004f3c:	6833      	ldreq	r3, [r6, #0]
 8004f3e:	1aed      	subeq	r5, r5, r3
 8004f40:	68a3      	ldr	r3, [r4, #8]
 8004f42:	bf0c      	ite	eq
 8004f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f48:	2500      	movne	r5, #0
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	bfc4      	itt	gt
 8004f4e:	1a9b      	subgt	r3, r3, r2
 8004f50:	18ed      	addgt	r5, r5, r3
 8004f52:	2600      	movs	r6, #0
 8004f54:	341a      	adds	r4, #26
 8004f56:	42b5      	cmp	r5, r6
 8004f58:	d11a      	bne.n	8004f90 <_printf_common+0xc8>
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e008      	b.n	8004f70 <_printf_common+0xa8>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4652      	mov	r2, sl
 8004f62:	4641      	mov	r1, r8
 8004f64:	4638      	mov	r0, r7
 8004f66:	47c8      	blx	r9
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d103      	bne.n	8004f74 <_printf_common+0xac>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f74:	3501      	adds	r5, #1
 8004f76:	e7c6      	b.n	8004f06 <_printf_common+0x3e>
 8004f78:	18e1      	adds	r1, r4, r3
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	2030      	movs	r0, #48	@ 0x30
 8004f7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f82:	4422      	add	r2, r4
 8004f84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	e7c7      	b.n	8004f20 <_printf_common+0x58>
 8004f90:	2301      	movs	r3, #1
 8004f92:	4622      	mov	r2, r4
 8004f94:	4641      	mov	r1, r8
 8004f96:	4638      	mov	r0, r7
 8004f98:	47c8      	blx	r9
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d0e6      	beq.n	8004f6c <_printf_common+0xa4>
 8004f9e:	3601      	adds	r6, #1
 8004fa0:	e7d9      	b.n	8004f56 <_printf_common+0x8e>
	...

08004fa4 <_printf_i>:
 8004fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa8:	7e0f      	ldrb	r7, [r1, #24]
 8004faa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fac:	2f78      	cmp	r7, #120	@ 0x78
 8004fae:	4691      	mov	r9, r2
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	469a      	mov	sl, r3
 8004fb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fba:	d807      	bhi.n	8004fcc <_printf_i+0x28>
 8004fbc:	2f62      	cmp	r7, #98	@ 0x62
 8004fbe:	d80a      	bhi.n	8004fd6 <_printf_i+0x32>
 8004fc0:	2f00      	cmp	r7, #0
 8004fc2:	f000 80d2 	beq.w	800516a <_printf_i+0x1c6>
 8004fc6:	2f58      	cmp	r7, #88	@ 0x58
 8004fc8:	f000 80b9 	beq.w	800513e <_printf_i+0x19a>
 8004fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fd4:	e03a      	b.n	800504c <_printf_i+0xa8>
 8004fd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fda:	2b15      	cmp	r3, #21
 8004fdc:	d8f6      	bhi.n	8004fcc <_printf_i+0x28>
 8004fde:	a101      	add	r1, pc, #4	@ (adr r1, 8004fe4 <_printf_i+0x40>)
 8004fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fe4:	0800503d 	.word	0x0800503d
 8004fe8:	08005051 	.word	0x08005051
 8004fec:	08004fcd 	.word	0x08004fcd
 8004ff0:	08004fcd 	.word	0x08004fcd
 8004ff4:	08004fcd 	.word	0x08004fcd
 8004ff8:	08004fcd 	.word	0x08004fcd
 8004ffc:	08005051 	.word	0x08005051
 8005000:	08004fcd 	.word	0x08004fcd
 8005004:	08004fcd 	.word	0x08004fcd
 8005008:	08004fcd 	.word	0x08004fcd
 800500c:	08004fcd 	.word	0x08004fcd
 8005010:	08005151 	.word	0x08005151
 8005014:	0800507b 	.word	0x0800507b
 8005018:	0800510b 	.word	0x0800510b
 800501c:	08004fcd 	.word	0x08004fcd
 8005020:	08004fcd 	.word	0x08004fcd
 8005024:	08005173 	.word	0x08005173
 8005028:	08004fcd 	.word	0x08004fcd
 800502c:	0800507b 	.word	0x0800507b
 8005030:	08004fcd 	.word	0x08004fcd
 8005034:	08004fcd 	.word	0x08004fcd
 8005038:	08005113 	.word	0x08005113
 800503c:	6833      	ldr	r3, [r6, #0]
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6032      	str	r2, [r6, #0]
 8005044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005048:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800504c:	2301      	movs	r3, #1
 800504e:	e09d      	b.n	800518c <_printf_i+0x1e8>
 8005050:	6833      	ldr	r3, [r6, #0]
 8005052:	6820      	ldr	r0, [r4, #0]
 8005054:	1d19      	adds	r1, r3, #4
 8005056:	6031      	str	r1, [r6, #0]
 8005058:	0606      	lsls	r6, r0, #24
 800505a:	d501      	bpl.n	8005060 <_printf_i+0xbc>
 800505c:	681d      	ldr	r5, [r3, #0]
 800505e:	e003      	b.n	8005068 <_printf_i+0xc4>
 8005060:	0645      	lsls	r5, r0, #25
 8005062:	d5fb      	bpl.n	800505c <_printf_i+0xb8>
 8005064:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005068:	2d00      	cmp	r5, #0
 800506a:	da03      	bge.n	8005074 <_printf_i+0xd0>
 800506c:	232d      	movs	r3, #45	@ 0x2d
 800506e:	426d      	negs	r5, r5
 8005070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005074:	4859      	ldr	r0, [pc, #356]	@ (80051dc <_printf_i+0x238>)
 8005076:	230a      	movs	r3, #10
 8005078:	e011      	b.n	800509e <_printf_i+0xfa>
 800507a:	6821      	ldr	r1, [r4, #0]
 800507c:	6833      	ldr	r3, [r6, #0]
 800507e:	0608      	lsls	r0, r1, #24
 8005080:	f853 5b04 	ldr.w	r5, [r3], #4
 8005084:	d402      	bmi.n	800508c <_printf_i+0xe8>
 8005086:	0649      	lsls	r1, r1, #25
 8005088:	bf48      	it	mi
 800508a:	b2ad      	uxthmi	r5, r5
 800508c:	2f6f      	cmp	r7, #111	@ 0x6f
 800508e:	4853      	ldr	r0, [pc, #332]	@ (80051dc <_printf_i+0x238>)
 8005090:	6033      	str	r3, [r6, #0]
 8005092:	bf14      	ite	ne
 8005094:	230a      	movne	r3, #10
 8005096:	2308      	moveq	r3, #8
 8005098:	2100      	movs	r1, #0
 800509a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800509e:	6866      	ldr	r6, [r4, #4]
 80050a0:	60a6      	str	r6, [r4, #8]
 80050a2:	2e00      	cmp	r6, #0
 80050a4:	bfa2      	ittt	ge
 80050a6:	6821      	ldrge	r1, [r4, #0]
 80050a8:	f021 0104 	bicge.w	r1, r1, #4
 80050ac:	6021      	strge	r1, [r4, #0]
 80050ae:	b90d      	cbnz	r5, 80050b4 <_printf_i+0x110>
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	d04b      	beq.n	800514c <_printf_i+0x1a8>
 80050b4:	4616      	mov	r6, r2
 80050b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80050ba:	fb03 5711 	mls	r7, r3, r1, r5
 80050be:	5dc7      	ldrb	r7, [r0, r7]
 80050c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050c4:	462f      	mov	r7, r5
 80050c6:	42bb      	cmp	r3, r7
 80050c8:	460d      	mov	r5, r1
 80050ca:	d9f4      	bls.n	80050b6 <_printf_i+0x112>
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d10b      	bne.n	80050e8 <_printf_i+0x144>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	07df      	lsls	r7, r3, #31
 80050d4:	d508      	bpl.n	80050e8 <_printf_i+0x144>
 80050d6:	6923      	ldr	r3, [r4, #16]
 80050d8:	6861      	ldr	r1, [r4, #4]
 80050da:	4299      	cmp	r1, r3
 80050dc:	bfde      	ittt	le
 80050de:	2330      	movle	r3, #48	@ 0x30
 80050e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050e8:	1b92      	subs	r2, r2, r6
 80050ea:	6122      	str	r2, [r4, #16]
 80050ec:	f8cd a000 	str.w	sl, [sp]
 80050f0:	464b      	mov	r3, r9
 80050f2:	aa03      	add	r2, sp, #12
 80050f4:	4621      	mov	r1, r4
 80050f6:	4640      	mov	r0, r8
 80050f8:	f7ff fee6 	bl	8004ec8 <_printf_common>
 80050fc:	3001      	adds	r0, #1
 80050fe:	d14a      	bne.n	8005196 <_printf_i+0x1f2>
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	b004      	add	sp, #16
 8005106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	f043 0320 	orr.w	r3, r3, #32
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	4833      	ldr	r0, [pc, #204]	@ (80051e0 <_printf_i+0x23c>)
 8005114:	2778      	movs	r7, #120	@ 0x78
 8005116:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	6831      	ldr	r1, [r6, #0]
 800511e:	061f      	lsls	r7, r3, #24
 8005120:	f851 5b04 	ldr.w	r5, [r1], #4
 8005124:	d402      	bmi.n	800512c <_printf_i+0x188>
 8005126:	065f      	lsls	r7, r3, #25
 8005128:	bf48      	it	mi
 800512a:	b2ad      	uxthmi	r5, r5
 800512c:	6031      	str	r1, [r6, #0]
 800512e:	07d9      	lsls	r1, r3, #31
 8005130:	bf44      	itt	mi
 8005132:	f043 0320 	orrmi.w	r3, r3, #32
 8005136:	6023      	strmi	r3, [r4, #0]
 8005138:	b11d      	cbz	r5, 8005142 <_printf_i+0x19e>
 800513a:	2310      	movs	r3, #16
 800513c:	e7ac      	b.n	8005098 <_printf_i+0xf4>
 800513e:	4827      	ldr	r0, [pc, #156]	@ (80051dc <_printf_i+0x238>)
 8005140:	e7e9      	b.n	8005116 <_printf_i+0x172>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	f023 0320 	bic.w	r3, r3, #32
 8005148:	6023      	str	r3, [r4, #0]
 800514a:	e7f6      	b.n	800513a <_printf_i+0x196>
 800514c:	4616      	mov	r6, r2
 800514e:	e7bd      	b.n	80050cc <_printf_i+0x128>
 8005150:	6833      	ldr	r3, [r6, #0]
 8005152:	6825      	ldr	r5, [r4, #0]
 8005154:	6961      	ldr	r1, [r4, #20]
 8005156:	1d18      	adds	r0, r3, #4
 8005158:	6030      	str	r0, [r6, #0]
 800515a:	062e      	lsls	r6, r5, #24
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	d501      	bpl.n	8005164 <_printf_i+0x1c0>
 8005160:	6019      	str	r1, [r3, #0]
 8005162:	e002      	b.n	800516a <_printf_i+0x1c6>
 8005164:	0668      	lsls	r0, r5, #25
 8005166:	d5fb      	bpl.n	8005160 <_printf_i+0x1bc>
 8005168:	8019      	strh	r1, [r3, #0]
 800516a:	2300      	movs	r3, #0
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	4616      	mov	r6, r2
 8005170:	e7bc      	b.n	80050ec <_printf_i+0x148>
 8005172:	6833      	ldr	r3, [r6, #0]
 8005174:	1d1a      	adds	r2, r3, #4
 8005176:	6032      	str	r2, [r6, #0]
 8005178:	681e      	ldr	r6, [r3, #0]
 800517a:	6862      	ldr	r2, [r4, #4]
 800517c:	2100      	movs	r1, #0
 800517e:	4630      	mov	r0, r6
 8005180:	f7fb f836 	bl	80001f0 <memchr>
 8005184:	b108      	cbz	r0, 800518a <_printf_i+0x1e6>
 8005186:	1b80      	subs	r0, r0, r6
 8005188:	6060      	str	r0, [r4, #4]
 800518a:	6863      	ldr	r3, [r4, #4]
 800518c:	6123      	str	r3, [r4, #16]
 800518e:	2300      	movs	r3, #0
 8005190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005194:	e7aa      	b.n	80050ec <_printf_i+0x148>
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	4632      	mov	r2, r6
 800519a:	4649      	mov	r1, r9
 800519c:	4640      	mov	r0, r8
 800519e:	47d0      	blx	sl
 80051a0:	3001      	adds	r0, #1
 80051a2:	d0ad      	beq.n	8005100 <_printf_i+0x15c>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	079b      	lsls	r3, r3, #30
 80051a8:	d413      	bmi.n	80051d2 <_printf_i+0x22e>
 80051aa:	68e0      	ldr	r0, [r4, #12]
 80051ac:	9b03      	ldr	r3, [sp, #12]
 80051ae:	4298      	cmp	r0, r3
 80051b0:	bfb8      	it	lt
 80051b2:	4618      	movlt	r0, r3
 80051b4:	e7a6      	b.n	8005104 <_printf_i+0x160>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4632      	mov	r2, r6
 80051ba:	4649      	mov	r1, r9
 80051bc:	4640      	mov	r0, r8
 80051be:	47d0      	blx	sl
 80051c0:	3001      	adds	r0, #1
 80051c2:	d09d      	beq.n	8005100 <_printf_i+0x15c>
 80051c4:	3501      	adds	r5, #1
 80051c6:	68e3      	ldr	r3, [r4, #12]
 80051c8:	9903      	ldr	r1, [sp, #12]
 80051ca:	1a5b      	subs	r3, r3, r1
 80051cc:	42ab      	cmp	r3, r5
 80051ce:	dcf2      	bgt.n	80051b6 <_printf_i+0x212>
 80051d0:	e7eb      	b.n	80051aa <_printf_i+0x206>
 80051d2:	2500      	movs	r5, #0
 80051d4:	f104 0619 	add.w	r6, r4, #25
 80051d8:	e7f5      	b.n	80051c6 <_printf_i+0x222>
 80051da:	bf00      	nop
 80051dc:	080065f1 	.word	0x080065f1
 80051e0:	08006602 	.word	0x08006602

080051e4 <__sflush_r>:
 80051e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ec:	0716      	lsls	r6, r2, #28
 80051ee:	4605      	mov	r5, r0
 80051f0:	460c      	mov	r4, r1
 80051f2:	d454      	bmi.n	800529e <__sflush_r+0xba>
 80051f4:	684b      	ldr	r3, [r1, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	dc02      	bgt.n	8005200 <__sflush_r+0x1c>
 80051fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	dd48      	ble.n	8005292 <__sflush_r+0xae>
 8005200:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005202:	2e00      	cmp	r6, #0
 8005204:	d045      	beq.n	8005292 <__sflush_r+0xae>
 8005206:	2300      	movs	r3, #0
 8005208:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800520c:	682f      	ldr	r7, [r5, #0]
 800520e:	6a21      	ldr	r1, [r4, #32]
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	d030      	beq.n	8005276 <__sflush_r+0x92>
 8005214:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	0759      	lsls	r1, r3, #29
 800521a:	d505      	bpl.n	8005228 <__sflush_r+0x44>
 800521c:	6863      	ldr	r3, [r4, #4]
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005222:	b10b      	cbz	r3, 8005228 <__sflush_r+0x44>
 8005224:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005226:	1ad2      	subs	r2, r2, r3
 8005228:	2300      	movs	r3, #0
 800522a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800522c:	6a21      	ldr	r1, [r4, #32]
 800522e:	4628      	mov	r0, r5
 8005230:	47b0      	blx	r6
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	d106      	bne.n	8005246 <__sflush_r+0x62>
 8005238:	6829      	ldr	r1, [r5, #0]
 800523a:	291d      	cmp	r1, #29
 800523c:	d82b      	bhi.n	8005296 <__sflush_r+0xb2>
 800523e:	4a2a      	ldr	r2, [pc, #168]	@ (80052e8 <__sflush_r+0x104>)
 8005240:	410a      	asrs	r2, r1
 8005242:	07d6      	lsls	r6, r2, #31
 8005244:	d427      	bmi.n	8005296 <__sflush_r+0xb2>
 8005246:	2200      	movs	r2, #0
 8005248:	6062      	str	r2, [r4, #4]
 800524a:	04d9      	lsls	r1, r3, #19
 800524c:	6922      	ldr	r2, [r4, #16]
 800524e:	6022      	str	r2, [r4, #0]
 8005250:	d504      	bpl.n	800525c <__sflush_r+0x78>
 8005252:	1c42      	adds	r2, r0, #1
 8005254:	d101      	bne.n	800525a <__sflush_r+0x76>
 8005256:	682b      	ldr	r3, [r5, #0]
 8005258:	b903      	cbnz	r3, 800525c <__sflush_r+0x78>
 800525a:	6560      	str	r0, [r4, #84]	@ 0x54
 800525c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800525e:	602f      	str	r7, [r5, #0]
 8005260:	b1b9      	cbz	r1, 8005292 <__sflush_r+0xae>
 8005262:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005266:	4299      	cmp	r1, r3
 8005268:	d002      	beq.n	8005270 <__sflush_r+0x8c>
 800526a:	4628      	mov	r0, r5
 800526c:	f7ff fa9a 	bl	80047a4 <_free_r>
 8005270:	2300      	movs	r3, #0
 8005272:	6363      	str	r3, [r4, #52]	@ 0x34
 8005274:	e00d      	b.n	8005292 <__sflush_r+0xae>
 8005276:	2301      	movs	r3, #1
 8005278:	4628      	mov	r0, r5
 800527a:	47b0      	blx	r6
 800527c:	4602      	mov	r2, r0
 800527e:	1c50      	adds	r0, r2, #1
 8005280:	d1c9      	bne.n	8005216 <__sflush_r+0x32>
 8005282:	682b      	ldr	r3, [r5, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0c6      	beq.n	8005216 <__sflush_r+0x32>
 8005288:	2b1d      	cmp	r3, #29
 800528a:	d001      	beq.n	8005290 <__sflush_r+0xac>
 800528c:	2b16      	cmp	r3, #22
 800528e:	d11e      	bne.n	80052ce <__sflush_r+0xea>
 8005290:	602f      	str	r7, [r5, #0]
 8005292:	2000      	movs	r0, #0
 8005294:	e022      	b.n	80052dc <__sflush_r+0xf8>
 8005296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800529a:	b21b      	sxth	r3, r3
 800529c:	e01b      	b.n	80052d6 <__sflush_r+0xf2>
 800529e:	690f      	ldr	r7, [r1, #16]
 80052a0:	2f00      	cmp	r7, #0
 80052a2:	d0f6      	beq.n	8005292 <__sflush_r+0xae>
 80052a4:	0793      	lsls	r3, r2, #30
 80052a6:	680e      	ldr	r6, [r1, #0]
 80052a8:	bf08      	it	eq
 80052aa:	694b      	ldreq	r3, [r1, #20]
 80052ac:	600f      	str	r7, [r1, #0]
 80052ae:	bf18      	it	ne
 80052b0:	2300      	movne	r3, #0
 80052b2:	eba6 0807 	sub.w	r8, r6, r7
 80052b6:	608b      	str	r3, [r1, #8]
 80052b8:	f1b8 0f00 	cmp.w	r8, #0
 80052bc:	dde9      	ble.n	8005292 <__sflush_r+0xae>
 80052be:	6a21      	ldr	r1, [r4, #32]
 80052c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80052c2:	4643      	mov	r3, r8
 80052c4:	463a      	mov	r2, r7
 80052c6:	4628      	mov	r0, r5
 80052c8:	47b0      	blx	r6
 80052ca:	2800      	cmp	r0, #0
 80052cc:	dc08      	bgt.n	80052e0 <__sflush_r+0xfc>
 80052ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e0:	4407      	add	r7, r0
 80052e2:	eba8 0800 	sub.w	r8, r8, r0
 80052e6:	e7e7      	b.n	80052b8 <__sflush_r+0xd4>
 80052e8:	dfbffffe 	.word	0xdfbffffe

080052ec <_fflush_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	690b      	ldr	r3, [r1, #16]
 80052f0:	4605      	mov	r5, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	b913      	cbnz	r3, 80052fc <_fflush_r+0x10>
 80052f6:	2500      	movs	r5, #0
 80052f8:	4628      	mov	r0, r5
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	b118      	cbz	r0, 8005306 <_fflush_r+0x1a>
 80052fe:	6a03      	ldr	r3, [r0, #32]
 8005300:	b90b      	cbnz	r3, 8005306 <_fflush_r+0x1a>
 8005302:	f7ff f835 	bl	8004370 <__sinit>
 8005306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f3      	beq.n	80052f6 <_fflush_r+0xa>
 800530e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005310:	07d0      	lsls	r0, r2, #31
 8005312:	d404      	bmi.n	800531e <_fflush_r+0x32>
 8005314:	0599      	lsls	r1, r3, #22
 8005316:	d402      	bmi.n	800531e <_fflush_r+0x32>
 8005318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800531a:	f7ff fa40 	bl	800479e <__retarget_lock_acquire_recursive>
 800531e:	4628      	mov	r0, r5
 8005320:	4621      	mov	r1, r4
 8005322:	f7ff ff5f 	bl	80051e4 <__sflush_r>
 8005326:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005328:	07da      	lsls	r2, r3, #31
 800532a:	4605      	mov	r5, r0
 800532c:	d4e4      	bmi.n	80052f8 <_fflush_r+0xc>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	059b      	lsls	r3, r3, #22
 8005332:	d4e1      	bmi.n	80052f8 <_fflush_r+0xc>
 8005334:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005336:	f7ff fa33 	bl	80047a0 <__retarget_lock_release_recursive>
 800533a:	e7dd      	b.n	80052f8 <_fflush_r+0xc>

0800533c <__swhatbuf_r>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	460c      	mov	r4, r1
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	2900      	cmp	r1, #0
 8005346:	b096      	sub	sp, #88	@ 0x58
 8005348:	4615      	mov	r5, r2
 800534a:	461e      	mov	r6, r3
 800534c:	da0d      	bge.n	800536a <__swhatbuf_r+0x2e>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005354:	f04f 0100 	mov.w	r1, #0
 8005358:	bf14      	ite	ne
 800535a:	2340      	movne	r3, #64	@ 0x40
 800535c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005360:	2000      	movs	r0, #0
 8005362:	6031      	str	r1, [r6, #0]
 8005364:	602b      	str	r3, [r5, #0]
 8005366:	b016      	add	sp, #88	@ 0x58
 8005368:	bd70      	pop	{r4, r5, r6, pc}
 800536a:	466a      	mov	r2, sp
 800536c:	f000 f862 	bl	8005434 <_fstat_r>
 8005370:	2800      	cmp	r0, #0
 8005372:	dbec      	blt.n	800534e <__swhatbuf_r+0x12>
 8005374:	9901      	ldr	r1, [sp, #4]
 8005376:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800537a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800537e:	4259      	negs	r1, r3
 8005380:	4159      	adcs	r1, r3
 8005382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005386:	e7eb      	b.n	8005360 <__swhatbuf_r+0x24>

08005388 <__smakebuf_r>:
 8005388:	898b      	ldrh	r3, [r1, #12]
 800538a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800538c:	079d      	lsls	r5, r3, #30
 800538e:	4606      	mov	r6, r0
 8005390:	460c      	mov	r4, r1
 8005392:	d507      	bpl.n	80053a4 <__smakebuf_r+0x1c>
 8005394:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	2301      	movs	r3, #1
 800539e:	6163      	str	r3, [r4, #20]
 80053a0:	b003      	add	sp, #12
 80053a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a4:	ab01      	add	r3, sp, #4
 80053a6:	466a      	mov	r2, sp
 80053a8:	f7ff ffc8 	bl	800533c <__swhatbuf_r>
 80053ac:	9f00      	ldr	r7, [sp, #0]
 80053ae:	4605      	mov	r5, r0
 80053b0:	4639      	mov	r1, r7
 80053b2:	4630      	mov	r0, r6
 80053b4:	f7ff fa62 	bl	800487c <_malloc_r>
 80053b8:	b948      	cbnz	r0, 80053ce <__smakebuf_r+0x46>
 80053ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053be:	059a      	lsls	r2, r3, #22
 80053c0:	d4ee      	bmi.n	80053a0 <__smakebuf_r+0x18>
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	f043 0302 	orr.w	r3, r3, #2
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	e7e2      	b.n	8005394 <__smakebuf_r+0xc>
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	6020      	str	r0, [r4, #0]
 80053d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d6:	81a3      	strh	r3, [r4, #12]
 80053d8:	9b01      	ldr	r3, [sp, #4]
 80053da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053de:	b15b      	cbz	r3, 80053f8 <__smakebuf_r+0x70>
 80053e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053e4:	4630      	mov	r0, r6
 80053e6:	f000 f837 	bl	8005458 <_isatty_r>
 80053ea:	b128      	cbz	r0, 80053f8 <__smakebuf_r+0x70>
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	431d      	orrs	r5, r3
 80053fc:	81a5      	strh	r5, [r4, #12]
 80053fe:	e7cf      	b.n	80053a0 <__smakebuf_r+0x18>

08005400 <memmove>:
 8005400:	4288      	cmp	r0, r1
 8005402:	b510      	push	{r4, lr}
 8005404:	eb01 0402 	add.w	r4, r1, r2
 8005408:	d902      	bls.n	8005410 <memmove+0x10>
 800540a:	4284      	cmp	r4, r0
 800540c:	4623      	mov	r3, r4
 800540e:	d807      	bhi.n	8005420 <memmove+0x20>
 8005410:	1e43      	subs	r3, r0, #1
 8005412:	42a1      	cmp	r1, r4
 8005414:	d008      	beq.n	8005428 <memmove+0x28>
 8005416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800541a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800541e:	e7f8      	b.n	8005412 <memmove+0x12>
 8005420:	4402      	add	r2, r0
 8005422:	4601      	mov	r1, r0
 8005424:	428a      	cmp	r2, r1
 8005426:	d100      	bne.n	800542a <memmove+0x2a>
 8005428:	bd10      	pop	{r4, pc}
 800542a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800542e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005432:	e7f7      	b.n	8005424 <memmove+0x24>

08005434 <_fstat_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d07      	ldr	r5, [pc, #28]	@ (8005454 <_fstat_r+0x20>)
 8005438:	2300      	movs	r3, #0
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	4611      	mov	r1, r2
 8005440:	602b      	str	r3, [r5, #0]
 8005442:	f7fb feaf 	bl	80011a4 <_fstat>
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	d102      	bne.n	8005450 <_fstat_r+0x1c>
 800544a:	682b      	ldr	r3, [r5, #0]
 800544c:	b103      	cbz	r3, 8005450 <_fstat_r+0x1c>
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	bd38      	pop	{r3, r4, r5, pc}
 8005452:	bf00      	nop
 8005454:	2000033c 	.word	0x2000033c

08005458 <_isatty_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	@ (8005474 <_isatty_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fb feae 	bl	80011c4 <_isatty>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_isatty_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_isatty_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	2000033c 	.word	0x2000033c

08005478 <_sbrk_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d06      	ldr	r5, [pc, #24]	@ (8005494 <_sbrk_r+0x1c>)
 800547c:	2300      	movs	r3, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	f7fb feb6 	bl	80011f4 <_sbrk>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_sbrk_r+0x1a>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_sbrk_r+0x1a>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	2000033c 	.word	0x2000033c

08005498 <memcpy>:
 8005498:	440a      	add	r2, r1
 800549a:	4291      	cmp	r1, r2
 800549c:	f100 33ff 	add.w	r3, r0, #4294967295
 80054a0:	d100      	bne.n	80054a4 <memcpy+0xc>
 80054a2:	4770      	bx	lr
 80054a4:	b510      	push	{r4, lr}
 80054a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ae:	4291      	cmp	r1, r2
 80054b0:	d1f9      	bne.n	80054a6 <memcpy+0xe>
 80054b2:	bd10      	pop	{r4, pc}

080054b4 <_realloc_r>:
 80054b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b8:	4680      	mov	r8, r0
 80054ba:	4615      	mov	r5, r2
 80054bc:	460c      	mov	r4, r1
 80054be:	b921      	cbnz	r1, 80054ca <_realloc_r+0x16>
 80054c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c4:	4611      	mov	r1, r2
 80054c6:	f7ff b9d9 	b.w	800487c <_malloc_r>
 80054ca:	b92a      	cbnz	r2, 80054d8 <_realloc_r+0x24>
 80054cc:	f7ff f96a 	bl	80047a4 <_free_r>
 80054d0:	2400      	movs	r4, #0
 80054d2:	4620      	mov	r0, r4
 80054d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d8:	f000 f81a 	bl	8005510 <_malloc_usable_size_r>
 80054dc:	4285      	cmp	r5, r0
 80054de:	4606      	mov	r6, r0
 80054e0:	d802      	bhi.n	80054e8 <_realloc_r+0x34>
 80054e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054e6:	d8f4      	bhi.n	80054d2 <_realloc_r+0x1e>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4640      	mov	r0, r8
 80054ec:	f7ff f9c6 	bl	800487c <_malloc_r>
 80054f0:	4607      	mov	r7, r0
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d0ec      	beq.n	80054d0 <_realloc_r+0x1c>
 80054f6:	42b5      	cmp	r5, r6
 80054f8:	462a      	mov	r2, r5
 80054fa:	4621      	mov	r1, r4
 80054fc:	bf28      	it	cs
 80054fe:	4632      	movcs	r2, r6
 8005500:	f7ff ffca 	bl	8005498 <memcpy>
 8005504:	4621      	mov	r1, r4
 8005506:	4640      	mov	r0, r8
 8005508:	f7ff f94c 	bl	80047a4 <_free_r>
 800550c:	463c      	mov	r4, r7
 800550e:	e7e0      	b.n	80054d2 <_realloc_r+0x1e>

08005510 <_malloc_usable_size_r>:
 8005510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005514:	1f18      	subs	r0, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	bfbc      	itt	lt
 800551a:	580b      	ldrlt	r3, [r1, r0]
 800551c:	18c0      	addlt	r0, r0, r3
 800551e:	4770      	bx	lr

08005520 <pow>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	ed2d 8b02 	vpush	{d8}
 8005526:	eeb0 8a40 	vmov.f32	s16, s0
 800552a:	eef0 8a60 	vmov.f32	s17, s1
 800552e:	ec55 4b11 	vmov	r4, r5, d1
 8005532:	f000 f979 	bl	8005828 <__ieee754_pow>
 8005536:	4622      	mov	r2, r4
 8005538:	462b      	mov	r3, r5
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	ec57 6b10 	vmov	r6, r7, d0
 8005542:	f7fb fafb 	bl	8000b3c <__aeabi_dcmpun>
 8005546:	2800      	cmp	r0, #0
 8005548:	d13b      	bne.n	80055c2 <pow+0xa2>
 800554a:	ec51 0b18 	vmov	r0, r1, d8
 800554e:	2200      	movs	r2, #0
 8005550:	2300      	movs	r3, #0
 8005552:	f7fb fac1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005556:	b1b8      	cbz	r0, 8005588 <pow+0x68>
 8005558:	2200      	movs	r2, #0
 800555a:	2300      	movs	r3, #0
 800555c:	4620      	mov	r0, r4
 800555e:	4629      	mov	r1, r5
 8005560:	f7fb faba 	bl	8000ad8 <__aeabi_dcmpeq>
 8005564:	2800      	cmp	r0, #0
 8005566:	d146      	bne.n	80055f6 <pow+0xd6>
 8005568:	ec45 4b10 	vmov	d0, r4, r5
 800556c:	f000 f874 	bl	8005658 <finite>
 8005570:	b338      	cbz	r0, 80055c2 <pow+0xa2>
 8005572:	2200      	movs	r2, #0
 8005574:	2300      	movs	r3, #0
 8005576:	4620      	mov	r0, r4
 8005578:	4629      	mov	r1, r5
 800557a:	f7fb fab7 	bl	8000aec <__aeabi_dcmplt>
 800557e:	b300      	cbz	r0, 80055c2 <pow+0xa2>
 8005580:	f7ff f8e2 	bl	8004748 <__errno>
 8005584:	2322      	movs	r3, #34	@ 0x22
 8005586:	e01b      	b.n	80055c0 <pow+0xa0>
 8005588:	ec47 6b10 	vmov	d0, r6, r7
 800558c:	f000 f864 	bl	8005658 <finite>
 8005590:	b9e0      	cbnz	r0, 80055cc <pow+0xac>
 8005592:	eeb0 0a48 	vmov.f32	s0, s16
 8005596:	eef0 0a68 	vmov.f32	s1, s17
 800559a:	f000 f85d 	bl	8005658 <finite>
 800559e:	b1a8      	cbz	r0, 80055cc <pow+0xac>
 80055a0:	ec45 4b10 	vmov	d0, r4, r5
 80055a4:	f000 f858 	bl	8005658 <finite>
 80055a8:	b180      	cbz	r0, 80055cc <pow+0xac>
 80055aa:	4632      	mov	r2, r6
 80055ac:	463b      	mov	r3, r7
 80055ae:	4630      	mov	r0, r6
 80055b0:	4639      	mov	r1, r7
 80055b2:	f7fb fac3 	bl	8000b3c <__aeabi_dcmpun>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d0e2      	beq.n	8005580 <pow+0x60>
 80055ba:	f7ff f8c5 	bl	8004748 <__errno>
 80055be:	2321      	movs	r3, #33	@ 0x21
 80055c0:	6003      	str	r3, [r0, #0]
 80055c2:	ecbd 8b02 	vpop	{d8}
 80055c6:	ec47 6b10 	vmov	d0, r6, r7
 80055ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055cc:	2200      	movs	r2, #0
 80055ce:	2300      	movs	r3, #0
 80055d0:	4630      	mov	r0, r6
 80055d2:	4639      	mov	r1, r7
 80055d4:	f7fb fa80 	bl	8000ad8 <__aeabi_dcmpeq>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d0f2      	beq.n	80055c2 <pow+0xa2>
 80055dc:	eeb0 0a48 	vmov.f32	s0, s16
 80055e0:	eef0 0a68 	vmov.f32	s1, s17
 80055e4:	f000 f838 	bl	8005658 <finite>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d0ea      	beq.n	80055c2 <pow+0xa2>
 80055ec:	ec45 4b10 	vmov	d0, r4, r5
 80055f0:	f000 f832 	bl	8005658 <finite>
 80055f4:	e7c3      	b.n	800557e <pow+0x5e>
 80055f6:	4f01      	ldr	r7, [pc, #4]	@ (80055fc <pow+0xdc>)
 80055f8:	2600      	movs	r6, #0
 80055fa:	e7e2      	b.n	80055c2 <pow+0xa2>
 80055fc:	3ff00000 	.word	0x3ff00000

08005600 <sqrt>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	ed2d 8b02 	vpush	{d8}
 8005606:	ec55 4b10 	vmov	r4, r5, d0
 800560a:	f000 f831 	bl	8005670 <__ieee754_sqrt>
 800560e:	4622      	mov	r2, r4
 8005610:	462b      	mov	r3, r5
 8005612:	4620      	mov	r0, r4
 8005614:	4629      	mov	r1, r5
 8005616:	eeb0 8a40 	vmov.f32	s16, s0
 800561a:	eef0 8a60 	vmov.f32	s17, s1
 800561e:	f7fb fa8d 	bl	8000b3c <__aeabi_dcmpun>
 8005622:	b990      	cbnz	r0, 800564a <sqrt+0x4a>
 8005624:	2200      	movs	r2, #0
 8005626:	2300      	movs	r3, #0
 8005628:	4620      	mov	r0, r4
 800562a:	4629      	mov	r1, r5
 800562c:	f7fb fa5e 	bl	8000aec <__aeabi_dcmplt>
 8005630:	b158      	cbz	r0, 800564a <sqrt+0x4a>
 8005632:	f7ff f889 	bl	8004748 <__errno>
 8005636:	2321      	movs	r3, #33	@ 0x21
 8005638:	6003      	str	r3, [r0, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	2300      	movs	r3, #0
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	f7fb f90b 	bl	800085c <__aeabi_ddiv>
 8005646:	ec41 0b18 	vmov	d8, r0, r1
 800564a:	eeb0 0a48 	vmov.f32	s0, s16
 800564e:	eef0 0a68 	vmov.f32	s1, s17
 8005652:	ecbd 8b02 	vpop	{d8}
 8005656:	bd38      	pop	{r3, r4, r5, pc}

08005658 <finite>:
 8005658:	b082      	sub	sp, #8
 800565a:	ed8d 0b00 	vstr	d0, [sp]
 800565e:	9801      	ldr	r0, [sp, #4]
 8005660:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005664:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005668:	0fc0      	lsrs	r0, r0, #31
 800566a:	b002      	add	sp, #8
 800566c:	4770      	bx	lr
	...

08005670 <__ieee754_sqrt>:
 8005670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	4a68      	ldr	r2, [pc, #416]	@ (8005818 <__ieee754_sqrt+0x1a8>)
 8005676:	ec55 4b10 	vmov	r4, r5, d0
 800567a:	43aa      	bics	r2, r5
 800567c:	462b      	mov	r3, r5
 800567e:	4621      	mov	r1, r4
 8005680:	d110      	bne.n	80056a4 <__ieee754_sqrt+0x34>
 8005682:	4622      	mov	r2, r4
 8005684:	4620      	mov	r0, r4
 8005686:	4629      	mov	r1, r5
 8005688:	f7fa ffbe 	bl	8000608 <__aeabi_dmul>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4620      	mov	r0, r4
 8005692:	4629      	mov	r1, r5
 8005694:	f7fa fe02 	bl	800029c <__adddf3>
 8005698:	4604      	mov	r4, r0
 800569a:	460d      	mov	r5, r1
 800569c:	ec45 4b10 	vmov	d0, r4, r5
 80056a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a4:	2d00      	cmp	r5, #0
 80056a6:	dc0e      	bgt.n	80056c6 <__ieee754_sqrt+0x56>
 80056a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80056ac:	4322      	orrs	r2, r4
 80056ae:	d0f5      	beq.n	800569c <__ieee754_sqrt+0x2c>
 80056b0:	b19d      	cbz	r5, 80056da <__ieee754_sqrt+0x6a>
 80056b2:	4622      	mov	r2, r4
 80056b4:	4620      	mov	r0, r4
 80056b6:	4629      	mov	r1, r5
 80056b8:	f7fa fdee 	bl	8000298 <__aeabi_dsub>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	f7fb f8cc 	bl	800085c <__aeabi_ddiv>
 80056c4:	e7e8      	b.n	8005698 <__ieee754_sqrt+0x28>
 80056c6:	152a      	asrs	r2, r5, #20
 80056c8:	d115      	bne.n	80056f6 <__ieee754_sqrt+0x86>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e009      	b.n	80056e2 <__ieee754_sqrt+0x72>
 80056ce:	0acb      	lsrs	r3, r1, #11
 80056d0:	3a15      	subs	r2, #21
 80056d2:	0549      	lsls	r1, r1, #21
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0fa      	beq.n	80056ce <__ieee754_sqrt+0x5e>
 80056d8:	e7f7      	b.n	80056ca <__ieee754_sqrt+0x5a>
 80056da:	462a      	mov	r2, r5
 80056dc:	e7fa      	b.n	80056d4 <__ieee754_sqrt+0x64>
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	3001      	adds	r0, #1
 80056e2:	02dc      	lsls	r4, r3, #11
 80056e4:	d5fb      	bpl.n	80056de <__ieee754_sqrt+0x6e>
 80056e6:	1e44      	subs	r4, r0, #1
 80056e8:	1b12      	subs	r2, r2, r4
 80056ea:	f1c0 0420 	rsb	r4, r0, #32
 80056ee:	fa21 f404 	lsr.w	r4, r1, r4
 80056f2:	4323      	orrs	r3, r4
 80056f4:	4081      	lsls	r1, r0
 80056f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056fa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80056fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005702:	07d2      	lsls	r2, r2, #31
 8005704:	bf5c      	itt	pl
 8005706:	005b      	lslpl	r3, r3, #1
 8005708:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800570c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005710:	bf58      	it	pl
 8005712:	0049      	lslpl	r1, r1, #1
 8005714:	2600      	movs	r6, #0
 8005716:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800571a:	106d      	asrs	r5, r5, #1
 800571c:	0049      	lsls	r1, r1, #1
 800571e:	2016      	movs	r0, #22
 8005720:	4632      	mov	r2, r6
 8005722:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005726:	1917      	adds	r7, r2, r4
 8005728:	429f      	cmp	r7, r3
 800572a:	bfde      	ittt	le
 800572c:	193a      	addle	r2, r7, r4
 800572e:	1bdb      	suble	r3, r3, r7
 8005730:	1936      	addle	r6, r6, r4
 8005732:	0fcf      	lsrs	r7, r1, #31
 8005734:	3801      	subs	r0, #1
 8005736:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800573a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800573e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005742:	d1f0      	bne.n	8005726 <__ieee754_sqrt+0xb6>
 8005744:	4604      	mov	r4, r0
 8005746:	2720      	movs	r7, #32
 8005748:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800574c:	429a      	cmp	r2, r3
 800574e:	eb00 0e0c 	add.w	lr, r0, ip
 8005752:	db02      	blt.n	800575a <__ieee754_sqrt+0xea>
 8005754:	d113      	bne.n	800577e <__ieee754_sqrt+0x10e>
 8005756:	458e      	cmp	lr, r1
 8005758:	d811      	bhi.n	800577e <__ieee754_sqrt+0x10e>
 800575a:	f1be 0f00 	cmp.w	lr, #0
 800575e:	eb0e 000c 	add.w	r0, lr, ip
 8005762:	da42      	bge.n	80057ea <__ieee754_sqrt+0x17a>
 8005764:	2800      	cmp	r0, #0
 8005766:	db40      	blt.n	80057ea <__ieee754_sqrt+0x17a>
 8005768:	f102 0801 	add.w	r8, r2, #1
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	458e      	cmp	lr, r1
 8005770:	bf88      	it	hi
 8005772:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005776:	eba1 010e 	sub.w	r1, r1, lr
 800577a:	4464      	add	r4, ip
 800577c:	4642      	mov	r2, r8
 800577e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005782:	3f01      	subs	r7, #1
 8005784:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005788:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800578c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005790:	d1dc      	bne.n	800574c <__ieee754_sqrt+0xdc>
 8005792:	4319      	orrs	r1, r3
 8005794:	d01b      	beq.n	80057ce <__ieee754_sqrt+0x15e>
 8005796:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800581c <__ieee754_sqrt+0x1ac>
 800579a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005820 <__ieee754_sqrt+0x1b0>
 800579e:	e9da 0100 	ldrd	r0, r1, [sl]
 80057a2:	e9db 2300 	ldrd	r2, r3, [fp]
 80057a6:	f7fa fd77 	bl	8000298 <__aeabi_dsub>
 80057aa:	e9da 8900 	ldrd	r8, r9, [sl]
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4640      	mov	r0, r8
 80057b4:	4649      	mov	r1, r9
 80057b6:	f7fb f9a3 	bl	8000b00 <__aeabi_dcmple>
 80057ba:	b140      	cbz	r0, 80057ce <__ieee754_sqrt+0x15e>
 80057bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80057c0:	e9da 0100 	ldrd	r0, r1, [sl]
 80057c4:	e9db 2300 	ldrd	r2, r3, [fp]
 80057c8:	d111      	bne.n	80057ee <__ieee754_sqrt+0x17e>
 80057ca:	3601      	adds	r6, #1
 80057cc:	463c      	mov	r4, r7
 80057ce:	1072      	asrs	r2, r6, #1
 80057d0:	0863      	lsrs	r3, r4, #1
 80057d2:	07f1      	lsls	r1, r6, #31
 80057d4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80057d8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80057dc:	bf48      	it	mi
 80057de:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80057e2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80057e6:	4618      	mov	r0, r3
 80057e8:	e756      	b.n	8005698 <__ieee754_sqrt+0x28>
 80057ea:	4690      	mov	r8, r2
 80057ec:	e7be      	b.n	800576c <__ieee754_sqrt+0xfc>
 80057ee:	f7fa fd55 	bl	800029c <__adddf3>
 80057f2:	e9da 8900 	ldrd	r8, r9, [sl]
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4640      	mov	r0, r8
 80057fc:	4649      	mov	r1, r9
 80057fe:	f7fb f975 	bl	8000aec <__aeabi_dcmplt>
 8005802:	b120      	cbz	r0, 800580e <__ieee754_sqrt+0x19e>
 8005804:	1ca0      	adds	r0, r4, #2
 8005806:	bf08      	it	eq
 8005808:	3601      	addeq	r6, #1
 800580a:	3402      	adds	r4, #2
 800580c:	e7df      	b.n	80057ce <__ieee754_sqrt+0x15e>
 800580e:	1c63      	adds	r3, r4, #1
 8005810:	f023 0401 	bic.w	r4, r3, #1
 8005814:	e7db      	b.n	80057ce <__ieee754_sqrt+0x15e>
 8005816:	bf00      	nop
 8005818:	7ff00000 	.word	0x7ff00000
 800581c:	20000078 	.word	0x20000078
 8005820:	20000070 	.word	0x20000070
 8005824:	00000000 	.word	0x00000000

08005828 <__ieee754_pow>:
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	b091      	sub	sp, #68	@ 0x44
 800582e:	ed8d 1b00 	vstr	d1, [sp]
 8005832:	e9dd 1900 	ldrd	r1, r9, [sp]
 8005836:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800583a:	ea5a 0001 	orrs.w	r0, sl, r1
 800583e:	ec57 6b10 	vmov	r6, r7, d0
 8005842:	d113      	bne.n	800586c <__ieee754_pow+0x44>
 8005844:	19b3      	adds	r3, r6, r6
 8005846:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800584a:	4152      	adcs	r2, r2
 800584c:	4298      	cmp	r0, r3
 800584e:	4b98      	ldr	r3, [pc, #608]	@ (8005ab0 <__ieee754_pow+0x288>)
 8005850:	4193      	sbcs	r3, r2
 8005852:	f080 84ea 	bcs.w	800622a <__ieee754_pow+0xa02>
 8005856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800585a:	4630      	mov	r0, r6
 800585c:	4639      	mov	r1, r7
 800585e:	f7fa fd1d 	bl	800029c <__adddf3>
 8005862:	ec41 0b10 	vmov	d0, r0, r1
 8005866:	b011      	add	sp, #68	@ 0x44
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586c:	4a91      	ldr	r2, [pc, #580]	@ (8005ab4 <__ieee754_pow+0x28c>)
 800586e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005872:	4590      	cmp	r8, r2
 8005874:	463d      	mov	r5, r7
 8005876:	4633      	mov	r3, r6
 8005878:	d806      	bhi.n	8005888 <__ieee754_pow+0x60>
 800587a:	d101      	bne.n	8005880 <__ieee754_pow+0x58>
 800587c:	2e00      	cmp	r6, #0
 800587e:	d1ea      	bne.n	8005856 <__ieee754_pow+0x2e>
 8005880:	4592      	cmp	sl, r2
 8005882:	d801      	bhi.n	8005888 <__ieee754_pow+0x60>
 8005884:	d10e      	bne.n	80058a4 <__ieee754_pow+0x7c>
 8005886:	b169      	cbz	r1, 80058a4 <__ieee754_pow+0x7c>
 8005888:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800588c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005890:	431d      	orrs	r5, r3
 8005892:	d1e0      	bne.n	8005856 <__ieee754_pow+0x2e>
 8005894:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005898:	18db      	adds	r3, r3, r3
 800589a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800589e:	4152      	adcs	r2, r2
 80058a0:	429d      	cmp	r5, r3
 80058a2:	e7d4      	b.n	800584e <__ieee754_pow+0x26>
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	46c3      	mov	fp, r8
 80058a8:	da3a      	bge.n	8005920 <__ieee754_pow+0xf8>
 80058aa:	4a83      	ldr	r2, [pc, #524]	@ (8005ab8 <__ieee754_pow+0x290>)
 80058ac:	4592      	cmp	sl, r2
 80058ae:	d84d      	bhi.n	800594c <__ieee754_pow+0x124>
 80058b0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80058b4:	4592      	cmp	sl, r2
 80058b6:	f240 84c7 	bls.w	8006248 <__ieee754_pow+0xa20>
 80058ba:	ea4f 522a 	mov.w	r2, sl, asr #20
 80058be:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80058c2:	2a14      	cmp	r2, #20
 80058c4:	dd0f      	ble.n	80058e6 <__ieee754_pow+0xbe>
 80058c6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80058ca:	fa21 f402 	lsr.w	r4, r1, r2
 80058ce:	fa04 f202 	lsl.w	r2, r4, r2
 80058d2:	428a      	cmp	r2, r1
 80058d4:	f040 84b8 	bne.w	8006248 <__ieee754_pow+0xa20>
 80058d8:	f004 0401 	and.w	r4, r4, #1
 80058dc:	f1c4 0402 	rsb	r4, r4, #2
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d158      	bne.n	8005996 <__ieee754_pow+0x16e>
 80058e4:	e00e      	b.n	8005904 <__ieee754_pow+0xdc>
 80058e6:	2900      	cmp	r1, #0
 80058e8:	d154      	bne.n	8005994 <__ieee754_pow+0x16c>
 80058ea:	f1c2 0214 	rsb	r2, r2, #20
 80058ee:	fa4a f402 	asr.w	r4, sl, r2
 80058f2:	fa04 f202 	lsl.w	r2, r4, r2
 80058f6:	4552      	cmp	r2, sl
 80058f8:	f040 84a3 	bne.w	8006242 <__ieee754_pow+0xa1a>
 80058fc:	f004 0401 	and.w	r4, r4, #1
 8005900:	f1c4 0402 	rsb	r4, r4, #2
 8005904:	4a6d      	ldr	r2, [pc, #436]	@ (8005abc <__ieee754_pow+0x294>)
 8005906:	4592      	cmp	sl, r2
 8005908:	d12e      	bne.n	8005968 <__ieee754_pow+0x140>
 800590a:	f1b9 0f00 	cmp.w	r9, #0
 800590e:	f280 8494 	bge.w	800623a <__ieee754_pow+0xa12>
 8005912:	496a      	ldr	r1, [pc, #424]	@ (8005abc <__ieee754_pow+0x294>)
 8005914:	4632      	mov	r2, r6
 8005916:	463b      	mov	r3, r7
 8005918:	2000      	movs	r0, #0
 800591a:	f7fa ff9f 	bl	800085c <__aeabi_ddiv>
 800591e:	e7a0      	b.n	8005862 <__ieee754_pow+0x3a>
 8005920:	2400      	movs	r4, #0
 8005922:	bbc1      	cbnz	r1, 8005996 <__ieee754_pow+0x16e>
 8005924:	4a63      	ldr	r2, [pc, #396]	@ (8005ab4 <__ieee754_pow+0x28c>)
 8005926:	4592      	cmp	sl, r2
 8005928:	d1ec      	bne.n	8005904 <__ieee754_pow+0xdc>
 800592a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800592e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005932:	431a      	orrs	r2, r3
 8005934:	f000 8479 	beq.w	800622a <__ieee754_pow+0xa02>
 8005938:	4b61      	ldr	r3, [pc, #388]	@ (8005ac0 <__ieee754_pow+0x298>)
 800593a:	4598      	cmp	r8, r3
 800593c:	d908      	bls.n	8005950 <__ieee754_pow+0x128>
 800593e:	f1b9 0f00 	cmp.w	r9, #0
 8005942:	f2c0 8476 	blt.w	8006232 <__ieee754_pow+0xa0a>
 8005946:	e9dd 0100 	ldrd	r0, r1, [sp]
 800594a:	e78a      	b.n	8005862 <__ieee754_pow+0x3a>
 800594c:	2402      	movs	r4, #2
 800594e:	e7e8      	b.n	8005922 <__ieee754_pow+0xfa>
 8005950:	f1b9 0f00 	cmp.w	r9, #0
 8005954:	f04f 0000 	mov.w	r0, #0
 8005958:	f04f 0100 	mov.w	r1, #0
 800595c:	da81      	bge.n	8005862 <__ieee754_pow+0x3a>
 800595e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005962:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005966:	e77c      	b.n	8005862 <__ieee754_pow+0x3a>
 8005968:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800596c:	d106      	bne.n	800597c <__ieee754_pow+0x154>
 800596e:	4632      	mov	r2, r6
 8005970:	463b      	mov	r3, r7
 8005972:	4630      	mov	r0, r6
 8005974:	4639      	mov	r1, r7
 8005976:	f7fa fe47 	bl	8000608 <__aeabi_dmul>
 800597a:	e772      	b.n	8005862 <__ieee754_pow+0x3a>
 800597c:	4a51      	ldr	r2, [pc, #324]	@ (8005ac4 <__ieee754_pow+0x29c>)
 800597e:	4591      	cmp	r9, r2
 8005980:	d109      	bne.n	8005996 <__ieee754_pow+0x16e>
 8005982:	2d00      	cmp	r5, #0
 8005984:	db07      	blt.n	8005996 <__ieee754_pow+0x16e>
 8005986:	ec47 6b10 	vmov	d0, r6, r7
 800598a:	b011      	add	sp, #68	@ 0x44
 800598c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005990:	f7ff be6e 	b.w	8005670 <__ieee754_sqrt>
 8005994:	2400      	movs	r4, #0
 8005996:	ec47 6b10 	vmov	d0, r6, r7
 800599a:	9302      	str	r3, [sp, #8]
 800599c:	f000 fc88 	bl	80062b0 <fabs>
 80059a0:	9b02      	ldr	r3, [sp, #8]
 80059a2:	ec51 0b10 	vmov	r0, r1, d0
 80059a6:	bb53      	cbnz	r3, 80059fe <__ieee754_pow+0x1d6>
 80059a8:	4b44      	ldr	r3, [pc, #272]	@ (8005abc <__ieee754_pow+0x294>)
 80059aa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d002      	beq.n	80059b8 <__ieee754_pow+0x190>
 80059b2:	f1b8 0f00 	cmp.w	r8, #0
 80059b6:	d122      	bne.n	80059fe <__ieee754_pow+0x1d6>
 80059b8:	f1b9 0f00 	cmp.w	r9, #0
 80059bc:	da05      	bge.n	80059ca <__ieee754_pow+0x1a2>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	2000      	movs	r0, #0
 80059c4:	493d      	ldr	r1, [pc, #244]	@ (8005abc <__ieee754_pow+0x294>)
 80059c6:	f7fa ff49 	bl	800085c <__aeabi_ddiv>
 80059ca:	2d00      	cmp	r5, #0
 80059cc:	f6bf af49 	bge.w	8005862 <__ieee754_pow+0x3a>
 80059d0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80059d4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80059d8:	ea58 0804 	orrs.w	r8, r8, r4
 80059dc:	d108      	bne.n	80059f0 <__ieee754_pow+0x1c8>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4610      	mov	r0, r2
 80059e4:	4619      	mov	r1, r3
 80059e6:	f7fa fc57 	bl	8000298 <__aeabi_dsub>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	e794      	b.n	800591a <__ieee754_pow+0xf2>
 80059f0:	2c01      	cmp	r4, #1
 80059f2:	f47f af36 	bne.w	8005862 <__ieee754_pow+0x3a>
 80059f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80059fa:	4619      	mov	r1, r3
 80059fc:	e731      	b.n	8005862 <__ieee754_pow+0x3a>
 80059fe:	0feb      	lsrs	r3, r5, #31
 8005a00:	3b01      	subs	r3, #1
 8005a02:	ea53 0204 	orrs.w	r2, r3, r4
 8005a06:	d102      	bne.n	8005a0e <__ieee754_pow+0x1e6>
 8005a08:	4632      	mov	r2, r6
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	e7e9      	b.n	80059e2 <__ieee754_pow+0x1ba>
 8005a0e:	3c01      	subs	r4, #1
 8005a10:	431c      	orrs	r4, r3
 8005a12:	d016      	beq.n	8005a42 <__ieee754_pow+0x21a>
 8005a14:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005aa0 <__ieee754_pow+0x278>
 8005a18:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005a1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a20:	f240 8112 	bls.w	8005c48 <__ieee754_pow+0x420>
 8005a24:	4b28      	ldr	r3, [pc, #160]	@ (8005ac8 <__ieee754_pow+0x2a0>)
 8005a26:	459a      	cmp	sl, r3
 8005a28:	4b25      	ldr	r3, [pc, #148]	@ (8005ac0 <__ieee754_pow+0x298>)
 8005a2a:	d916      	bls.n	8005a5a <__ieee754_pow+0x232>
 8005a2c:	4598      	cmp	r8, r3
 8005a2e:	d80b      	bhi.n	8005a48 <__ieee754_pow+0x220>
 8005a30:	f1b9 0f00 	cmp.w	r9, #0
 8005a34:	da0b      	bge.n	8005a4e <__ieee754_pow+0x226>
 8005a36:	2000      	movs	r0, #0
 8005a38:	b011      	add	sp, #68	@ 0x44
 8005a3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3e:	f000 bcf3 	b.w	8006428 <__math_oflow>
 8005a42:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8005aa8 <__ieee754_pow+0x280>
 8005a46:	e7e7      	b.n	8005a18 <__ieee754_pow+0x1f0>
 8005a48:	f1b9 0f00 	cmp.w	r9, #0
 8005a4c:	dcf3      	bgt.n	8005a36 <__ieee754_pow+0x20e>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	b011      	add	sp, #68	@ 0x44
 8005a52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a56:	f000 bcdf 	b.w	8006418 <__math_uflow>
 8005a5a:	4598      	cmp	r8, r3
 8005a5c:	d20c      	bcs.n	8005a78 <__ieee754_pow+0x250>
 8005a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a62:	2200      	movs	r2, #0
 8005a64:	2300      	movs	r3, #0
 8005a66:	f7fb f841 	bl	8000aec <__aeabi_dcmplt>
 8005a6a:	3800      	subs	r0, #0
 8005a6c:	bf18      	it	ne
 8005a6e:	2001      	movne	r0, #1
 8005a70:	f1b9 0f00 	cmp.w	r9, #0
 8005a74:	daec      	bge.n	8005a50 <__ieee754_pow+0x228>
 8005a76:	e7df      	b.n	8005a38 <__ieee754_pow+0x210>
 8005a78:	4b10      	ldr	r3, [pc, #64]	@ (8005abc <__ieee754_pow+0x294>)
 8005a7a:	4598      	cmp	r8, r3
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	d924      	bls.n	8005acc <__ieee754_pow+0x2a4>
 8005a82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a86:	2300      	movs	r3, #0
 8005a88:	f7fb f830 	bl	8000aec <__aeabi_dcmplt>
 8005a8c:	3800      	subs	r0, #0
 8005a8e:	bf18      	it	ne
 8005a90:	2001      	movne	r0, #1
 8005a92:	f1b9 0f00 	cmp.w	r9, #0
 8005a96:	dccf      	bgt.n	8005a38 <__ieee754_pow+0x210>
 8005a98:	e7da      	b.n	8005a50 <__ieee754_pow+0x228>
 8005a9a:	bf00      	nop
 8005a9c:	f3af 8000 	nop.w
 8005aa0:	00000000 	.word	0x00000000
 8005aa4:	3ff00000 	.word	0x3ff00000
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	bff00000 	.word	0xbff00000
 8005ab0:	fff00000 	.word	0xfff00000
 8005ab4:	7ff00000 	.word	0x7ff00000
 8005ab8:	433fffff 	.word	0x433fffff
 8005abc:	3ff00000 	.word	0x3ff00000
 8005ac0:	3fefffff 	.word	0x3fefffff
 8005ac4:	3fe00000 	.word	0x3fe00000
 8005ac8:	43f00000 	.word	0x43f00000
 8005acc:	4b5a      	ldr	r3, [pc, #360]	@ (8005c38 <__ieee754_pow+0x410>)
 8005ace:	f7fa fbe3 	bl	8000298 <__aeabi_dsub>
 8005ad2:	a351      	add	r3, pc, #324	@ (adr r3, 8005c18 <__ieee754_pow+0x3f0>)
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	4604      	mov	r4, r0
 8005ada:	460d      	mov	r5, r1
 8005adc:	f7fa fd94 	bl	8000608 <__aeabi_dmul>
 8005ae0:	a34f      	add	r3, pc, #316	@ (adr r3, 8005c20 <__ieee754_pow+0x3f8>)
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	460f      	mov	r7, r1
 8005aea:	4620      	mov	r0, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7fa fd8b 	bl	8000608 <__aeabi_dmul>
 8005af2:	4b52      	ldr	r3, [pc, #328]	@ (8005c3c <__ieee754_pow+0x414>)
 8005af4:	4682      	mov	sl, r0
 8005af6:	468b      	mov	fp, r1
 8005af8:	2200      	movs	r2, #0
 8005afa:	4620      	mov	r0, r4
 8005afc:	4629      	mov	r1, r5
 8005afe:	f7fa fd83 	bl	8000608 <__aeabi_dmul>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	a148      	add	r1, pc, #288	@ (adr r1, 8005c28 <__ieee754_pow+0x400>)
 8005b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b0c:	f7fa fbc4 	bl	8000298 <__aeabi_dsub>
 8005b10:	4622      	mov	r2, r4
 8005b12:	462b      	mov	r3, r5
 8005b14:	f7fa fd78 	bl	8000608 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	4948      	ldr	r1, [pc, #288]	@ (8005c40 <__ieee754_pow+0x418>)
 8005b20:	f7fa fbba 	bl	8000298 <__aeabi_dsub>
 8005b24:	4622      	mov	r2, r4
 8005b26:	4680      	mov	r8, r0
 8005b28:	4689      	mov	r9, r1
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	4629      	mov	r1, r5
 8005b30:	f7fa fd6a 	bl	8000608 <__aeabi_dmul>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4640      	mov	r0, r8
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	f7fa fd64 	bl	8000608 <__aeabi_dmul>
 8005b40:	a33b      	add	r3, pc, #236	@ (adr r3, 8005c30 <__ieee754_pow+0x408>)
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f7fa fd5f 	bl	8000608 <__aeabi_dmul>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4650      	mov	r0, sl
 8005b50:	4659      	mov	r1, fp
 8005b52:	f7fa fba1 	bl	8000298 <__aeabi_dsub>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4680      	mov	r8, r0
 8005b5c:	4689      	mov	r9, r1
 8005b5e:	4630      	mov	r0, r6
 8005b60:	4639      	mov	r1, r7
 8005b62:	f7fa fb9b 	bl	800029c <__adddf3>
 8005b66:	2400      	movs	r4, #0
 8005b68:	4632      	mov	r2, r6
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	460d      	mov	r5, r1
 8005b70:	f7fa fb92 	bl	8000298 <__aeabi_dsub>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4640      	mov	r0, r8
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	f7fa fb8c 	bl	8000298 <__aeabi_dsub>
 8005b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9304      	str	r3, [sp, #16]
 8005b8c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005b90:	4606      	mov	r6, r0
 8005b92:	460f      	mov	r7, r1
 8005b94:	4652      	mov	r2, sl
 8005b96:	465b      	mov	r3, fp
 8005b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b9c:	f7fa fb7c 	bl	8000298 <__aeabi_dsub>
 8005ba0:	4622      	mov	r2, r4
 8005ba2:	462b      	mov	r3, r5
 8005ba4:	f7fa fd30 	bl	8000608 <__aeabi_dmul>
 8005ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bac:	4680      	mov	r8, r0
 8005bae:	4689      	mov	r9, r1
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa fd28 	bl	8000608 <__aeabi_dmul>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	f7fa fb6c 	bl	800029c <__adddf3>
 8005bc4:	4652      	mov	r2, sl
 8005bc6:	465b      	mov	r3, fp
 8005bc8:	4606      	mov	r6, r0
 8005bca:	460f      	mov	r7, r1
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	f7fa fd1a 	bl	8000608 <__aeabi_dmul>
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	4680      	mov	r8, r0
 8005bda:	4689      	mov	r9, r1
 8005bdc:	4630      	mov	r0, r6
 8005bde:	4639      	mov	r1, r7
 8005be0:	f7fa fb5c 	bl	800029c <__adddf3>
 8005be4:	4b17      	ldr	r3, [pc, #92]	@ (8005c44 <__ieee754_pow+0x41c>)
 8005be6:	4299      	cmp	r1, r3
 8005be8:	4604      	mov	r4, r0
 8005bea:	460d      	mov	r5, r1
 8005bec:	468a      	mov	sl, r1
 8005bee:	468b      	mov	fp, r1
 8005bf0:	f340 82ef 	ble.w	80061d2 <__ieee754_pow+0x9aa>
 8005bf4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005bf8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005bfc:	4303      	orrs	r3, r0
 8005bfe:	f000 81e8 	beq.w	8005fd2 <__ieee754_pow+0x7aa>
 8005c02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c06:	2200      	movs	r2, #0
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f7fa ff6f 	bl	8000aec <__aeabi_dcmplt>
 8005c0e:	3800      	subs	r0, #0
 8005c10:	bf18      	it	ne
 8005c12:	2001      	movne	r0, #1
 8005c14:	e710      	b.n	8005a38 <__ieee754_pow+0x210>
 8005c16:	bf00      	nop
 8005c18:	60000000 	.word	0x60000000
 8005c1c:	3ff71547 	.word	0x3ff71547
 8005c20:	f85ddf44 	.word	0xf85ddf44
 8005c24:	3e54ae0b 	.word	0x3e54ae0b
 8005c28:	55555555 	.word	0x55555555
 8005c2c:	3fd55555 	.word	0x3fd55555
 8005c30:	652b82fe 	.word	0x652b82fe
 8005c34:	3ff71547 	.word	0x3ff71547
 8005c38:	3ff00000 	.word	0x3ff00000
 8005c3c:	3fd00000 	.word	0x3fd00000
 8005c40:	3fe00000 	.word	0x3fe00000
 8005c44:	408fffff 	.word	0x408fffff
 8005c48:	4bd5      	ldr	r3, [pc, #852]	@ (8005fa0 <__ieee754_pow+0x778>)
 8005c4a:	402b      	ands	r3, r5
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	b92b      	cbnz	r3, 8005c5c <__ieee754_pow+0x434>
 8005c50:	4bd4      	ldr	r3, [pc, #848]	@ (8005fa4 <__ieee754_pow+0x77c>)
 8005c52:	f7fa fcd9 	bl	8000608 <__aeabi_dmul>
 8005c56:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8005c5a:	468b      	mov	fp, r1
 8005c5c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8005c60:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005c64:	4413      	add	r3, r2
 8005c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c68:	4bcf      	ldr	r3, [pc, #828]	@ (8005fa8 <__ieee754_pow+0x780>)
 8005c6a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8005c6e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8005c72:	459b      	cmp	fp, r3
 8005c74:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005c78:	dd08      	ble.n	8005c8c <__ieee754_pow+0x464>
 8005c7a:	4bcc      	ldr	r3, [pc, #816]	@ (8005fac <__ieee754_pow+0x784>)
 8005c7c:	459b      	cmp	fp, r3
 8005c7e:	f340 81a5 	ble.w	8005fcc <__ieee754_pow+0x7a4>
 8005c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c84:	3301      	adds	r3, #1
 8005c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c88:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005c8c:	f04f 0a00 	mov.w	sl, #0
 8005c90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005c94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c96:	4bc6      	ldr	r3, [pc, #792]	@ (8005fb0 <__ieee754_pow+0x788>)
 8005c98:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c9c:	ed93 7b00 	vldr	d7, [r3]
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	ec53 2b17 	vmov	r2, r3, d7
 8005ca6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005caa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005cae:	f7fa faf3 	bl	8000298 <__aeabi_dsub>
 8005cb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	460f      	mov	r7, r1
 8005cba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cbe:	f7fa faed 	bl	800029c <__adddf3>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	49ba      	ldr	r1, [pc, #744]	@ (8005fb4 <__ieee754_pow+0x78c>)
 8005cca:	f7fa fdc7 	bl	800085c <__aeabi_ddiv>
 8005cce:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa fc95 	bl	8000608 <__aeabi_dmul>
 8005cde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ce2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8005ce6:	106d      	asrs	r5, r5, #1
 8005ce8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005cec:	f04f 0b00 	mov.w	fp, #0
 8005cf0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005cf4:	4661      	mov	r1, ip
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005cfc:	4658      	mov	r0, fp
 8005cfe:	46e1      	mov	r9, ip
 8005d00:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8005d04:	4614      	mov	r4, r2
 8005d06:	461d      	mov	r5, r3
 8005d08:	f7fa fc7e 	bl	8000608 <__aeabi_dmul>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4630      	mov	r0, r6
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa fac0 	bl	8000298 <__aeabi_dsub>
 8005d18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	460f      	mov	r7, r1
 8005d20:	4620      	mov	r0, r4
 8005d22:	4629      	mov	r1, r5
 8005d24:	f7fa fab8 	bl	8000298 <__aeabi_dsub>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005d30:	f7fa fab2 	bl	8000298 <__aeabi_dsub>
 8005d34:	465a      	mov	r2, fp
 8005d36:	464b      	mov	r3, r9
 8005d38:	f7fa fc66 	bl	8000608 <__aeabi_dmul>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4630      	mov	r0, r6
 8005d42:	4639      	mov	r1, r7
 8005d44:	f7fa faa8 	bl	8000298 <__aeabi_dsub>
 8005d48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005d4c:	f7fa fc5c 	bl	8000608 <__aeabi_dmul>
 8005d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	f7fa fc54 	bl	8000608 <__aeabi_dmul>
 8005d60:	a37d      	add	r3, pc, #500	@ (adr r3, 8005f58 <__ieee754_pow+0x730>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	4604      	mov	r4, r0
 8005d68:	460d      	mov	r5, r1
 8005d6a:	f7fa fc4d 	bl	8000608 <__aeabi_dmul>
 8005d6e:	a37c      	add	r3, pc, #496	@ (adr r3, 8005f60 <__ieee754_pow+0x738>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f7fa fa92 	bl	800029c <__adddf3>
 8005d78:	4622      	mov	r2, r4
 8005d7a:	462b      	mov	r3, r5
 8005d7c:	f7fa fc44 	bl	8000608 <__aeabi_dmul>
 8005d80:	a379      	add	r3, pc, #484	@ (adr r3, 8005f68 <__ieee754_pow+0x740>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa fa89 	bl	800029c <__adddf3>
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	f7fa fc3b 	bl	8000608 <__aeabi_dmul>
 8005d92:	a377      	add	r3, pc, #476	@ (adr r3, 8005f70 <__ieee754_pow+0x748>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f7fa fa80 	bl	800029c <__adddf3>
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	462b      	mov	r3, r5
 8005da0:	f7fa fc32 	bl	8000608 <__aeabi_dmul>
 8005da4:	a374      	add	r3, pc, #464	@ (adr r3, 8005f78 <__ieee754_pow+0x750>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fa77 	bl	800029c <__adddf3>
 8005dae:	4622      	mov	r2, r4
 8005db0:	462b      	mov	r3, r5
 8005db2:	f7fa fc29 	bl	8000608 <__aeabi_dmul>
 8005db6:	a372      	add	r3, pc, #456	@ (adr r3, 8005f80 <__ieee754_pow+0x758>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fa6e 	bl	800029c <__adddf3>
 8005dc0:	4622      	mov	r2, r4
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	460f      	mov	r7, r1
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fc1c 	bl	8000608 <__aeabi_dmul>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	f7fa fc16 	bl	8000608 <__aeabi_dmul>
 8005ddc:	465a      	mov	r2, fp
 8005dde:	4604      	mov	r4, r0
 8005de0:	460d      	mov	r5, r1
 8005de2:	464b      	mov	r3, r9
 8005de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005de8:	f7fa fa58 	bl	800029c <__adddf3>
 8005dec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005df0:	f7fa fc0a 	bl	8000608 <__aeabi_dmul>
 8005df4:	4622      	mov	r2, r4
 8005df6:	462b      	mov	r3, r5
 8005df8:	f7fa fa50 	bl	800029c <__adddf3>
 8005dfc:	465a      	mov	r2, fp
 8005dfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e02:	464b      	mov	r3, r9
 8005e04:	4658      	mov	r0, fp
 8005e06:	4649      	mov	r1, r9
 8005e08:	f7fa fbfe 	bl	8000608 <__aeabi_dmul>
 8005e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8005fb8 <__ieee754_pow+0x790>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	4606      	mov	r6, r0
 8005e12:	460f      	mov	r7, r1
 8005e14:	f7fa fa42 	bl	800029c <__adddf3>
 8005e18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e1c:	f7fa fa3e 	bl	800029c <__adddf3>
 8005e20:	46d8      	mov	r8, fp
 8005e22:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8005e26:	460d      	mov	r5, r1
 8005e28:	465a      	mov	r2, fp
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	4649      	mov	r1, r9
 8005e30:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8005e34:	f7fa fbe8 	bl	8000608 <__aeabi_dmul>
 8005e38:	465c      	mov	r4, fp
 8005e3a:	4680      	mov	r8, r0
 8005e3c:	4689      	mov	r9, r1
 8005e3e:	4b5e      	ldr	r3, [pc, #376]	@ (8005fb8 <__ieee754_pow+0x790>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	4620      	mov	r0, r4
 8005e44:	4629      	mov	r1, r5
 8005e46:	f7fa fa27 	bl	8000298 <__aeabi_dsub>
 8005e4a:	4632      	mov	r2, r6
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	f7fa fa23 	bl	8000298 <__aeabi_dsub>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e5a:	f7fa fa1d 	bl	8000298 <__aeabi_dsub>
 8005e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e62:	f7fa fbd1 	bl	8000608 <__aeabi_dmul>
 8005e66:	4622      	mov	r2, r4
 8005e68:	4606      	mov	r6, r0
 8005e6a:	460f      	mov	r7, r1
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e72:	f7fa fbc9 	bl	8000608 <__aeabi_dmul>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	f7fa fa0d 	bl	800029c <__adddf3>
 8005e82:	4606      	mov	r6, r0
 8005e84:	460f      	mov	r7, r1
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	f7fa fa05 	bl	800029c <__adddf3>
 8005e92:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8005e96:	a33c      	add	r3, pc, #240	@ (adr r3, 8005f88 <__ieee754_pow+0x760>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	4658      	mov	r0, fp
 8005e9e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8005ea2:	460d      	mov	r5, r1
 8005ea4:	f7fa fbb0 	bl	8000608 <__aeabi_dmul>
 8005ea8:	465c      	mov	r4, fp
 8005eaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eae:	4642      	mov	r2, r8
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	f7fa f9ef 	bl	8000298 <__aeabi_dsub>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	f7fa f9e9 	bl	8000298 <__aeabi_dsub>
 8005ec6:	a332      	add	r3, pc, #200	@ (adr r3, 8005f90 <__ieee754_pow+0x768>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f7fa fb9c 	bl	8000608 <__aeabi_dmul>
 8005ed0:	a331      	add	r3, pc, #196	@ (adr r3, 8005f98 <__ieee754_pow+0x770>)
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	460f      	mov	r7, r1
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f7fa fb93 	bl	8000608 <__aeabi_dmul>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	4639      	mov	r1, r7
 8005eea:	f7fa f9d7 	bl	800029c <__adddf3>
 8005eee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ef0:	4b32      	ldr	r3, [pc, #200]	@ (8005fbc <__ieee754_pow+0x794>)
 8005ef2:	4413      	add	r3, r2
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa f9d0 	bl	800029c <__adddf3>
 8005efc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005f02:	f7fa fb17 	bl	8000534 <__aeabi_i2d>
 8005f06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005f08:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc0 <__ieee754_pow+0x798>)
 8005f0a:	4413      	add	r3, r2
 8005f0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f10:	4606      	mov	r6, r0
 8005f12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f16:	460f      	mov	r7, r1
 8005f18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f1c:	f7fa f9be 	bl	800029c <__adddf3>
 8005f20:	4642      	mov	r2, r8
 8005f22:	464b      	mov	r3, r9
 8005f24:	f7fa f9ba 	bl	800029c <__adddf3>
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	f7fa f9b6 	bl	800029c <__adddf3>
 8005f30:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8005f34:	4632      	mov	r2, r6
 8005f36:	463b      	mov	r3, r7
 8005f38:	4658      	mov	r0, fp
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	f7fa f9ac 	bl	8000298 <__aeabi_dsub>
 8005f40:	4642      	mov	r2, r8
 8005f42:	464b      	mov	r3, r9
 8005f44:	f7fa f9a8 	bl	8000298 <__aeabi_dsub>
 8005f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f4c:	f7fa f9a4 	bl	8000298 <__aeabi_dsub>
 8005f50:	465c      	mov	r4, fp
 8005f52:	4602      	mov	r2, r0
 8005f54:	e036      	b.n	8005fc4 <__ieee754_pow+0x79c>
 8005f56:	bf00      	nop
 8005f58:	4a454eef 	.word	0x4a454eef
 8005f5c:	3fca7e28 	.word	0x3fca7e28
 8005f60:	93c9db65 	.word	0x93c9db65
 8005f64:	3fcd864a 	.word	0x3fcd864a
 8005f68:	a91d4101 	.word	0xa91d4101
 8005f6c:	3fd17460 	.word	0x3fd17460
 8005f70:	518f264d 	.word	0x518f264d
 8005f74:	3fd55555 	.word	0x3fd55555
 8005f78:	db6fabff 	.word	0xdb6fabff
 8005f7c:	3fdb6db6 	.word	0x3fdb6db6
 8005f80:	33333303 	.word	0x33333303
 8005f84:	3fe33333 	.word	0x3fe33333
 8005f88:	e0000000 	.word	0xe0000000
 8005f8c:	3feec709 	.word	0x3feec709
 8005f90:	dc3a03fd 	.word	0xdc3a03fd
 8005f94:	3feec709 	.word	0x3feec709
 8005f98:	145b01f5 	.word	0x145b01f5
 8005f9c:	be3e2fe0 	.word	0xbe3e2fe0
 8005fa0:	7ff00000 	.word	0x7ff00000
 8005fa4:	43400000 	.word	0x43400000
 8005fa8:	0003988e 	.word	0x0003988e
 8005fac:	000bb679 	.word	0x000bb679
 8005fb0:	08006638 	.word	0x08006638
 8005fb4:	3ff00000 	.word	0x3ff00000
 8005fb8:	40080000 	.word	0x40080000
 8005fbc:	08006618 	.word	0x08006618
 8005fc0:	08006628 	.word	0x08006628
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fca:	e5d7      	b.n	8005b7c <__ieee754_pow+0x354>
 8005fcc:	f04f 0a01 	mov.w	sl, #1
 8005fd0:	e65e      	b.n	8005c90 <__ieee754_pow+0x468>
 8005fd2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80062a4 <__ieee754_pow+0xa7c>)
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4639      	mov	r1, r7
 8005fdc:	f7fa f95e 	bl	800029c <__adddf3>
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	e9cd 0100 	strd	r0, r1, [sp]
 8005fe6:	464b      	mov	r3, r9
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f7fa f954 	bl	8000298 <__aeabi_dsub>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ff8:	f7fa fd96 	bl	8000b28 <__aeabi_dcmpgt>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	f47f ae00 	bne.w	8005c02 <__ieee754_pow+0x3da>
 8006002:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006006:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800600a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800600e:	fa43 fa0a 	asr.w	sl, r3, sl
 8006012:	44da      	add	sl, fp
 8006014:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006018:	489d      	ldr	r0, [pc, #628]	@ (8006290 <__ieee754_pow+0xa68>)
 800601a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800601e:	4108      	asrs	r0, r1
 8006020:	ea00 030a 	and.w	r3, r0, sl
 8006024:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006028:	f1c1 0114 	rsb	r1, r1, #20
 800602c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006030:	fa4a fa01 	asr.w	sl, sl, r1
 8006034:	f1bb 0f00 	cmp.w	fp, #0
 8006038:	4640      	mov	r0, r8
 800603a:	4649      	mov	r1, r9
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	bfb8      	it	lt
 8006042:	f1ca 0a00 	rsblt	sl, sl, #0
 8006046:	f7fa f927 	bl	8000298 <__aeabi_dsub>
 800604a:	4680      	mov	r8, r0
 800604c:	4689      	mov	r9, r1
 800604e:	4632      	mov	r2, r6
 8006050:	463b      	mov	r3, r7
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	f7fa f921 	bl	800029c <__adddf3>
 800605a:	2400      	movs	r4, #0
 800605c:	a37c      	add	r3, pc, #496	@ (adr r3, 8006250 <__ieee754_pow+0xa28>)
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	4620      	mov	r0, r4
 8006064:	460d      	mov	r5, r1
 8006066:	f7fa facf 	bl	8000608 <__aeabi_dmul>
 800606a:	4642      	mov	r2, r8
 800606c:	e9cd 0100 	strd	r0, r1, [sp]
 8006070:	464b      	mov	r3, r9
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa f90f 	bl	8000298 <__aeabi_dsub>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4630      	mov	r0, r6
 8006080:	4639      	mov	r1, r7
 8006082:	f7fa f909 	bl	8000298 <__aeabi_dsub>
 8006086:	a374      	add	r3, pc, #464	@ (adr r3, 8006258 <__ieee754_pow+0xa30>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f7fa fabc 	bl	8000608 <__aeabi_dmul>
 8006090:	a373      	add	r3, pc, #460	@ (adr r3, 8006260 <__ieee754_pow+0xa38>)
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	4680      	mov	r8, r0
 8006098:	4689      	mov	r9, r1
 800609a:	4620      	mov	r0, r4
 800609c:	4629      	mov	r1, r5
 800609e:	f7fa fab3 	bl	8000608 <__aeabi_dmul>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4640      	mov	r0, r8
 80060a8:	4649      	mov	r1, r9
 80060aa:	f7fa f8f7 	bl	800029c <__adddf3>
 80060ae:	4604      	mov	r4, r0
 80060b0:	460d      	mov	r5, r1
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060ba:	f7fa f8ef 	bl	800029c <__adddf3>
 80060be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060c2:	4680      	mov	r8, r0
 80060c4:	4689      	mov	r9, r1
 80060c6:	f7fa f8e7 	bl	8000298 <__aeabi_dsub>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	f7fa f8e1 	bl	8000298 <__aeabi_dsub>
 80060d6:	4642      	mov	r2, r8
 80060d8:	4606      	mov	r6, r0
 80060da:	460f      	mov	r7, r1
 80060dc:	464b      	mov	r3, r9
 80060de:	4640      	mov	r0, r8
 80060e0:	4649      	mov	r1, r9
 80060e2:	f7fa fa91 	bl	8000608 <__aeabi_dmul>
 80060e6:	a360      	add	r3, pc, #384	@ (adr r3, 8006268 <__ieee754_pow+0xa40>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	f7fa fa8a 	bl	8000608 <__aeabi_dmul>
 80060f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8006270 <__ieee754_pow+0xa48>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f7fa f8cd 	bl	8000298 <__aeabi_dsub>
 80060fe:	4622      	mov	r2, r4
 8006100:	462b      	mov	r3, r5
 8006102:	f7fa fa81 	bl	8000608 <__aeabi_dmul>
 8006106:	a35c      	add	r3, pc, #368	@ (adr r3, 8006278 <__ieee754_pow+0xa50>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f7fa f8c6 	bl	800029c <__adddf3>
 8006110:	4622      	mov	r2, r4
 8006112:	462b      	mov	r3, r5
 8006114:	f7fa fa78 	bl	8000608 <__aeabi_dmul>
 8006118:	a359      	add	r3, pc, #356	@ (adr r3, 8006280 <__ieee754_pow+0xa58>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f7fa f8bb 	bl	8000298 <__aeabi_dsub>
 8006122:	4622      	mov	r2, r4
 8006124:	462b      	mov	r3, r5
 8006126:	f7fa fa6f 	bl	8000608 <__aeabi_dmul>
 800612a:	a357      	add	r3, pc, #348	@ (adr r3, 8006288 <__ieee754_pow+0xa60>)
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f7fa f8b4 	bl	800029c <__adddf3>
 8006134:	4622      	mov	r2, r4
 8006136:	462b      	mov	r3, r5
 8006138:	f7fa fa66 	bl	8000608 <__aeabi_dmul>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa f8a8 	bl	8000298 <__aeabi_dsub>
 8006148:	4604      	mov	r4, r0
 800614a:	460d      	mov	r5, r1
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4640      	mov	r0, r8
 8006152:	4649      	mov	r1, r9
 8006154:	f7fa fa58 	bl	8000608 <__aeabi_dmul>
 8006158:	2200      	movs	r2, #0
 800615a:	e9cd 0100 	strd	r0, r1, [sp]
 800615e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006162:	4620      	mov	r0, r4
 8006164:	4629      	mov	r1, r5
 8006166:	f7fa f897 	bl	8000298 <__aeabi_dsub>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006172:	f7fa fb73 	bl	800085c <__aeabi_ddiv>
 8006176:	4632      	mov	r2, r6
 8006178:	4604      	mov	r4, r0
 800617a:	460d      	mov	r5, r1
 800617c:	463b      	mov	r3, r7
 800617e:	4640      	mov	r0, r8
 8006180:	4649      	mov	r1, r9
 8006182:	f7fa fa41 	bl	8000608 <__aeabi_dmul>
 8006186:	4632      	mov	r2, r6
 8006188:	463b      	mov	r3, r7
 800618a:	f7fa f887 	bl	800029c <__adddf3>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4620      	mov	r0, r4
 8006194:	4629      	mov	r1, r5
 8006196:	f7fa f87f 	bl	8000298 <__aeabi_dsub>
 800619a:	4642      	mov	r2, r8
 800619c:	464b      	mov	r3, r9
 800619e:	f7fa f87b 	bl	8000298 <__aeabi_dsub>
 80061a2:	460b      	mov	r3, r1
 80061a4:	4602      	mov	r2, r0
 80061a6:	493b      	ldr	r1, [pc, #236]	@ (8006294 <__ieee754_pow+0xa6c>)
 80061a8:	2000      	movs	r0, #0
 80061aa:	f7fa f875 	bl	8000298 <__aeabi_dsub>
 80061ae:	ec41 0b10 	vmov	d0, r0, r1
 80061b2:	ee10 3a90 	vmov	r3, s1
 80061b6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80061ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061be:	da30      	bge.n	8006222 <__ieee754_pow+0x9fa>
 80061c0:	4650      	mov	r0, sl
 80061c2:	f000 f87d 	bl	80062c0 <scalbn>
 80061c6:	ec51 0b10 	vmov	r0, r1, d0
 80061ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061ce:	f7ff bbd2 	b.w	8005976 <__ieee754_pow+0x14e>
 80061d2:	4c31      	ldr	r4, [pc, #196]	@ (8006298 <__ieee754_pow+0xa70>)
 80061d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d91a      	bls.n	8006212 <__ieee754_pow+0x9ea>
 80061dc:	4b2f      	ldr	r3, [pc, #188]	@ (800629c <__ieee754_pow+0xa74>)
 80061de:	440b      	add	r3, r1
 80061e0:	4303      	orrs	r3, r0
 80061e2:	d009      	beq.n	80061f8 <__ieee754_pow+0x9d0>
 80061e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2300      	movs	r3, #0
 80061ec:	f7fa fc7e 	bl	8000aec <__aeabi_dcmplt>
 80061f0:	3800      	subs	r0, #0
 80061f2:	bf18      	it	ne
 80061f4:	2001      	movne	r0, #1
 80061f6:	e42b      	b.n	8005a50 <__ieee754_pow+0x228>
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	f7fa f84c 	bl	8000298 <__aeabi_dsub>
 8006200:	4632      	mov	r2, r6
 8006202:	463b      	mov	r3, r7
 8006204:	f7fa fc86 	bl	8000b14 <__aeabi_dcmpge>
 8006208:	2800      	cmp	r0, #0
 800620a:	d1eb      	bne.n	80061e4 <__ieee754_pow+0x9bc>
 800620c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80062ac <__ieee754_pow+0xa84>
 8006210:	e6f7      	b.n	8006002 <__ieee754_pow+0x7da>
 8006212:	469a      	mov	sl, r3
 8006214:	4b22      	ldr	r3, [pc, #136]	@ (80062a0 <__ieee754_pow+0xa78>)
 8006216:	459a      	cmp	sl, r3
 8006218:	f63f aef3 	bhi.w	8006002 <__ieee754_pow+0x7da>
 800621c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006220:	e715      	b.n	800604e <__ieee754_pow+0x826>
 8006222:	ec51 0b10 	vmov	r0, r1, d0
 8006226:	4619      	mov	r1, r3
 8006228:	e7cf      	b.n	80061ca <__ieee754_pow+0x9a2>
 800622a:	491a      	ldr	r1, [pc, #104]	@ (8006294 <__ieee754_pow+0xa6c>)
 800622c:	2000      	movs	r0, #0
 800622e:	f7ff bb18 	b.w	8005862 <__ieee754_pow+0x3a>
 8006232:	2000      	movs	r0, #0
 8006234:	2100      	movs	r1, #0
 8006236:	f7ff bb14 	b.w	8005862 <__ieee754_pow+0x3a>
 800623a:	4630      	mov	r0, r6
 800623c:	4639      	mov	r1, r7
 800623e:	f7ff bb10 	b.w	8005862 <__ieee754_pow+0x3a>
 8006242:	460c      	mov	r4, r1
 8006244:	f7ff bb5e 	b.w	8005904 <__ieee754_pow+0xdc>
 8006248:	2400      	movs	r4, #0
 800624a:	f7ff bb49 	b.w	80058e0 <__ieee754_pow+0xb8>
 800624e:	bf00      	nop
 8006250:	00000000 	.word	0x00000000
 8006254:	3fe62e43 	.word	0x3fe62e43
 8006258:	fefa39ef 	.word	0xfefa39ef
 800625c:	3fe62e42 	.word	0x3fe62e42
 8006260:	0ca86c39 	.word	0x0ca86c39
 8006264:	be205c61 	.word	0xbe205c61
 8006268:	72bea4d0 	.word	0x72bea4d0
 800626c:	3e663769 	.word	0x3e663769
 8006270:	c5d26bf1 	.word	0xc5d26bf1
 8006274:	3ebbbd41 	.word	0x3ebbbd41
 8006278:	af25de2c 	.word	0xaf25de2c
 800627c:	3f11566a 	.word	0x3f11566a
 8006280:	16bebd93 	.word	0x16bebd93
 8006284:	3f66c16c 	.word	0x3f66c16c
 8006288:	5555553e 	.word	0x5555553e
 800628c:	3fc55555 	.word	0x3fc55555
 8006290:	fff00000 	.word	0xfff00000
 8006294:	3ff00000 	.word	0x3ff00000
 8006298:	4090cbff 	.word	0x4090cbff
 800629c:	3f6f3400 	.word	0x3f6f3400
 80062a0:	3fe00000 	.word	0x3fe00000
 80062a4:	652b82fe 	.word	0x652b82fe
 80062a8:	3c971547 	.word	0x3c971547
 80062ac:	4090cc00 	.word	0x4090cc00

080062b0 <fabs>:
 80062b0:	ec51 0b10 	vmov	r0, r1, d0
 80062b4:	4602      	mov	r2, r0
 80062b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80062ba:	ec43 2b10 	vmov	d0, r2, r3
 80062be:	4770      	bx	lr

080062c0 <scalbn>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	ec55 4b10 	vmov	r4, r5, d0
 80062c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80062ca:	4606      	mov	r6, r0
 80062cc:	462b      	mov	r3, r5
 80062ce:	b991      	cbnz	r1, 80062f6 <scalbn+0x36>
 80062d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80062d4:	4323      	orrs	r3, r4
 80062d6:	d03d      	beq.n	8006354 <scalbn+0x94>
 80062d8:	4b35      	ldr	r3, [pc, #212]	@ (80063b0 <scalbn+0xf0>)
 80062da:	4620      	mov	r0, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	2200      	movs	r2, #0
 80062e0:	f7fa f992 	bl	8000608 <__aeabi_dmul>
 80062e4:	4b33      	ldr	r3, [pc, #204]	@ (80063b4 <scalbn+0xf4>)
 80062e6:	429e      	cmp	r6, r3
 80062e8:	4604      	mov	r4, r0
 80062ea:	460d      	mov	r5, r1
 80062ec:	da0f      	bge.n	800630e <scalbn+0x4e>
 80062ee:	a328      	add	r3, pc, #160	@ (adr r3, 8006390 <scalbn+0xd0>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	e01e      	b.n	8006334 <scalbn+0x74>
 80062f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80062fa:	4291      	cmp	r1, r2
 80062fc:	d10b      	bne.n	8006316 <scalbn+0x56>
 80062fe:	4622      	mov	r2, r4
 8006300:	4620      	mov	r0, r4
 8006302:	4629      	mov	r1, r5
 8006304:	f7f9 ffca 	bl	800029c <__adddf3>
 8006308:	4604      	mov	r4, r0
 800630a:	460d      	mov	r5, r1
 800630c:	e022      	b.n	8006354 <scalbn+0x94>
 800630e:	460b      	mov	r3, r1
 8006310:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006314:	3936      	subs	r1, #54	@ 0x36
 8006316:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800631a:	4296      	cmp	r6, r2
 800631c:	dd0d      	ble.n	800633a <scalbn+0x7a>
 800631e:	2d00      	cmp	r5, #0
 8006320:	a11d      	add	r1, pc, #116	@ (adr r1, 8006398 <scalbn+0xd8>)
 8006322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006326:	da02      	bge.n	800632e <scalbn+0x6e>
 8006328:	a11d      	add	r1, pc, #116	@ (adr r1, 80063a0 <scalbn+0xe0>)
 800632a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800632e:	a31a      	add	r3, pc, #104	@ (adr r3, 8006398 <scalbn+0xd8>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f7fa f968 	bl	8000608 <__aeabi_dmul>
 8006338:	e7e6      	b.n	8006308 <scalbn+0x48>
 800633a:	1872      	adds	r2, r6, r1
 800633c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006340:	428a      	cmp	r2, r1
 8006342:	dcec      	bgt.n	800631e <scalbn+0x5e>
 8006344:	2a00      	cmp	r2, #0
 8006346:	dd08      	ble.n	800635a <scalbn+0x9a>
 8006348:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800634c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006350:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006354:	ec45 4b10 	vmov	d0, r4, r5
 8006358:	bd70      	pop	{r4, r5, r6, pc}
 800635a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800635e:	da08      	bge.n	8006372 <scalbn+0xb2>
 8006360:	2d00      	cmp	r5, #0
 8006362:	a10b      	add	r1, pc, #44	@ (adr r1, 8006390 <scalbn+0xd0>)
 8006364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006368:	dac1      	bge.n	80062ee <scalbn+0x2e>
 800636a:	a10f      	add	r1, pc, #60	@ (adr r1, 80063a8 <scalbn+0xe8>)
 800636c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006370:	e7bd      	b.n	80062ee <scalbn+0x2e>
 8006372:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006376:	3236      	adds	r2, #54	@ 0x36
 8006378:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800637c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006380:	4620      	mov	r0, r4
 8006382:	4b0d      	ldr	r3, [pc, #52]	@ (80063b8 <scalbn+0xf8>)
 8006384:	4629      	mov	r1, r5
 8006386:	2200      	movs	r2, #0
 8006388:	e7d4      	b.n	8006334 <scalbn+0x74>
 800638a:	bf00      	nop
 800638c:	f3af 8000 	nop.w
 8006390:	c2f8f359 	.word	0xc2f8f359
 8006394:	01a56e1f 	.word	0x01a56e1f
 8006398:	8800759c 	.word	0x8800759c
 800639c:	7e37e43c 	.word	0x7e37e43c
 80063a0:	8800759c 	.word	0x8800759c
 80063a4:	fe37e43c 	.word	0xfe37e43c
 80063a8:	c2f8f359 	.word	0xc2f8f359
 80063ac:	81a56e1f 	.word	0x81a56e1f
 80063b0:	43500000 	.word	0x43500000
 80063b4:	ffff3cb0 	.word	0xffff3cb0
 80063b8:	3c900000 	.word	0x3c900000

080063bc <with_errno>:
 80063bc:	b510      	push	{r4, lr}
 80063be:	ed2d 8b02 	vpush	{d8}
 80063c2:	eeb0 8a40 	vmov.f32	s16, s0
 80063c6:	eef0 8a60 	vmov.f32	s17, s1
 80063ca:	4604      	mov	r4, r0
 80063cc:	f7fe f9bc 	bl	8004748 <__errno>
 80063d0:	eeb0 0a48 	vmov.f32	s0, s16
 80063d4:	eef0 0a68 	vmov.f32	s1, s17
 80063d8:	ecbd 8b02 	vpop	{d8}
 80063dc:	6004      	str	r4, [r0, #0]
 80063de:	bd10      	pop	{r4, pc}

080063e0 <xflow>:
 80063e0:	4603      	mov	r3, r0
 80063e2:	b507      	push	{r0, r1, r2, lr}
 80063e4:	ec51 0b10 	vmov	r0, r1, d0
 80063e8:	b183      	cbz	r3, 800640c <xflow+0x2c>
 80063ea:	4602      	mov	r2, r0
 80063ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80063f0:	e9cd 2300 	strd	r2, r3, [sp]
 80063f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063f8:	f7fa f906 	bl	8000608 <__aeabi_dmul>
 80063fc:	ec41 0b10 	vmov	d0, r0, r1
 8006400:	2022      	movs	r0, #34	@ 0x22
 8006402:	b003      	add	sp, #12
 8006404:	f85d eb04 	ldr.w	lr, [sp], #4
 8006408:	f7ff bfd8 	b.w	80063bc <with_errno>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	e7ee      	b.n	80063f0 <xflow+0x10>
 8006412:	0000      	movs	r0, r0
 8006414:	0000      	movs	r0, r0
	...

08006418 <__math_uflow>:
 8006418:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006420 <__math_uflow+0x8>
 800641c:	f7ff bfe0 	b.w	80063e0 <xflow>
 8006420:	00000000 	.word	0x00000000
 8006424:	10000000 	.word	0x10000000

08006428 <__math_oflow>:
 8006428:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006430 <__math_oflow+0x8>
 800642c:	f7ff bfd8 	b.w	80063e0 <xflow>
 8006430:	00000000 	.word	0x00000000
 8006434:	70000000 	.word	0x70000000

08006438 <_init>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr

08006444 <_fini>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	bf00      	nop
 8006448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644a:	bc08      	pop	{r3}
 800644c:	469e      	mov	lr, r3
 800644e:	4770      	bx	lr
