
SPI_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d68  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006f18  08006f18  00007f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e8  080070e8  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  080070e8  080070e8  000080e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f0  080070f0  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f0  080070f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070f4  080070f4  000080f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080070f8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009078  2**0
                  CONTENTS
 10 .bss          0000092c  20000078  20000078  00009078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009a4  200009a4  00009078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011487  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002579  00000000  00000000  0001a52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  0001caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0c  00000000  00000000  0001d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002652e  00000000  00000000  0001e414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000112bd  00000000  00000000  00044942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e10b4  00000000  00000000  00055bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136cb3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004918  00000000  00000000  00136cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0013b610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006f00 	.word	0x08006f00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006f00 	.word	0x08006f00

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	@ 0x30
 8000efc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000efe:	f000 fff3 	bl	8001ee8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f02:	f000 f82f 	bl	8000f64 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f06:	f000 f949 	bl	800119c <MX_GPIO_Init>
	MX_ETH_Init();
 8000f0a:	f000 f895 	bl	8001038 <MX_ETH_Init>
	uartInit();
 8000f0e:	f000 ff17 	bl	8001d40 <uartInit>
	MX_USB_OTG_FS_PCD_Init();
 8000f12:	f000 f915 	bl	8001140 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 8000f16:	f000 f8dd 	bl	80010d4 <MX_SPI1_Init>
	MAX31865_Init(3);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 fd0c 	bl	8001938 <MAX31865_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		PT100_Temperature = MAX31865_Get_Temperature();
 8000f20:	f000 fd7a 	bl	8001a18 <MAX31865_Get_Temperature>
 8000f24:	ec53 2b10 	vmov	r2, r3, d0
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fe1c 	bl	8000b68 <__aeabi_d2f>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <main+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]
		printf("\rtemperatura: %d\n", (uint8_t)PT100_Temperature);
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <main+0x64>)
 8000f38:	edd3 7a00 	vldr	s15, [r3]
 8000f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f40:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f44:	793b      	ldrb	r3, [r7, #4]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <main+0x68>)
 8000f4c:	f004 f980 	bl	8005250 <iprintf>
		HAL_Delay(1000);
 8000f50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f54:	f001 f83a 	bl	8001fcc <HAL_Delay>
		PT100_Temperature = MAX31865_Get_Temperature();
 8000f58:	bf00      	nop
 8000f5a:	e7e1      	b.n	8000f20 <main+0x28>
 8000f5c:	200007f8 	.word	0x200007f8
 8000f60:	08006f18 	.word	0x08006f18

08000f64 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2230      	movs	r2, #48	@ 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 fab4 	bl	80054e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <SystemClock_Config+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <SystemClock_Config+0xd0>)
 8000fae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <SystemClock_Config+0xd0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fc4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000fd8:	23a8      	movs	r3, #168	@ 0xa8
 8000fda:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 fef5 	bl	8002dd8 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x94>
		Error_Handler();
 8000ff4:	f000 f994 	bl	8001320 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001004:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001008:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2105      	movs	r1, #5
 8001016:	4618      	mov	r0, r3
 8001018:	f002 f956 	bl	80032c8 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xc2>
		Error_Handler();
 8001022:	f000 f97d 	bl	8001320 <Error_Handler>
	}
}
 8001026:	bf00      	nop
 8001028:	3750      	adds	r7, #80	@ 0x50
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <MX_ETH_Init+0x84>)
 800103e:	4a20      	ldr	r2, [pc, #128]	@ (80010c0 <MX_ETH_Init+0x88>)
 8001040:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <MX_ETH_Init+0x8c>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001048:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <MX_ETH_Init+0x8c>)
 800104a:	2280      	movs	r2, #128	@ 0x80
 800104c:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800104e:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <MX_ETH_Init+0x8c>)
 8001050:	22e1      	movs	r2, #225	@ 0xe1
 8001052:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001054:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <MX_ETH_Init+0x8c>)
 8001056:	2200      	movs	r2, #0
 8001058:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <MX_ETH_Init+0x8c>)
 800105c:	2200      	movs	r2, #0
 800105e:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8001060:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_ETH_Init+0x8c>)
 8001062:	2200      	movs	r2, #0
 8001064:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <MX_ETH_Init+0x84>)
 8001068:	4a16      	ldr	r2, [pc, #88]	@ (80010c4 <MX_ETH_Init+0x8c>)
 800106a:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <MX_ETH_Init+0x84>)
 800106e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001072:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_ETH_Init+0x84>)
 8001076:	4a14      	ldr	r2, [pc, #80]	@ (80010c8 <MX_ETH_Init+0x90>)
 8001078:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <MX_ETH_Init+0x84>)
 800107c:	4a13      	ldr	r2, [pc, #76]	@ (80010cc <MX_ETH_Init+0x94>)
 800107e:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_ETH_Init+0x84>)
 8001082:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001086:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <MX_ETH_Init+0x84>)
 800108a:	f001 f8a9 	bl	80021e0 <HAL_ETH_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ETH_Init+0x60>
		Error_Handler();
 8001094:	f000 f944 	bl	8001320 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8001098:	2238      	movs	r2, #56	@ 0x38
 800109a:	2100      	movs	r1, #0
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <MX_ETH_Init+0x98>)
 800109e:	f004 fa1f 	bl	80054e0 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <MX_ETH_Init+0x98>)
 80010a4:	2221      	movs	r2, #33	@ 0x21
 80010a6:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_ETH_Init+0x98>)
 80010aa:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80010ae:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010b0:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <MX_ETH_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000020c 	.word	0x2000020c
 80010c0:	40028000 	.word	0x40028000
 80010c4:	200007fc 	.word	0x200007fc
 80010c8:	2000016c 	.word	0x2000016c
 80010cc:	200000cc 	.word	0x200000cc
 80010d0:	20000094 	.word	0x20000094

080010d4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80010d8:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <MX_SPI1_Init+0x64>)
 80010da:	4a18      	ldr	r2, [pc, #96]	@ (800113c <MX_SPI1_Init+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <MX_SPI1_Init+0x64>)
 80010e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010e4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_SPI1_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_SPI1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_SPI1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_SPI1_Init+0x64>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <MX_SPI1_Init+0x64>)
 8001100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001104:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_SPI1_Init+0x64>)
 8001108:	2220      	movs	r2, #32
 800110a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110c:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <MX_SPI1_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001112:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_SPI1_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <MX_SPI1_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_SPI1_Init+0x64>)
 8001120:	220a      	movs	r2, #10
 8001122:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <MX_SPI1_Init+0x64>)
 8001126:	f002 faef 	bl	8003708 <HAL_SPI_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001130:	f000 f8f6 	bl	8001320 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200002bc 	.word	0x200002bc
 800113c:	40013000 	.word	0x40013000

08001140 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001146:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800114a:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114e:	2204      	movs	r2, #4
 8001150:	711a      	strb	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001154:	2202      	movs	r2, #2
 8001156:	71da      	strb	r2, [r3, #7]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	719a      	strb	r2, [r3, #6]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001160:	2202      	movs	r2, #2
 8001162:	725a      	strb	r2, [r3, #9]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001166:	2201      	movs	r2, #1
 8001168:	729a      	strb	r2, [r3, #10]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	72da      	strb	r2, [r3, #11]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	731a      	strb	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001178:	2201      	movs	r2, #1
 800117a:	739a      	strb	r2, [r3, #14]
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	73da      	strb	r2, [r3, #15]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001184:	f001 fd19 	bl	8002bba <HAL_PCD_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 800118e:	f000 f8c7 	bl	8001320 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000314 	.word	0x20000314

0800119c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	@ 0x30
 80011a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	4b55      	ldr	r3, [pc, #340]	@ (800130c <MX_GPIO_Init+0x170>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a54      	ldr	r2, [pc, #336]	@ (800130c <MX_GPIO_Init+0x170>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b52      	ldr	r3, [pc, #328]	@ (800130c <MX_GPIO_Init+0x170>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	4b4e      	ldr	r3, [pc, #312]	@ (800130c <MX_GPIO_Init+0x170>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a4d      	ldr	r2, [pc, #308]	@ (800130c <MX_GPIO_Init+0x170>)
 80011d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b4b      	ldr	r3, [pc, #300]	@ (800130c <MX_GPIO_Init+0x170>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b47      	ldr	r3, [pc, #284]	@ (800130c <MX_GPIO_Init+0x170>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a46      	ldr	r2, [pc, #280]	@ (800130c <MX_GPIO_Init+0x170>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b44      	ldr	r3, [pc, #272]	@ (800130c <MX_GPIO_Init+0x170>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b40      	ldr	r3, [pc, #256]	@ (800130c <MX_GPIO_Init+0x170>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a3f      	ldr	r2, [pc, #252]	@ (800130c <MX_GPIO_Init+0x170>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b3d      	ldr	r3, [pc, #244]	@ (800130c <MX_GPIO_Init+0x170>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b39      	ldr	r3, [pc, #228]	@ (800130c <MX_GPIO_Init+0x170>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a38      	ldr	r2, [pc, #224]	@ (800130c <MX_GPIO_Init+0x170>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b36      	ldr	r3, [pc, #216]	@ (800130c <MX_GPIO_Init+0x170>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b32      	ldr	r3, [pc, #200]	@ (800130c <MX_GPIO_Init+0x170>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a31      	ldr	r2, [pc, #196]	@ (800130c <MX_GPIO_Init+0x170>)
 8001248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b2f      	ldr	r3, [pc, #188]	@ (800130c <MX_GPIO_Init+0x170>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2110      	movs	r1, #16
 800125e:	482c      	ldr	r0, [pc, #176]	@ (8001310 <MX_GPIO_Init+0x174>)
 8001260:	f001 fc92 	bl	8002b88 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f244 0181 	movw	r1, #16513	@ 0x4081
 800126a:	482a      	ldr	r0, [pc, #168]	@ (8001314 <MX_GPIO_Init+0x178>)
 800126c:	f001 fc8c 	bl	8002b88 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001270:	2200      	movs	r2, #0
 8001272:	2140      	movs	r1, #64	@ 0x40
 8001274:	4828      	ldr	r0, [pc, #160]	@ (8001318 <MX_GPIO_Init+0x17c>)
 8001276:	f001 fc87 	bl	8002b88 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800127a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800127e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001280:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001284:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4822      	ldr	r0, [pc, #136]	@ (800131c <MX_GPIO_Init+0x180>)
 8001292:	f001 facd 	bl	8002830 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001296:	2310      	movs	r3, #16
 8001298:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4818      	ldr	r0, [pc, #96]	@ (8001310 <MX_GPIO_Init+0x174>)
 80012ae:	f001 fabf 	bl	8002830 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80012b2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80012b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4812      	ldr	r0, [pc, #72]	@ (8001314 <MX_GPIO_Init+0x178>)
 80012cc:	f001 fab0 	bl	8002830 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012d0:	2340      	movs	r3, #64	@ 0x40
 80012d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	480c      	ldr	r0, [pc, #48]	@ (8001318 <MX_GPIO_Init+0x17c>)
 80012e8:	f001 faa2 	bl	8002830 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	@ (8001318 <MX_GPIO_Init+0x17c>)
 8001300:	f001 fa96 	bl	8002830 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001304:	bf00      	nop
 8001306:	3730      	adds	r7, #48	@ 0x30
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40021800 	.word	0x40021800
 800131c:	40020800 	.word	0x40020800

08001320 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <Error_Handler+0x8>

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <HAL_MspInit+0x4c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001340:	6453      	str	r3, [r2, #68]	@ 0x44
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	@ 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	@ 0x38
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a55      	ldr	r2, [pc, #340]	@ (80014f0 <HAL_ETH_MspInit+0x174>)
 800139a:	4293      	cmp	r3, r2
 800139c:	f040 80a4 	bne.w	80014e8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	4b53      	ldr	r3, [pc, #332]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a8:	4a52      	ldr	r2, [pc, #328]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b0:	4b50      	ldr	r3, [pc, #320]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b8:	623b      	str	r3, [r7, #32]
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	4b4c      	ldr	r3, [pc, #304]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	4a4b      	ldr	r2, [pc, #300]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80013cc:	4b49      	ldr	r3, [pc, #292]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	4b45      	ldr	r3, [pc, #276]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	4a44      	ldr	r2, [pc, #272]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80013e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e8:	4b42      	ldr	r3, [pc, #264]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	4b3e      	ldr	r3, [pc, #248]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fc:	4a3d      	ldr	r2, [pc, #244]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6313      	str	r3, [r2, #48]	@ 0x30
 8001404:	4b3b      	ldr	r3, [pc, #236]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	4b37      	ldr	r3, [pc, #220]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	4a36      	ldr	r2, [pc, #216]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001420:	4b34      	ldr	r3, [pc, #208]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	4b30      	ldr	r3, [pc, #192]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001434:	4a2f      	ldr	r2, [pc, #188]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	6313      	str	r3, [r2, #48]	@ 0x30
 800143c:	4b2d      	ldr	r3, [pc, #180]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	4b29      	ldr	r3, [pc, #164]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	4a28      	ldr	r2, [pc, #160]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 8001452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001456:	6313      	str	r3, [r2, #48]	@ 0x30
 8001458:	4b26      	ldr	r3, [pc, #152]	@ (80014f4 <HAL_ETH_MspInit+0x178>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001464:	2332      	movs	r3, #50	@ 0x32
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001474:	230b      	movs	r3, #11
 8001476:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	481e      	ldr	r0, [pc, #120]	@ (80014f8 <HAL_ETH_MspInit+0x17c>)
 8001480:	f001 f9d6 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001484:	2386      	movs	r3, #134	@ 0x86
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001494:	230b      	movs	r3, #11
 8001496:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149c:	4619      	mov	r1, r3
 800149e:	4817      	ldr	r0, [pc, #92]	@ (80014fc <HAL_ETH_MspInit+0x180>)
 80014a0:	f001 f9c6 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b6:	230b      	movs	r3, #11
 80014b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	480f      	ldr	r0, [pc, #60]	@ (8001500 <HAL_ETH_MspInit+0x184>)
 80014c2:	f001 f9b5 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014c6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014d8:	230b      	movs	r3, #11
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4808      	ldr	r0, [pc, #32]	@ (8001504 <HAL_ETH_MspInit+0x188>)
 80014e4:	f001 f9a4 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	3738      	adds	r7, #56	@ 0x38
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40028000 	.word	0x40028000
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400
 8001504:	40021800 	.word	0x40021800

08001508 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	@ 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a28      	ldr	r2, [pc, #160]	@ (80015c8 <HAL_SPI_MspInit+0xc0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d149      	bne.n	80015be <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <HAL_SPI_MspInit+0xc4>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	4a26      	ldr	r2, [pc, #152]	@ (80015cc <HAL_SPI_MspInit+0xc4>)
 8001534:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001538:	6453      	str	r3, [r2, #68]	@ 0x44
 800153a:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <HAL_SPI_MspInit+0xc4>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <HAL_SPI_MspInit+0xc4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a1f      	ldr	r2, [pc, #124]	@ (80015cc <HAL_SPI_MspInit+0xc4>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <HAL_SPI_MspInit+0xc4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <HAL_SPI_MspInit+0xc4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a18      	ldr	r2, [pc, #96]	@ (80015cc <HAL_SPI_MspInit+0xc4>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <HAL_SPI_MspInit+0xc4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800157e:	2360      	movs	r3, #96	@ 0x60
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158e:	2305      	movs	r3, #5
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	480d      	ldr	r0, [pc, #52]	@ (80015d0 <HAL_SPI_MspInit+0xc8>)
 800159a:	f001 f949 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800159e:	2320      	movs	r3, #32
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ae:	2305      	movs	r3, #5
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <HAL_SPI_MspInit+0xcc>)
 80015ba:	f001 f939 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	@ 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40013000 	.word	0x40013000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400

080015d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <HAL_UART_MspInit+0x84>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12c      	bne.n	8001654 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_UART_MspInit+0x88>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_UART_MspInit+0x88>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_UART_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_UART_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_UART_MspInit+0x88>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_UART_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001632:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001644:	2307      	movs	r3, #7
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <HAL_UART_MspInit+0x8c>)
 8001650:	f001 f8ee 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	@ 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40004800 	.word	0x40004800
 8001660:	40023800 	.word	0x40023800
 8001664:	40020c00 	.word	0x40020c00

08001668 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001688:	d13f      	bne.n	800170a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <HAL_PCD_MspInit+0xac>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a20      	ldr	r2, [pc, #128]	@ (8001714 <HAL_PCD_MspInit+0xac>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <HAL_PCD_MspInit+0xac>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016a6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016b8:	230a      	movs	r3, #10
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4815      	ldr	r0, [pc, #84]	@ (8001718 <HAL_PCD_MspInit+0xb0>)
 80016c4:	f001 f8b4 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	480e      	ldr	r0, [pc, #56]	@ (8001718 <HAL_PCD_MspInit+0xb0>)
 80016de:	f001 f8a7 	bl	8002830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <HAL_PCD_MspInit+0xac>)
 80016e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <HAL_PCD_MspInit+0xac>)
 80016e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ec:	6353      	str	r3, [r2, #52]	@ 0x34
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <HAL_PCD_MspInit+0xac>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <HAL_PCD_MspInit+0xac>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fe:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <HAL_PCD_MspInit+0xac>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	@ 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <NMI_Handler+0x4>

08001724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <MemManage_Handler+0x4>

08001734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <UsageFault_Handler+0x4>

08001744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001772:	f000 fc0b 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}

0800177a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e00a      	b.n	80017a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800178c:	f3af 8000 	nop.w
 8001790:	4601      	mov	r1, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	60ba      	str	r2, [r7, #8]
 8001798:	b2ca      	uxtb	r2, r1
 800179a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dbf0      	blt.n	800178c <_read+0x12>
  }

  return len;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e009      	b.n	80017da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	60ba      	str	r2, [r7, #8]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 faf8 	bl	8001dc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	429a      	cmp	r2, r3
 80017e0:	dbf1      	blt.n	80017c6 <_write+0x12>
  }
  return len;
 80017e2:	687b      	ldr	r3, [r7, #4]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_close>:

int _close(int file)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001814:	605a      	str	r2, [r3, #4]
  return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_isatty>:

int _isatty(int file)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800182c:	2301      	movs	r3, #1
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	@ (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f003 fe7a 	bl	800557c <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20030000 	.word	0x20030000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	20000804 	.word	0x20000804
 80018bc:	200009a8 	.word	0x200009a8

080018c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <SystemInit+0x20>)
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ca:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <SystemInit+0x20>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800191c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018e8:	f7ff ffea 	bl	80018c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	@ (8001930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001912:	f003 fe39 	bl	8005588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7ff faef 	bl	8000ef8 <main>
  bx  lr    
 800191a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800191c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001928:	080070f8 	.word	0x080070f8
  ldr r2, =_sbss
 800192c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001930:	200009a4 	.word	0x200009a4

08001934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC_IRQHandler>
	...

08001938 <MAX31865_Init>:
void cs_set();
void cs_reset();

extern SPI_HandleTypeDef hspi1;

void MAX31865_Init(uint8_t num_wires) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
	MAX31865_Sensor_Error = 0;
 8001942:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <MAX31865_Init+0x94>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write[] = { 0x80, 0x00 };
 8001948:	2380      	movs	r3, #128	@ 0x80
 800194a:	81bb      	strh	r3, [r7, #12]

	// RTD configuration according to the number of threads
	if (num_wires == 2 || num_wires == 4) {
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d002      	beq.n	8001958 <MAX31865_Init+0x20>
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d102      	bne.n	800195e <MAX31865_Init+0x26>
		MAX31865_Configuration_register_write[1] = 0xC2;
 8001958:	23c2      	movs	r3, #194	@ 0xc2
 800195a:	737b      	strb	r3, [r7, #13]
 800195c:	e004      	b.n	8001968 <MAX31865_Init+0x30>
	} else if (num_wires == 3) {
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d101      	bne.n	8001968 <MAX31865_Init+0x30>
		MAX31865_Configuration_register_write[1] = 0xD2;
 8001964:	23d2      	movs	r3, #210	@ 0xd2
 8001966:	737b      	strb	r3, [r7, #13]
	}

	// Send configuration bytes to max31865
	cs_set();
 8001968:	f000 f9d2 	bl	8001d10 <cs_set>
	HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 800196c:	f107 010c 	add.w	r1, r7, #12
 8001970:	2364      	movs	r3, #100	@ 0x64
 8001972:	2202      	movs	r2, #2
 8001974:	4816      	ldr	r0, [pc, #88]	@ (80019d0 <MAX31865_Init+0x98>)
 8001976:	f001 ff50 	bl	800381a <HAL_SPI_Transmit>
	cs_reset();
 800197a:	f000 f9d5 	bl	8001d28 <cs_reset>

	if (MAX31865_Configuration_info() == 0xD0) {
 800197e:	f000 f82b 	bl	80019d8 <MAX31865_Configuration_info>
 8001982:	4603      	mov	r3, r0
 8001984:	2bd0      	cmp	r3, #208	@ 0xd0
 8001986:	d118      	bne.n	80019ba <MAX31865_Init+0x82>
		printf("\rInitialization MAX31865 OK\r\n");
 8001988:	4812      	ldr	r0, [pc, #72]	@ (80019d4 <MAX31865_Init+0x9c>)
 800198a:	f003 fcc9 	bl	8005320 <puts>
				printf("\rInitialization MAX31865 OK\r\n");
				break;
			}
		}
	}
}
 800198e:	e019      	b.n	80019c4 <MAX31865_Init+0x8c>
			cs_set();
 8001990:	f000 f9be 	bl	8001d10 <cs_set>
			HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2,100);
 8001994:	f107 010c 	add.w	r1, r7, #12
 8001998:	2364      	movs	r3, #100	@ 0x64
 800199a:	2202      	movs	r2, #2
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <MAX31865_Init+0x98>)
 800199e:	f001 ff3c 	bl	800381a <HAL_SPI_Transmit>
			cs_reset();
 80019a2:	f000 f9c1 	bl	8001d28 <cs_reset>
			if (MAX31865_Configuration_info() == 0xD0) {
 80019a6:	f000 f817 	bl	80019d8 <MAX31865_Configuration_info>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2bd0      	cmp	r3, #208	@ 0xd0
 80019ae:	d104      	bne.n	80019ba <MAX31865_Init+0x82>
				printf("\rInitialization MAX31865 OK\r\n");
 80019b0:	4808      	ldr	r0, [pc, #32]	@ (80019d4 <MAX31865_Init+0x9c>)
 80019b2:	f003 fcb5 	bl	8005320 <puts>
				break;
 80019b6:	bf00      	nop
}
 80019b8:	e004      	b.n	80019c4 <MAX31865_Init+0x8c>
		while (MAX31865_Configuration_info() != 0xD0) {
 80019ba:	f000 f80d 	bl	80019d8 <MAX31865_Configuration_info>
 80019be:	4603      	mov	r3, r0
 80019c0:	2bd0      	cmp	r3, #208	@ 0xd0
 80019c2:	d1e5      	bne.n	8001990 <MAX31865_Init+0x58>
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000808 	.word	0x20000808
 80019d0:	200002bc 	.word	0x200002bc
 80019d4:	08006f30 	.word	0x08006f30

080019d8 <MAX31865_Configuration_info>:

// Get max31865 configuration info
uint8_t MAX31865_Configuration_info(void) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
	uint8_t read_data = 0x00;
 80019de:	2300      	movs	r3, #0
 80019e0:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	71bb      	strb	r3, [r7, #6]
	cs_set();
 80019e6:	f000 f993 	bl	8001d10 <cs_set>
	HAL_SPI_Transmit(&hspi1, &read_data, 1, 100);
 80019ea:	1df9      	adds	r1, r7, #7
 80019ec:	2364      	movs	r3, #100	@ 0x64
 80019ee:	2201      	movs	r2, #1
 80019f0:	4807      	ldr	r0, [pc, #28]	@ (8001a10 <MAX31865_Configuration_info+0x38>)
 80019f2:	f001 ff12 	bl	800381a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100);
 80019f6:	1db9      	adds	r1, r7, #6
 80019f8:	2364      	movs	r3, #100	@ 0x64
 80019fa:	2201      	movs	r2, #1
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <MAX31865_Configuration_info+0x38>)
 80019fe:	f002 f84f 	bl	8003aa0 <HAL_SPI_Receive>
	cs_reset();
 8001a02:	f000 f991 	bl	8001d28 <cs_reset>
	return MAX31865_Configuration;
 8001a06:	79bb      	ldrb	r3, [r7, #6]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200002bc 	.word	0x200002bc
 8001a14:	00000000 	.word	0x00000000

08001a18 <MAX31865_Get_Temperature>:

// Get Temperature
double MAX31865_Get_Temperature(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
		uint8_t Fault_Status;
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	uint8_t MAX31865_start_address_of_the_poll = 0x01;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer[7];

	cs_set();
 8001a22:	f000 f975 	bl	8001d10 <cs_set>
	HAL_SPI_Transmit(&hspi1, &MAX31865_start_address_of_the_poll, 1, 100); // Sends the address of the register from which the data is read
 8001a26:	1df9      	adds	r1, r7, #7
 8001a28:	2364      	movs	r3, #100	@ 0x64
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	482e      	ldr	r0, [pc, #184]	@ (8001ae8 <MAX31865_Get_Temperature+0xd0>)
 8001a2e:	f001 fef4 	bl	800381a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, MAX31865_rx_buffer, 7, 100); // Get All Data
 8001a32:	4639      	mov	r1, r7
 8001a34:	2364      	movs	r3, #100	@ 0x64
 8001a36:	2207      	movs	r2, #7
 8001a38:	482b      	ldr	r0, [pc, #172]	@ (8001ae8 <MAX31865_Get_Temperature+0xd0>)
 8001a3a:	f002 f831 	bl	8003aa0 <HAL_SPI_Receive>
	cs_reset();
 8001a3e:	f000 f973 	bl	8001d28 <cs_reset>

	// assigns information to each regiter in the structure
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0]
 8001a42:	783b      	ldrb	r3, [r7, #0]
			<< 8) | MAX31865_rx_buffer[1]) >> 1;
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	787a      	ldrb	r2, [r7, #1]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	105b      	asrs	r3, r3, #1
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8)
 8001a50:	78bb      	ldrb	r3, [r7, #2]
 8001a52:	021b      	lsls	r3, r3, #8
			| MAX31865_rx_buffer[3]) >> 1;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	105b      	asrs	r3, r3, #1
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8)
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8)
 8001a5e:	793b      	ldrb	r3, [r7, #4]
 8001a60:	021b      	lsls	r3, r3, #8
			| MAX31865_rx_buffer[5];
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	797b      	ldrb	r3, [r7, #5]
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	b29b      	uxth	r3, r3
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8)
 8001a6e:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6];
 8001a70:	79bb      	ldrb	r3, [r7, #6]
 8001a72:	73bb      	strb	r3, [r7, #14]

	// error handling
	if (MAX31865_receieve_data.Fault_Status > 0x00) {
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00b      	beq.n	8001a92 <MAX31865_Get_Temperature+0x7a>

		MAX31865_Sensor_Error = 1;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <MAX31865_Get_Temperature+0xd4>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
		printf("\rSensor Error!\r\n");
 8001a80:	481b      	ldr	r0, [pc, #108]	@ (8001af0 <MAX31865_Get_Temperature+0xd8>)
 8001a82:	f003 fc4d 	bl	8005320 <puts>

		/*----Automatic error reset ----*/
		// Module is reset
		MAX31865_Init(3);
 8001a86:	2003      	movs	r0, #3
 8001a88:	f7ff ff56 	bl	8001938 <MAX31865_Init>
		MAX31865_Sensor_Error = 0;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <MAX31865_Get_Temperature+0xd4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
	}

	// convert ADC values to resistance
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers
 8001a92:	893b      	ldrh	r3, [r7, #8]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fd3d 	bl	8000514 <__aeabi_ui2d>
			* MAX31865_Rref ) / (double) 32768.0; // ADC resolution 15 bits
 8001a9a:	a311      	add	r3, pc, #68	@ (adr r3, 8001ae0 <MAX31865_Get_Temperature+0xc8>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fdb2 	bl	8000608 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <MAX31865_Get_Temperature+0xdc>)
 8001ab2:	f7fe fed3 	bl	800085c <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("\rRrtd = %d\n", (int) data);

	// converts and returns temperature values
	return MAX31865_Get_Temperature_math(data);
 8001abe:	ed97 0b04 	vldr	d0, [r7, #16]
 8001ac2:	f000 f819 	bl	8001af8 <MAX31865_Get_Temperature_math>
 8001ac6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aca:	eef0 7a60 	vmov.f32	s15, s1
}
 8001ace:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad2:	eef0 0a67 	vmov.f32	s1, s15
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	f3af 8000 	nop.w
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	407ac800 	.word	0x407ac800
 8001ae8:	200002bc 	.word	0x200002bc
 8001aec:	20000808 	.word	0x20000808
 8001af0:	08006f50 	.word	0x08006f50
 8001af4:	40e00000 	.word	0x40e00000

08001af8 <MAX31865_Get_Temperature_math>:

// Conversion of resistance to temperature
double MAX31865_Get_Temperature_math(double PT100_Resistance) {
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	ed87 0b00 	vstr	d0, [r7]
	double MAX31865_PT100_T = 0.0;
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	//If the resistance is high (greater than or equal to 100 ohms) use:
	if (PT100_Resistance >= (double) 100.0) {
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b7d      	ldr	r3, [pc, #500]	@ (8001d08 <MAX31865_Get_Temperature_math+0x210>)
 8001b14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b18:	f7fe fffc 	bl	8000b14 <__aeabi_dcmpge>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d03c      	beq.n	8001b9c <MAX31865_Get_Temperature_math+0xa4>
		double MAX31865_math_Discriminant = (double) 0.00001527480889
				- ((double) -0.00000231
						* (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b78      	ldr	r3, [pc, #480]	@ (8001d08 <MAX31865_Get_Temperature_math+0x210>)
 8001b28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b2c:	f7fe fe96 	bl	800085c <__aeabi_ddiv>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	4974      	ldr	r1, [pc, #464]	@ (8001d0c <MAX31865_Get_Temperature_math+0x214>)
 8001b3a:	f7fe fbad 	bl	8000298 <__aeabi_dsub>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	a354      	add	r3, pc, #336	@ (adr r3, 8001c98 <MAX31865_Get_Temperature_math+0x1a0>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fd5c 	bl	8000608 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
		double MAX31865_math_Discriminant = (double) 0.00001527480889
 8001b58:	a351      	add	r3, pc, #324	@ (adr r3, 8001ca0 <MAX31865_Get_Temperature_math+0x1a8>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fb9d 	bl	800029c <__adddf3>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T = ((double) -0.0039083
				+ sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 8001b6a:	ed97 0b02 	vldr	d0, [r7, #8]
 8001b6e:	f004 faab 	bl	80060c8 <sqrt>
 8001b72:	ec51 0b10 	vmov	r0, r1, d0
 8001b76:	a34c      	add	r3, pc, #304	@ (adr r3, 8001ca8 <MAX31865_Get_Temperature_math+0x1b0>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fb8c 	bl	8000298 <__aeabi_dsub>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
		MAX31865_PT100_T = ((double) -0.0039083
 8001b88:	a349      	add	r3, pc, #292	@ (adr r3, 8001cb0 <MAX31865_Get_Temperature_math+0x1b8>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fe65 	bl	800085c <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001b9a:	e06f      	b.n	8001c7c <MAX31865_Get_Temperature_math+0x184>
		// If the resistance is low (less than 100 ohms), another polynomial formula is used to calculate the temperature.
	} else {
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5)
 8001b9c:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8001cb8 <MAX31865_Get_Temperature_math+0x1c0>
 8001ba0:	ed97 0b00 	vldr	d0, [r7]
 8001ba4:	f004 fa20 	bl	8005fe8 <pow>
 8001ba8:	ec51 0b10 	vmov	r0, r1, d0
 8001bac:	a344      	add	r3, pc, #272	@ (adr r3, 8001cc0 <MAX31865_Get_Temperature_math+0x1c8>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	f7fe fd29 	bl	8000608 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4614      	mov	r4, r2
 8001bbc:	461d      	mov	r5, r3
				- (double) 0.000000066245 * pow(PT100_Resistance, 4)
 8001bbe:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8001cc8 <MAX31865_Get_Temperature_math+0x1d0>
 8001bc2:	ed97 0b00 	vldr	d0, [r7]
 8001bc6:	f004 fa0f 	bl	8005fe8 <pow>
 8001bca:	ec51 0b10 	vmov	r0, r1, d0
 8001bce:	a340      	add	r3, pc, #256	@ (adr r3, 8001cd0 <MAX31865_Get_Temperature_math+0x1d8>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fd18 	bl	8000608 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4629      	mov	r1, r5
 8001be0:	f7fe fb5a 	bl	8000298 <__aeabi_dsub>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4614      	mov	r4, r2
 8001bea:	461d      	mov	r5, r3
				- (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8001bec:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 8001cd8 <MAX31865_Get_Temperature_math+0x1e0>
 8001bf0:	ed97 0b00 	vldr	d0, [r7]
 8001bf4:	f004 f9f8 	bl	8005fe8 <pow>
 8001bf8:	ec51 0b10 	vmov	r0, r1, d0
 8001bfc:	a338      	add	r3, pc, #224	@ (adr r3, 8001ce0 <MAX31865_Get_Temperature_math+0x1e8>)
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	f7fe fd01 	bl	8000608 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	f7fe fb43 	bl	8000298 <__aeabi_dsub>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4614      	mov	r4, r2
 8001c18:	461d      	mov	r5, r3
				+ (double) 0.002320232987 * pow(PT100_Resistance, 2)
 8001c1a:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8001ce8 <MAX31865_Get_Temperature_math+0x1f0>
 8001c1e:	ed97 0b00 	vldr	d0, [r7]
 8001c22:	f004 f9e1 	bl	8005fe8 <pow>
 8001c26:	ec51 0b10 	vmov	r0, r1, d0
 8001c2a:	a331      	add	r3, pc, #196	@ (adr r3, 8001cf0 <MAX31865_Get_Temperature_math+0x1f8>)
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	f7fe fcea 	bl	8000608 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f7fe fb2e 	bl	800029c <__adddf3>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4614      	mov	r4, r2
 8001c46:	461d      	mov	r5, r3
				+ (double) 2.229927824035 * PT100_Resistance
 8001c48:	a32b      	add	r3, pc, #172	@ (adr r3, 8001cf8 <MAX31865_Get_Temperature_math+0x200>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c52:	f7fe fcd9 	bl	8000608 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f7fe fb1d 	bl	800029c <__adddf3>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5)
 8001c6a:	a325      	add	r3, pc, #148	@ (adr r3, 8001d00 <MAX31865_Get_Temperature_math+0x208>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fb12 	bl	8000298 <__aeabi_dsub>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	e9c7 2304 	strd	r2, r3, [r7, #16]
				- (double) 242.090854986215;
	}
	return MAX31865_PT100_T;
 8001c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c80:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c84:	eeb0 0a47 	vmov.f32	s0, s14
 8001c88:	eef0 0a67 	vmov.f32	s1, s15
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bdb0      	pop	{r4, r5, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	f3af 8000 	nop.w
 8001c98:	ee19ce88 	.word	0xee19ce88
 8001c9c:	3ec360af 	.word	0x3ec360af
 8001ca0:	dfc928d8 	.word	0xdfc928d8
 8001ca4:	3ef0044c 	.word	0x3ef0044c
 8001ca8:	4aed641c 	.word	0x4aed641c
 8001cac:	3f700226 	.word	0x3f700226
 8001cb0:	ee19ce88 	.word	0xee19ce88
 8001cb4:	beb360af 	.word	0xbeb360af
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	40140000 	.word	0x40140000
 8001cc0:	e63e6cde 	.word	0xe63e6cde
 8001cc4:	3df28de3 	.word	0x3df28de3
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	40100000 	.word	0x40100000
 8001cd0:	5d50ae3a 	.word	0x5d50ae3a
 8001cd4:	3e71c852 	.word	0x3e71c852
 8001cd8:	00000000 	.word	0x00000000
 8001cdc:	40080000 	.word	0x40080000
 8001ce0:	6e664b7f 	.word	0x6e664b7f
 8001ce4:	3e88c80b 	.word	0x3e88c80b
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	40000000 	.word	0x40000000
 8001cf0:	998b63de 	.word	0x998b63de
 8001cf4:	3f6301e1 	.word	0x3f6301e1
 8001cf8:	66255dbb 	.word	0x66255dbb
 8001cfc:	4001d6e4 	.word	0x4001d6e4
 8001d00:	48b74f1a 	.word	0x48b74f1a
 8001d04:	406e42e8 	.word	0x406e42e8
 8001d08:	40590000 	.word	0x40590000
 8001d0c:	3ff00000 	.word	0x3ff00000

08001d10 <cs_set>:

// CS GND
void cs_set() {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_Pin, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2110      	movs	r1, #16
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <cs_set+0x14>)
 8001d1a:	f000 ff35 	bl	8002b88 <HAL_GPIO_WritePin>
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40020000 	.word	0x40020000

08001d28 <cs_reset>:

// CS VDD
void cs_reset() {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2110      	movs	r1, #16
 8001d30:	4802      	ldr	r0, [pc, #8]	@ (8001d3c <cs_reset+0x14>)
 8001d32:	f000 ff29 	bl	8002b88 <HAL_GPIO_WritePin>
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020000 	.word	0x40020000

08001d40 <uartInit>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

static void printUARTConfiguration(UART_HandleTypeDef UartHandle); // function To print the UART configuratión

bool_t uartInit() {
 8001d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d42:	b091      	sub	sp, #68	@ 0x44
 8001d44:	af0e      	add	r7, sp, #56	@ 0x38
	bool_t isConnectionSuccesfull = true;
 8001d46:	2301      	movs	r3, #1
 8001d48:	71fb      	strb	r3, [r7, #7]

	UartHandle3.Instance = USART3;
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <uartInit+0x7c>)
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <uartInit+0x80>)
 8001d4e:	601a      	str	r2, [r3, #0]
	UartHandle3.Init.BaudRate = 115200;
 8001d50:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <uartInit+0x7c>)
 8001d52:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d56:	605a      	str	r2, [r3, #4]
	UartHandle3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d58:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <uartInit+0x7c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
	UartHandle3.Init.StopBits = UART_STOPBITS_1;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <uartInit+0x7c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
	UartHandle3.Init.Parity = UART_PARITY_NONE;
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <uartInit+0x7c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
	UartHandle3.Init.Mode = UART_MODE_TX_RX;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <uartInit+0x7c>)
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	615a      	str	r2, [r3, #20]
	UartHandle3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <uartInit+0x7c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
	UartHandle3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <uartInit+0x7c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle3) != HAL_OK) {
 8001d7c:	480f      	ldr	r0, [pc, #60]	@ (8001dbc <uartInit+0x7c>)
 8001d7e:	f002 fa99 	bl	80042b4 <HAL_UART_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <uartInit+0x4e>
		isConnectionSuccesfull = false;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	e011      	b.n	8001db2 <uartInit+0x72>
	} else {
		printUARTConfiguration(UartHandle3); // If the serial conection is successful, print uart configuration
 8001d8e:	4e0b      	ldr	r6, [pc, #44]	@ (8001dbc <uartInit+0x7c>)
 8001d90:	466d      	mov	r5, sp
 8001d92:	f106 0410 	add.w	r4, r6, #16
 8001d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001daa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001dae:	f000 f81b 	bl	8001de8 <printUARTConfiguration>
	}
	return isConnectionSuccesfull;
 8001db2:	79fb      	ldrb	r3, [r7, #7]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dbc:	2000080c 	.word	0x2000080c
 8001dc0:	40004800 	.word	0x40004800

08001dc4 <__io_putchar>:
void uartReceiveStringSize(uint8_t *pString, uint16_t size) {
	HAL_UART_Receive(&UartHandle3, pString, size, HAL_MAX_DELAY);
}

// Function to redirect the standar output to the usart module
PUTCHAR_PROTOTYPE {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UartHandle3, (uint8_t*) &ch, 1, 0xFFFF);
 8001dcc:	1d39      	adds	r1, r7, #4
 8001dce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4803      	ldr	r0, [pc, #12]	@ (8001de4 <__io_putchar+0x20>)
 8001dd6:	f002 fabd 	bl	8004354 <HAL_UART_Transmit>

	return ch;
 8001dda:	687b      	ldr	r3, [r7, #4]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000080c 	.word	0x2000080c

08001de8 <printUARTConfiguration>:

static void printUARTConfiguration(UART_HandleTypeDef UartHandle) {
 8001de8:	b084      	sub	sp, #16
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	f107 0c08 	add.w	ip, r7, #8
 8001df2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// print configuration parameters through serial terminal
	printf("\rConfiguracion del UART:\n");
 8001df6:	482a      	ldr	r0, [pc, #168]	@ (8001ea0 <printUARTConfiguration+0xb8>)
 8001df8:	f003 fa92 	bl	8005320 <puts>
	printf("\rBaudRate: %lu\n", UartHandle.Init.BaudRate);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4828      	ldr	r0, [pc, #160]	@ (8001ea4 <printUARTConfiguration+0xbc>)
 8001e02:	f003 fa25 	bl	8005250 <iprintf>
	printf("\rWordLength: %d bits\n",
			(UartHandle.Init.WordLength == UART_WORDLENGTH_8B) ? 8 : 9);
 8001e06:	693b      	ldr	r3, [r7, #16]
	printf("\rWordLength: %d bits\n",
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <printUARTConfiguration+0x28>
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	e000      	b.n	8001e12 <printUARTConfiguration+0x2a>
 8001e10:	2309      	movs	r3, #9
 8001e12:	4619      	mov	r1, r3
 8001e14:	4824      	ldr	r0, [pc, #144]	@ (8001ea8 <printUARTConfiguration+0xc0>)
 8001e16:	f003 fa1b 	bl	8005250 <iprintf>
	printf("\rStopBits: %s\n",
			(UartHandle.Init.StopBits == UART_STOPBITS_1) ? "1 bit" : "2 bits");
 8001e1a:	697b      	ldr	r3, [r7, #20]
	printf("\rStopBits: %s\n",
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <printUARTConfiguration+0x3c>
 8001e20:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <printUARTConfiguration+0xc4>)
 8001e22:	e000      	b.n	8001e26 <printUARTConfiguration+0x3e>
 8001e24:	4b22      	ldr	r3, [pc, #136]	@ (8001eb0 <printUARTConfiguration+0xc8>)
 8001e26:	4619      	mov	r1, r3
 8001e28:	4822      	ldr	r0, [pc, #136]	@ (8001eb4 <printUARTConfiguration+0xcc>)
 8001e2a:	f003 fa11 	bl	8005250 <iprintf>
	printf("\rParity: %s\n",
			(UartHandle.Init.Parity == UART_PARITY_NONE) ? "Ninguno" :
 8001e2e:	69bb      	ldr	r3, [r7, #24]
	printf("\rParity: %s\n",
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <printUARTConfiguration+0x5c>
			(UartHandle.Init.Parity == UART_PARITY_EVEN) ? "Par" : "Impar");
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e3a:	d101      	bne.n	8001e40 <printUARTConfiguration+0x58>
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb8 <printUARTConfiguration+0xd0>)
 8001e3e:	e002      	b.n	8001e46 <printUARTConfiguration+0x5e>
 8001e40:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <printUARTConfiguration+0xd4>)
 8001e42:	e000      	b.n	8001e46 <printUARTConfiguration+0x5e>
	printf("\rParity: %s\n",
 8001e44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <printUARTConfiguration+0xd8>)
 8001e46:	4619      	mov	r1, r3
 8001e48:	481e      	ldr	r0, [pc, #120]	@ (8001ec4 <printUARTConfiguration+0xdc>)
 8001e4a:	f003 fa01 	bl	8005250 <iprintf>
	printf("\rControl de flujo: %s\n",
			(UartHandle.Init.HwFlowCtl == UART_HWCONTROL_NONE) ?
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
	printf("\rControl de flujo: %s\n",
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <printUARTConfiguration+0x70>
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <printUARTConfiguration+0xe0>)
 8001e56:	e000      	b.n	8001e5a <printUARTConfiguration+0x72>
 8001e58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <printUARTConfiguration+0xe4>)
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481c      	ldr	r0, [pc, #112]	@ (8001ed0 <printUARTConfiguration+0xe8>)
 8001e5e:	f003 f9f7 	bl	8005250 <iprintf>
					"Deshabilitado" : "Habilitado");
	printf("\rModo: %s\n",
			(UartHandle.Init.Mode == UART_MODE_TX) ? "Transmision" :
 8001e62:	69fb      	ldr	r3, [r7, #28]
	printf("\rModo: %s\n",
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d006      	beq.n	8001e76 <printUARTConfiguration+0x8e>
			(UartHandle.Init.Mode == UART_MODE_RX) ?
 8001e68:	69fb      	ldr	r3, [r7, #28]
					"Recepcion" : "Transmision y Recepcion");
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d101      	bne.n	8001e72 <printUARTConfiguration+0x8a>
 8001e6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <printUARTConfiguration+0xec>)
 8001e70:	e002      	b.n	8001e78 <printUARTConfiguration+0x90>
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <printUARTConfiguration+0xf0>)
 8001e74:	e000      	b.n	8001e78 <printUARTConfiguration+0x90>
	printf("\rModo: %s\n",
 8001e76:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <printUARTConfiguration+0xf4>)
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4819      	ldr	r0, [pc, #100]	@ (8001ee0 <printUARTConfiguration+0xf8>)
 8001e7c:	f003 f9e8 	bl	8005250 <iprintf>
	printf("\rOversampling: %d\n",
			(UartHandle.Init.OverSampling == UART_OVERSAMPLING_16) ? 16 : 8);
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	printf("\rOversampling: %d\n",
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <printUARTConfiguration+0xa2>
 8001e86:	2310      	movs	r3, #16
 8001e88:	e000      	b.n	8001e8c <printUARTConfiguration+0xa4>
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4815      	ldr	r0, [pc, #84]	@ (8001ee4 <printUARTConfiguration+0xfc>)
 8001e90:	f003 f9de 	bl	8005250 <iprintf>
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e9c:	b004      	add	sp, #16
 8001e9e:	4770      	bx	lr
 8001ea0:	08006f60 	.word	0x08006f60
 8001ea4:	08006f7c 	.word	0x08006f7c
 8001ea8:	08006f8c 	.word	0x08006f8c
 8001eac:	08006fa4 	.word	0x08006fa4
 8001eb0:	08006fac 	.word	0x08006fac
 8001eb4:	08006fb4 	.word	0x08006fb4
 8001eb8:	08006fc4 	.word	0x08006fc4
 8001ebc:	08006fc8 	.word	0x08006fc8
 8001ec0:	08006fd0 	.word	0x08006fd0
 8001ec4:	08006fd8 	.word	0x08006fd8
 8001ec8:	08006fe8 	.word	0x08006fe8
 8001ecc:	08006ff8 	.word	0x08006ff8
 8001ed0:	08007004 	.word	0x08007004
 8001ed4:	0800701c 	.word	0x0800701c
 8001ed8:	08007028 	.word	0x08007028
 8001edc:	08007040 	.word	0x08007040
 8001ee0:	0800704c 	.word	0x0800704c
 8001ee4:	08007058 	.word	0x08007058

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <HAL_Init+0x40>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <HAL_Init+0x40>)
 8001efe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <HAL_Init+0x40>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 f931 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 f808 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1c:	f7ff fa06 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_InitTick+0x54>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_InitTick+0x58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f93b 	bl	80021c6 <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00e      	b.n	8001f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d80a      	bhi.n	8001f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f000 f911 	bl	800218e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f6c:	4a06      	ldr	r2, [pc, #24]	@ (8001f88 <HAL_InitTick+0x5c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000008 	.word	0x20000008
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_IncTick+0x20>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	20000854 	.word	0x20000854

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <HAL_GetTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000854 	.word	0x20000854

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff ffee 	bl	8001fb4 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffde 	bl	8001fb4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008

08002014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800203c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002046:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db0a      	blt.n	80020a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	490c      	ldr	r1, [pc, #48]	@ (80020c4 <__NVIC_SetPriority+0x4c>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	440b      	add	r3, r1
 800209c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a0:	e00a      	b.n	80020b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4908      	ldr	r1, [pc, #32]	@ (80020c8 <__NVIC_SetPriority+0x50>)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3b04      	subs	r3, #4
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	440b      	add	r3, r1
 80020b6:	761a      	strb	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1c3 0307 	rsb	r3, r3, #7
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	bf28      	it	cs
 80020ea:	2304      	movcs	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d902      	bls.n	80020fc <NVIC_EncodePriority+0x30>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b03      	subs	r3, #3
 80020fa:	e000      	b.n	80020fe <NVIC_EncodePriority+0x32>
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002114:	f04f 31ff 	mov.w	r1, #4294967295
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43d9      	mvns	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	4313      	orrs	r3, r2
         );
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	@ 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002144:	d301      	bcc.n	800214a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214a:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <SysTick_Config+0x40>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002152:	210f      	movs	r1, #15
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f7ff ff8e 	bl	8002078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <SysTick_Config+0x40>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <SysTick_Config+0x40>)
 8002164:	2207      	movs	r2, #7
 8002166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000e010 	.word	0xe000e010

08002178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff47 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff ff5c 	bl	800205c <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff8e 	bl	80020cc <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5d 	bl	8002078 <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ffb0 	bl	8002134 <SysTick_Config>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e06c      	b.n	80022cc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d106      	bne.n	800220a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2223      	movs	r2, #35	@ 0x23
 8002200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff f8b9 	bl	800137c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b31      	ldr	r3, [pc, #196]	@ (80022d4 <HAL_ETH_Init+0xf4>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a30      	ldr	r2, [pc, #192]	@ (80022d4 <HAL_ETH_Init+0xf4>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b2e      	ldr	r3, [pc, #184]	@ (80022d4 <HAL_ETH_Init+0xf4>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002226:	4b2c      	ldr	r3, [pc, #176]	@ (80022d8 <HAL_ETH_Init+0xf8>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <HAL_ETH_Init+0xf8>)
 800222c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002230:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002232:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <HAL_ETH_Init+0xf8>)
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	4927      	ldr	r1, [pc, #156]	@ (80022d8 <HAL_ETH_Init+0xf8>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002240:	4b25      	ldr	r3, [pc, #148]	@ (80022d8 <HAL_ETH_Init+0xf8>)
 8002242:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800225a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800225c:	f7ff feaa 	bl	8001fb4 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002262:	e011      	b.n	8002288 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002264:	f7ff fea6 	bl	8001fb4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002272:	d909      	bls.n	8002288 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2204      	movs	r2, #4
 8002278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	22e0      	movs	r2, #224	@ 0xe0
 8002280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e021      	b.n	80022cc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1e4      	bne.n	8002264 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f958 	bl	8002550 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f9ff 	bl	80026a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fa55 	bl	8002756 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	461a      	mov	r2, r3
 80022b2:	2100      	movs	r1, #0
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f9bd 	bl	8002634 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2210      	movs	r2, #16
 80022c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800

080022dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4b51      	ldr	r3, [pc, #324]	@ (8002438 <ETH_SetMACConfig+0x15c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	7c1b      	ldrb	r3, [r3, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <ETH_SetMACConfig+0x28>
 80022fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002302:	e000      	b.n	8002306 <ETH_SetMACConfig+0x2a>
 8002304:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	7c5b      	ldrb	r3, [r3, #17]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <ETH_SetMACConfig+0x38>
 800230e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002312:	e000      	b.n	8002316 <ETH_SetMACConfig+0x3a>
 8002314:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002316:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800231c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	7fdb      	ldrb	r3, [r3, #31]
 8002322:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002324:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800232a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	7f92      	ldrb	r2, [r2, #30]
 8002330:	2a00      	cmp	r2, #0
 8002332:	d102      	bne.n	800233a <ETH_SetMACConfig+0x5e>
 8002334:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002338:	e000      	b.n	800233c <ETH_SetMACConfig+0x60>
 800233a:	2200      	movs	r2, #0
                        macconf->Speed |
 800233c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	7f1b      	ldrb	r3, [r3, #28]
 8002342:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002344:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800234a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	791b      	ldrb	r3, [r3, #4]
 8002350:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002352:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	f892 2020 	ldrb.w	r2, [r2, #32]
 800235a:	2a00      	cmp	r2, #0
 800235c:	d102      	bne.n	8002364 <ETH_SetMACConfig+0x88>
 800235e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002362:	e000      	b.n	8002366 <ETH_SetMACConfig+0x8a>
 8002364:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002366:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	7bdb      	ldrb	r3, [r3, #15]
 800236c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800236e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002374:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800237c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800237e:	4313      	orrs	r3, r2
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002396:	2001      	movs	r0, #1
 8002398:	f7ff fe18 	bl	8001fcc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80023b2:	4013      	ands	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80023c2:	2a00      	cmp	r2, #0
 80023c4:	d101      	bne.n	80023ca <ETH_SetMACConfig+0xee>
 80023c6:	2280      	movs	r2, #128	@ 0x80
 80023c8:	e000      	b.n	80023cc <ETH_SetMACConfig+0xf0>
 80023ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023cc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80023d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80023da:	2a01      	cmp	r2, #1
 80023dc:	d101      	bne.n	80023e2 <ETH_SetMACConfig+0x106>
 80023de:	2208      	movs	r2, #8
 80023e0:	e000      	b.n	80023e4 <ETH_SetMACConfig+0x108>
 80023e2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80023e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80023ec:	2a01      	cmp	r2, #1
 80023ee:	d101      	bne.n	80023f4 <ETH_SetMACConfig+0x118>
 80023f0:	2204      	movs	r2, #4
 80023f2:	e000      	b.n	80023f6 <ETH_SetMACConfig+0x11a>
 80023f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80023fe:	2a01      	cmp	r2, #1
 8002400:	d101      	bne.n	8002406 <ETH_SetMACConfig+0x12a>
 8002402:	2202      	movs	r2, #2
 8002404:	e000      	b.n	8002408 <ETH_SetMACConfig+0x12c>
 8002406:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002408:	4313      	orrs	r3, r2
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002420:	2001      	movs	r0, #1
 8002422:	f7ff fdd3 	bl	8001fcc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	ff20810f 	.word	0xff20810f

0800243c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4b3d      	ldr	r3, [pc, #244]	@ (800254c <ETH_SetDMAConfig+0x110>)
 8002456:	4013      	ands	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	7b1b      	ldrb	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <ETH_SetDMAConfig+0x2c>
 8002462:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002466:	e000      	b.n	800246a <ETH_SetDMAConfig+0x2e>
 8002468:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	7b5b      	ldrb	r3, [r3, #13]
 800246e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002470:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	7f52      	ldrb	r2, [r2, #29]
 8002476:	2a00      	cmp	r2, #0
 8002478:	d102      	bne.n	8002480 <ETH_SetDMAConfig+0x44>
 800247a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800247e:	e000      	b.n	8002482 <ETH_SetDMAConfig+0x46>
 8002480:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002482:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	7b9b      	ldrb	r3, [r3, #14]
 8002488:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800248a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002490:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	7f1b      	ldrb	r3, [r3, #28]
 8002496:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002498:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	7f9b      	ldrb	r3, [r3, #30]
 800249e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80024a0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80024a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024ae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024b0:	4313      	orrs	r3, r2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c0:	461a      	mov	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff fd7a 	bl	8001fcc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024e0:	461a      	mov	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	791b      	ldrb	r3, [r3, #4]
 80024ea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024f0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024f6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024fc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002504:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002506:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800250e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002514:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800251e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002522:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002530:	2001      	movs	r0, #1
 8002532:	f7ff fd4b 	bl	8001fcc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	f8de3f23 	.word	0xf8de3f23

08002550 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b0a6      	sub	sp, #152	@ 0x98
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002558:	2301      	movs	r3, #1
 800255a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800255e:	2301      	movs	r3, #1
 8002560:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002564:	2300      	movs	r3, #0
 8002566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800258c:	2300      	movs	r3, #0
 800258e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002596:	2300      	movs	r3, #0
 8002598:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80025b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff fe86 	bl	80022dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80025d4:	2301      	movs	r3, #1
 80025d6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80025de:	2301      	movs	r3, #1
 80025e0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025fc:	2301      	movs	r3, #1
 80025fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002600:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002604:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002606:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800260a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800260c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002610:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4619      	mov	r1, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ff08 	bl	800243c <ETH_SetDMAConfig>
}
 800262c:	bf00      	nop
 800262e:	3798      	adds	r7, #152	@ 0x98
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3305      	adds	r3, #5
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	3204      	adds	r2, #4
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <ETH_MACAddressConfig+0x68>)
 8002656:	4413      	add	r3, r2
 8002658:	461a      	mov	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3303      	adds	r3, #3
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	061a      	lsls	r2, r3, #24
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3302      	adds	r3, #2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3301      	adds	r3, #1
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	4313      	orrs	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <ETH_MACAddressConfig+0x6c>)
 8002686:	4413      	add	r3, r2
 8002688:	461a      	mov	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	6013      	str	r3, [r2, #0]
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40028040 	.word	0x40028040
 80026a0:	40028044 	.word	0x40028044

080026a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e03e      	b.n	8002730 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68d9      	ldr	r1, [r3, #12]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2200      	movs	r2, #0
 80026ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2200      	movs	r2, #0
 80026da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	3206      	adds	r2, #6
 80026e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d80c      	bhi.n	8002714 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68d9      	ldr	r1, [r3, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	e004      	b.n	800271e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	461a      	mov	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3301      	adds	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d9bd      	bls.n	80026b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002748:	611a      	str	r2, [r3, #16]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e046      	b.n	80027f2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6919      	ldr	r1, [r3, #16]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2200      	movs	r2, #0
 8002792:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2200      	movs	r2, #0
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80027a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80027a8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	3212      	adds	r2, #18
 80027be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d80c      	bhi.n	80027e2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6919      	ldr	r1, [r3, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60da      	str	r2, [r3, #12]
 80027e0:	e004      	b.n	80027ec <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d9b5      	bls.n	8002764 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002822:	60da      	str	r2, [r3, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	@ 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e177      	b.n	8002b3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	429a      	cmp	r2, r3
 8002866:	f040 8166 	bne.w	8002b36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d005      	beq.n	8002882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287e:	2b02      	cmp	r3, #2
 8002880:	d130      	bne.n	80028e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	2203      	movs	r2, #3
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b8:	2201      	movs	r2, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 0201 	and.w	r2, r3, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d017      	beq.n	8002920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d123      	bne.n	8002974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	08da      	lsrs	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3208      	adds	r2, #8
 8002934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	08da      	lsrs	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3208      	adds	r2, #8
 800296e:	69b9      	ldr	r1, [r7, #24]
 8002970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0203 	and.w	r2, r3, #3
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80c0 	beq.w	8002b36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b66      	ldr	r3, [pc, #408]	@ (8002b54 <HAL_GPIO_Init+0x324>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	4a65      	ldr	r2, [pc, #404]	@ (8002b54 <HAL_GPIO_Init+0x324>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029c6:	4b63      	ldr	r3, [pc, #396]	@ (8002b54 <HAL_GPIO_Init+0x324>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029d2:	4a61      	ldr	r2, [pc, #388]	@ (8002b58 <HAL_GPIO_Init+0x328>)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a58      	ldr	r2, [pc, #352]	@ (8002b5c <HAL_GPIO_Init+0x32c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d037      	beq.n	8002a6e <HAL_GPIO_Init+0x23e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a57      	ldr	r2, [pc, #348]	@ (8002b60 <HAL_GPIO_Init+0x330>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d031      	beq.n	8002a6a <HAL_GPIO_Init+0x23a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a56      	ldr	r2, [pc, #344]	@ (8002b64 <HAL_GPIO_Init+0x334>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d02b      	beq.n	8002a66 <HAL_GPIO_Init+0x236>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a55      	ldr	r2, [pc, #340]	@ (8002b68 <HAL_GPIO_Init+0x338>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d025      	beq.n	8002a62 <HAL_GPIO_Init+0x232>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a54      	ldr	r2, [pc, #336]	@ (8002b6c <HAL_GPIO_Init+0x33c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01f      	beq.n	8002a5e <HAL_GPIO_Init+0x22e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a53      	ldr	r2, [pc, #332]	@ (8002b70 <HAL_GPIO_Init+0x340>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d019      	beq.n	8002a5a <HAL_GPIO_Init+0x22a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a52      	ldr	r2, [pc, #328]	@ (8002b74 <HAL_GPIO_Init+0x344>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_Init+0x226>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a51      	ldr	r2, [pc, #324]	@ (8002b78 <HAL_GPIO_Init+0x348>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_GPIO_Init+0x222>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a50      	ldr	r2, [pc, #320]	@ (8002b7c <HAL_GPIO_Init+0x34c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x21e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4f      	ldr	r2, [pc, #316]	@ (8002b80 <HAL_GPIO_Init+0x350>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_Init+0x21a>
 8002a46:	2309      	movs	r3, #9
 8002a48:	e012      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a4a:	230a      	movs	r3, #10
 8002a4c:	e010      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	e00e      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e00c      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a56:	2306      	movs	r3, #6
 8002a58:	e00a      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	e008      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a62:	2303      	movs	r3, #3
 8002a64:	e004      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f002 0203 	and.w	r2, r2, #3
 8002a76:	0092      	lsls	r2, r2, #2
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a80:	4935      	ldr	r1, [pc, #212]	@ (8002b58 <HAL_GPIO_Init+0x328>)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab2:	4a34      	ldr	r2, [pc, #208]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab8:	4b32      	ldr	r3, [pc, #200]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002adc:	4a29      	ldr	r2, [pc, #164]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae2:	4b28      	ldr	r3, [pc, #160]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b06:	4a1f      	ldr	r2, [pc, #124]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b30:	4a14      	ldr	r2, [pc, #80]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b0f      	cmp	r3, #15
 8002b40:	f67f ae84 	bls.w	800284c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3724      	adds	r7, #36	@ 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40020800 	.word	0x40020800
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40021400 	.word	0x40021400
 8002b74:	40021800 	.word	0x40021800
 8002b78:	40021c00 	.word	0x40021c00
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40022400 	.word	0x40022400
 8002b84:	40013c00 	.word	0x40013c00

08002b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
 8002b94:	4613      	mov	r3, r2
 8002b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b98:	787b      	ldrb	r3, [r7, #1]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba4:	e003      	b.n	8002bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	041a      	lsls	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	619a      	str	r2, [r3, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e101      	b.n	8002dd0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fd3e 	bl	8001668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2203      	movs	r2, #3
 8002bf0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bfa:	d102      	bne.n	8002c02 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 ffc4 	bl	8004b94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7c1a      	ldrb	r2, [r3, #16]
 8002c14:	f88d 2000 	strb.w	r2, [sp]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c1c:	f001 ff56 	bl	8004acc <USB_CoreInit>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0ce      	b.n	8002dd0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f001 ffbc 	bl	8004bb6 <USB_SetCurrentMode>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0bf      	b.n	8002dd0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e04a      	b.n	8002cec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3315      	adds	r3, #21
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3314      	adds	r3, #20
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	b298      	uxth	r0, r3
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	332e      	adds	r3, #46	@ 0x2e
 8002c92:	4602      	mov	r2, r0
 8002c94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3318      	adds	r3, #24
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	331c      	adds	r3, #28
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3320      	adds	r3, #32
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3324      	adds	r3, #36	@ 0x24
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	791b      	ldrb	r3, [r3, #4]
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d3af      	bcc.n	8002c56 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	e044      	b.n	8002d86 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	3301      	adds	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d3b5      	bcc.n	8002cfc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7c1a      	ldrb	r2, [r3, #16]
 8002d98:	f88d 2000 	strb.w	r2, [sp]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da0:	f001 ff56 	bl	8004c50 <USB_DevInit>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00c      	b.n	8002dd0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 f91e 	bl	800500a <USB_DevDisconnect>

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e267      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d075      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002df6:	4b88      	ldr	r3, [pc, #544]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d00c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e02:	4b85      	ldr	r3, [pc, #532]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d112      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0e:	4b82      	ldr	r3, [pc, #520]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e1a:	d10b      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d05b      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x108>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d157      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e242      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCC_OscConfig+0x74>
 8002e3e:	4b76      	ldr	r3, [pc, #472]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a75      	ldr	r2, [pc, #468]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e01d      	b.n	8002e88 <HAL_RCC_OscConfig+0xb0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x98>
 8002e56:	4b70      	ldr	r3, [pc, #448]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6f      	ldr	r2, [pc, #444]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	4b6d      	ldr	r3, [pc, #436]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a6c      	ldr	r2, [pc, #432]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0xb0>
 8002e70:	4b69      	ldr	r3, [pc, #420]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a68      	ldr	r2, [pc, #416]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b66      	ldr	r3, [pc, #408]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a65      	ldr	r2, [pc, #404]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d013      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7ff f890 	bl	8001fb4 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e98:	f7ff f88c 	bl	8001fb4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	@ 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e207      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0xc0>
 8002eb6:	e014      	b.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7ff f87c 	bl	8001fb4 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7ff f878 	bl	8001fb4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	@ 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e1f3      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	4b51      	ldr	r3, [pc, #324]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0xe8>
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d063      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eee:	4b4a      	ldr	r3, [pc, #296]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efa:	4b47      	ldr	r3, [pc, #284]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d11c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f06:	4b44      	ldr	r3, [pc, #272]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	4b41      	ldr	r3, [pc, #260]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_RCC_OscConfig+0x152>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e1c7      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4937      	ldr	r1, [pc, #220]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3e:	e03a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d020      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f48:	4b34      	ldr	r3, [pc, #208]	@ (800301c <HAL_RCC_OscConfig+0x244>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7ff f831 	bl	8001fb4 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f56:	f7ff f82d 	bl	8001fb4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e1a8      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	4b2b      	ldr	r3, [pc, #172]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f74:	4b28      	ldr	r3, [pc, #160]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4925      	ldr	r1, [pc, #148]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
 8002f88:	e015      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8a:	4b24      	ldr	r3, [pc, #144]	@ (800301c <HAL_RCC_OscConfig+0x244>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7ff f810 	bl	8001fb4 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f98:	f7ff f80c 	bl	8001fb4 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e187      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d036      	beq.n	8003030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d016      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fca:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <HAL_RCC_OscConfig+0x248>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fff0 	bl	8001fb4 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7fe ffec 	bl	8001fb4 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e167      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x200>
 8002ff6:	e01b      	b.n	8003030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff8:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <HAL_RCC_OscConfig+0x248>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe ffd9 	bl	8001fb4 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	e00e      	b.n	8003024 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003006:	f7fe ffd5 	bl	8001fb4 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d907      	bls.n	8003024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e150      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
 8003018:	40023800 	.word	0x40023800
 800301c:	42470000 	.word	0x42470000
 8003020:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	4b88      	ldr	r3, [pc, #544]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ea      	bne.n	8003006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8097 	beq.w	800316c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003042:	4b81      	ldr	r3, [pc, #516]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b7d      	ldr	r3, [pc, #500]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	4a7c      	ldr	r2, [pc, #496]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	@ 0x40
 800305e:	4b7a      	ldr	r3, [pc, #488]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306a:	2301      	movs	r3, #1
 800306c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306e:	4b77      	ldr	r3, [pc, #476]	@ (800324c <HAL_RCC_OscConfig+0x474>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d118      	bne.n	80030ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307a:	4b74      	ldr	r3, [pc, #464]	@ (800324c <HAL_RCC_OscConfig+0x474>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a73      	ldr	r2, [pc, #460]	@ (800324c <HAL_RCC_OscConfig+0x474>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003086:	f7fe ff95 	bl	8001fb4 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308e:	f7fe ff91 	bl	8001fb4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e10c      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	4b6a      	ldr	r3, [pc, #424]	@ (800324c <HAL_RCC_OscConfig+0x474>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d106      	bne.n	80030c2 <HAL_RCC_OscConfig+0x2ea>
 80030b4:	4b64      	ldr	r3, [pc, #400]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b8:	4a63      	ldr	r2, [pc, #396]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c0:	e01c      	b.n	80030fc <HAL_RCC_OscConfig+0x324>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x30c>
 80030ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	4a5b      	ldr	r2, [pc, #364]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e2:	e00b      	b.n	80030fc <HAL_RCC_OscConfig+0x324>
 80030e4:	4b58      	ldr	r3, [pc, #352]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	4a57      	ldr	r2, [pc, #348]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f0:	4b55      	ldr	r3, [pc, #340]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f4:	4a54      	ldr	r2, [pc, #336]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030f6:	f023 0304 	bic.w	r3, r3, #4
 80030fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d015      	beq.n	8003130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fe ff56 	bl	8001fb4 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310a:	e00a      	b.n	8003122 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fe ff52 	bl	8001fb4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0cb      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003122:	4b49      	ldr	r3, [pc, #292]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ee      	beq.n	800310c <HAL_RCC_OscConfig+0x334>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003130:	f7fe ff40 	bl	8001fb4 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7fe ff3c 	bl	8001fb4 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e0b5      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314e:	4b3e      	ldr	r3, [pc, #248]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1ee      	bne.n	8003138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003160:	4b39      	ldr	r3, [pc, #228]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	4a38      	ldr	r2, [pc, #224]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800316a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80a1 	beq.w	80032b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003176:	4b34      	ldr	r3, [pc, #208]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b08      	cmp	r3, #8
 8003180:	d05c      	beq.n	800323c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d141      	bne.n	800320e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b31      	ldr	r3, [pc, #196]	@ (8003250 <HAL_RCC_OscConfig+0x478>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe ff10 	bl	8001fb4 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003198:	f7fe ff0c 	bl	8001fb4 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e087      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	4b27      	ldr	r3, [pc, #156]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	019b      	lsls	r3, r3, #6
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	3b01      	subs	r3, #1
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	491b      	ldr	r1, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <HAL_RCC_OscConfig+0x478>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fe fee5 	bl	8001fb4 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fee1 	bl	8001fb4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e05c      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003200:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x416>
 800320c:	e054      	b.n	80032b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <HAL_RCC_OscConfig+0x478>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fece 	bl	8001fb4 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe feca 	bl	8001fb4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e045      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x444>
 800323a:	e03d      	b.n	80032b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e038      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
 8003248:	40023800 	.word	0x40023800
 800324c:	40007000 	.word	0x40007000
 8003250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003254:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <HAL_RCC_OscConfig+0x4ec>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d028      	beq.n	80032b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d121      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d11a      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003284:	4013      	ands	r3, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800328a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800328c:	4293      	cmp	r3, r2
 800328e:	d111      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	3b01      	subs	r3, #1
 800329e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800

080032c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0cc      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b68      	ldr	r3, [pc, #416]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d90c      	bls.n	8003304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b65      	ldr	r3, [pc, #404]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b63      	ldr	r3, [pc, #396]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0b8      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800331c:	4b59      	ldr	r3, [pc, #356]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4a58      	ldr	r2, [pc, #352]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003334:	4b53      	ldr	r3, [pc, #332]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a52      	ldr	r2, [pc, #328]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800333e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b50      	ldr	r3, [pc, #320]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	494d      	ldr	r1, [pc, #308]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d044      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b47      	ldr	r3, [pc, #284]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d119      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e07f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d003      	beq.n	8003386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003382:	2b03      	cmp	r3, #3
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b3f      	ldr	r3, [pc, #252]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e06f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e067      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b37      	ldr	r3, [pc, #220]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4934      	ldr	r1, [pc, #208]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b8:	f7fe fdfc 	bl	8001fb4 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe fdf8 	bl	8001fb4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e04f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b25      	ldr	r3, [pc, #148]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d20c      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b22      	ldr	r3, [pc, #136]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b20      	ldr	r3, [pc, #128]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e032      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b19      	ldr	r3, [pc, #100]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4916      	ldr	r1, [pc, #88]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343a:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	490e      	ldr	r1, [pc, #56]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800344e:	f000 f821 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	490a      	ldr	r1, [pc, #40]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	fa22 f303 	lsr.w	r3, r2, r3
 8003466:	4a09      	ldr	r2, [pc, #36]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe fd5c 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023c00 	.word	0x40023c00
 8003484:	40023800 	.word	0x40023800
 8003488:	0800706c 	.word	0x0800706c
 800348c:	20000000 	.word	0x20000000
 8003490:	20000004 	.word	0x20000004

08003494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003498:	b094      	sub	sp, #80	@ 0x50
 800349a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a0:	2300      	movs	r3, #0
 80034a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a4:	2300      	movs	r3, #0
 80034a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ac:	4b79      	ldr	r3, [pc, #484]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d00d      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x40>
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	f200 80e1 	bhi.w	8003680 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x34>
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d003      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x3a>
 80034c6:	e0db      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b73      	ldr	r3, [pc, #460]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x204>)
 80034ca:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80034cc:	e0db      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ce:	4b73      	ldr	r3, [pc, #460]	@ (800369c <HAL_RCC_GetSysClockFreq+0x208>)
 80034d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034d2:	e0d8      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034de:	4b6d      	ldr	r3, [pc, #436]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d063      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	2200      	movs	r2, #0
 80034f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80034fe:	2300      	movs	r3, #0
 8003500:	637b      	str	r3, [r7, #52]	@ 0x34
 8003502:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003506:	4622      	mov	r2, r4
 8003508:	462b      	mov	r3, r5
 800350a:	f04f 0000 	mov.w	r0, #0
 800350e:	f04f 0100 	mov.w	r1, #0
 8003512:	0159      	lsls	r1, r3, #5
 8003514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003518:	0150      	lsls	r0, r2, #5
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4621      	mov	r1, r4
 8003520:	1a51      	subs	r1, r2, r1
 8003522:	6139      	str	r1, [r7, #16]
 8003524:	4629      	mov	r1, r5
 8003526:	eb63 0301 	sbc.w	r3, r3, r1
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003538:	4659      	mov	r1, fp
 800353a:	018b      	lsls	r3, r1, #6
 800353c:	4651      	mov	r1, sl
 800353e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003542:	4651      	mov	r1, sl
 8003544:	018a      	lsls	r2, r1, #6
 8003546:	4651      	mov	r1, sl
 8003548:	ebb2 0801 	subs.w	r8, r2, r1
 800354c:	4659      	mov	r1, fp
 800354e:	eb63 0901 	sbc.w	r9, r3, r1
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800355e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003566:	4690      	mov	r8, r2
 8003568:	4699      	mov	r9, r3
 800356a:	4623      	mov	r3, r4
 800356c:	eb18 0303 	adds.w	r3, r8, r3
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	462b      	mov	r3, r5
 8003574:	eb49 0303 	adc.w	r3, r9, r3
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003586:	4629      	mov	r1, r5
 8003588:	024b      	lsls	r3, r1, #9
 800358a:	4621      	mov	r1, r4
 800358c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003590:	4621      	mov	r1, r4
 8003592:	024a      	lsls	r2, r1, #9
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800359a:	2200      	movs	r2, #0
 800359c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800359e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035a4:	f7fd fb30 	bl	8000c08 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4613      	mov	r3, r2
 80035ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b0:	e058      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b2:	4b38      	ldr	r3, [pc, #224]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	2200      	movs	r2, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	4611      	mov	r1, r2
 80035be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035c2:	623b      	str	r3, [r7, #32]
 80035c4:	2300      	movs	r3, #0
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035cc:	4642      	mov	r2, r8
 80035ce:	464b      	mov	r3, r9
 80035d0:	f04f 0000 	mov.w	r0, #0
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	0159      	lsls	r1, r3, #5
 80035da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035de:	0150      	lsls	r0, r2, #5
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4641      	mov	r1, r8
 80035e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ea:	4649      	mov	r1, r9
 80035ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003600:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003604:	ebb2 040a 	subs.w	r4, r2, sl
 8003608:	eb63 050b 	sbc.w	r5, r3, fp
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	00eb      	lsls	r3, r5, #3
 8003616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800361a:	00e2      	lsls	r2, r4, #3
 800361c:	4614      	mov	r4, r2
 800361e:	461d      	mov	r5, r3
 8003620:	4643      	mov	r3, r8
 8003622:	18e3      	adds	r3, r4, r3
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	464b      	mov	r3, r9
 8003628:	eb45 0303 	adc.w	r3, r5, r3
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363a:	4629      	mov	r1, r5
 800363c:	028b      	lsls	r3, r1, #10
 800363e:	4621      	mov	r1, r4
 8003640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003644:	4621      	mov	r1, r4
 8003646:	028a      	lsls	r2, r1, #10
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364e:	2200      	movs	r2, #0
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	61fa      	str	r2, [r7, #28]
 8003654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003658:	f7fd fad6 	bl	8000c08 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4613      	mov	r3, r2
 8003662:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003664:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x200>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	0c1b      	lsrs	r3, r3, #16
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	3301      	adds	r3, #1
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003674:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800367e:	e002      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003680:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x204>)
 8003682:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003688:	4618      	mov	r0, r3
 800368a:	3750      	adds	r7, #80	@ 0x50
 800368c:	46bd      	mov	sp, r7
 800368e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	00f42400 	.word	0x00f42400
 800369c:	007a1200 	.word	0x007a1200

080036a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a4:	4b03      	ldr	r3, [pc, #12]	@ (80036b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000000 	.word	0x20000000

080036b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036bc:	f7ff fff0 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0a9b      	lsrs	r3, r3, #10
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	@ (80036dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	0800707c 	.word	0x0800707c

080036e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036e4:	f7ff ffdc 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0b5b      	lsrs	r3, r3, #13
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4903      	ldr	r1, [pc, #12]	@ (8003704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	0800707c 	.word	0x0800707c

08003708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07b      	b.n	8003812 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800372a:	d009      	beq.n	8003740 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
 8003732:	e005      	b.n	8003740 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fd fed4 	bl	8001508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003776:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c4:	ea42 0103 	orr.w	r1, r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	f003 0104 	and.w	r1, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	f003 0210 	and.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003800:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b088      	sub	sp, #32
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_SPI_Transmit+0x22>
 8003838:	2302      	movs	r3, #2
 800383a:	e12d      	b.n	8003a98 <HAL_SPI_Transmit+0x27e>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003844:	f7fe fbb6 	bl	8001fb4 <HAL_GetTick>
 8003848:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d002      	beq.n	8003860 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800385a:	2302      	movs	r3, #2
 800385c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800385e:	e116      	b.n	8003a8e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_SPI_Transmit+0x52>
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003870:	e10d      	b.n	8003a8e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2203      	movs	r2, #3
 8003876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b8:	d10f      	bne.n	80038da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e4:	2b40      	cmp	r3, #64	@ 0x40
 80038e6:	d007      	beq.n	80038f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003900:	d14f      	bne.n	80039a2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_SPI_Transmit+0xf6>
 800390a:	8afb      	ldrh	r3, [r7, #22]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d142      	bne.n	8003996 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003934:	e02f      	b.n	8003996 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b02      	cmp	r3, #2
 8003942:	d112      	bne.n	800396a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	881a      	ldrh	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	1c9a      	adds	r2, r3, #2
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003968:	e015      	b.n	8003996 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800396a:	f7fe fb23 	bl	8001fb4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d803      	bhi.n	8003982 <HAL_SPI_Transmit+0x168>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d102      	bne.n	8003988 <HAL_SPI_Transmit+0x16e>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d106      	bne.n	8003996 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003994:	e07b      	b.n	8003a8e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ca      	bne.n	8003936 <HAL_SPI_Transmit+0x11c>
 80039a0:	e050      	b.n	8003a44 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_SPI_Transmit+0x196>
 80039aa:	8afb      	ldrh	r3, [r7, #22]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d144      	bne.n	8003a3a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	7812      	ldrb	r2, [r2, #0]
 80039bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039d6:	e030      	b.n	8003a3a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d113      	bne.n	8003a0e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a0c:	e015      	b.n	8003a3a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a0e:	f7fe fad1 	bl	8001fb4 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d803      	bhi.n	8003a26 <HAL_SPI_Transmit+0x20c>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d102      	bne.n	8003a2c <HAL_SPI_Transmit+0x212>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003a38:	e029      	b.n	8003a8e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1c9      	bne.n	80039d8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fbdf 	bl	800420c <SPI_EndRxTxTransaction>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e003      	b.n	8003a8e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003a96:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d002      	beq.n	8003ac6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ac4:	e0fb      	b.n	8003cbe <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ace:	d112      	bne.n	8003af6 <HAL_SPI_Receive+0x56>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10e      	bne.n	8003af6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2204      	movs	r2, #4
 8003adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ae0:	88fa      	ldrh	r2, [r7, #6]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f8ef 	bl	8003cd0 <HAL_SPI_TransmitReceive>
 8003af2:	4603      	mov	r3, r0
 8003af4:	e0e8      	b.n	8003cc8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_SPI_Receive+0x64>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0e1      	b.n	8003cc8 <HAL_SPI_Receive+0x228>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b0c:	f7fe fa52 	bl	8001fb4 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_SPI_Receive+0x7e>
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b22:	e0cc      	b.n	8003cbe <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2204      	movs	r2, #4
 8003b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b6a:	d10f      	bne.n	8003b8c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b8a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b96:	2b40      	cmp	r3, #64	@ 0x40
 8003b98:	d007      	beq.n	8003baa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d16a      	bne.n	8003c88 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003bb2:	e032      	b.n	8003c1a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d115      	bne.n	8003bee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f103 020c 	add.w	r2, r3, #12
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bce:	7812      	ldrb	r2, [r2, #0]
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bec:	e015      	b.n	8003c1a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bee:	f7fe f9e1 	bl	8001fb4 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d803      	bhi.n	8003c06 <HAL_SPI_Receive+0x166>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d102      	bne.n	8003c0c <HAL_SPI_Receive+0x16c>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003c18:	e051      	b.n	8003cbe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1c7      	bne.n	8003bb4 <HAL_SPI_Receive+0x114>
 8003c24:	e035      	b.n	8003c92 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d113      	bne.n	8003c5c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3e:	b292      	uxth	r2, r2
 8003c40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c5a:	e015      	b.n	8003c88 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c5c:	f7fe f9aa 	bl	8001fb4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d803      	bhi.n	8003c74 <HAL_SPI_Receive+0x1d4>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_Receive+0x1da>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003c86:	e01a      	b.n	8003cbe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1c9      	bne.n	8003c26 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fa52 	bl	8004140 <SPI_EndRxTransaction>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
 8003cb4:	e003      	b.n	8003cbe <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	@ 0x30
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x26>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e198      	b.n	8004028 <HAL_SPI_TransmitReceive+0x358>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cfe:	f7fe f959 	bl	8001fb4 <HAL_GetTick>
 8003d02:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d00f      	beq.n	8003d40 <HAL_SPI_TransmitReceive+0x70>
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d26:	d107      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d103      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x68>
 8003d30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d003      	beq.n	8003d40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003d3e:	e16d      	b.n	800401c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_SPI_TransmitReceive+0x82>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_SPI_TransmitReceive+0x82>
 8003d4c:	887b      	ldrh	r3, [r7, #2]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003d58:	e160      	b.n	800401c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d003      	beq.n	8003d6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2205      	movs	r2, #5
 8003d6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	887a      	ldrh	r2, [r7, #2]
 8003d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	887a      	ldrh	r2, [r7, #2]
 8003d84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	887a      	ldrh	r2, [r7, #2]
 8003d96:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dae:	2b40      	cmp	r3, #64	@ 0x40
 8003db0:	d007      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dca:	d17c      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_SPI_TransmitReceive+0x10a>
 8003dd4:	8b7b      	ldrh	r3, [r7, #26]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d16a      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	881a      	ldrh	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	1c9a      	adds	r2, r3, #2
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dfe:	e057      	b.n	8003eb0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d11b      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x176>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d016      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x176>
 8003e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d113      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	1c9a      	adds	r2, r3, #2
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d119      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x1b8>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d014      	beq.n	8003e88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e70:	1c9a      	adds	r2, r3, #2
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e84:	2301      	movs	r3, #1
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e88:	f7fe f894 	bl	8001fb4 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d80b      	bhi.n	8003eb0 <HAL_SPI_TransmitReceive+0x1e0>
 8003e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d007      	beq.n	8003eb0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003eae:	e0b5      	b.n	800401c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1a2      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x130>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d19d      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x130>
 8003ec4:	e080      	b.n	8003fc8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_SPI_TransmitReceive+0x204>
 8003ece:	8b7b      	ldrh	r3, [r7, #26]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d16f      	bne.n	8003fb4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003efa:	e05b      	b.n	8003fb4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d11c      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x274>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d017      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x274>
 8003f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d114      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	330c      	adds	r3, #12
 8003f24:	7812      	ldrb	r2, [r2, #0]
 8003f26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d119      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x2b6>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d014      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f82:	2301      	movs	r3, #1
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f86:	f7fe f815 	bl	8001fb4 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d803      	bhi.n	8003f9e <HAL_SPI_TransmitReceive+0x2ce>
 8003f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d102      	bne.n	8003fa4 <HAL_SPI_TransmitReceive+0x2d4>
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d107      	bne.n	8003fb4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003fb2:	e033      	b.n	800401c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d19e      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x22c>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d199      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f91d 	bl	800420c <SPI_EndRxTxTransaction>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d006      	beq.n	8003fe6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003fe4:	e01a      	b.n	800401c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004012:	e003      	b.n	800401c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004024:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004028:	4618      	mov	r0, r3
 800402a:	3730      	adds	r7, #48	@ 0x30
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004040:	f7fd ffb8 	bl	8001fb4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	4413      	add	r3, r2
 800404e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004050:	f7fd ffb0 	bl	8001fb4 <HAL_GetTick>
 8004054:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004056:	4b39      	ldr	r3, [pc, #228]	@ (800413c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	015b      	lsls	r3, r3, #5
 800405c:	0d1b      	lsrs	r3, r3, #20
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	fb02 f303 	mul.w	r3, r2, r3
 8004064:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004066:	e054      	b.n	8004112 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d050      	beq.n	8004112 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004070:	f7fd ffa0 	bl	8001fb4 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	429a      	cmp	r2, r3
 800407e:	d902      	bls.n	8004086 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d13d      	bne.n	8004102 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004094:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800409e:	d111      	bne.n	80040c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a8:	d004      	beq.n	80040b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b2:	d107      	bne.n	80040c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040cc:	d10f      	bne.n	80040ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e017      	b.n	8004132 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	3b01      	subs	r3, #1
 8004110:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4013      	ands	r3, r2
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	429a      	cmp	r2, r3
 8004120:	bf0c      	ite	eq
 8004122:	2301      	moveq	r3, #1
 8004124:	2300      	movne	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	429a      	cmp	r2, r3
 800412e:	d19b      	bne.n	8004068 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000000 	.word	0x20000000

08004140 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004154:	d111      	bne.n	800417a <SPI_EndRxTransaction+0x3a>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800415e:	d004      	beq.n	800416a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004168:	d107      	bne.n	800417a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004178:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004182:	d12a      	bne.n	80041da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418c:	d012      	beq.n	80041b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2200      	movs	r2, #0
 8004196:	2180      	movs	r1, #128	@ 0x80
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff ff49 	bl	8004030 <SPI_WaitFlagStateUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d02d      	beq.n	8004200 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e026      	b.n	8004202 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2200      	movs	r2, #0
 80041bc:	2101      	movs	r1, #1
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff ff36 	bl	8004030 <SPI_WaitFlagStateUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01a      	beq.n	8004200 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e013      	b.n	8004202 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2101      	movs	r1, #1
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff ff23 	bl	8004030 <SPI_WaitFlagStateUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d007      	beq.n	8004200 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e000      	b.n	8004202 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2201      	movs	r2, #1
 8004220:	2102      	movs	r1, #2
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7ff ff04 	bl	8004030 <SPI_WaitFlagStateUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e032      	b.n	80042a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800423e:	4b1b      	ldr	r3, [pc, #108]	@ (80042ac <SPI_EndRxTxTransaction+0xa0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1b      	ldr	r2, [pc, #108]	@ (80042b0 <SPI_EndRxTxTransaction+0xa4>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	0d5b      	lsrs	r3, r3, #21
 800424a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800425c:	d112      	bne.n	8004284 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2200      	movs	r2, #0
 8004266:	2180      	movs	r1, #128	@ 0x80
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fee1 	bl	8004030 <SPI_WaitFlagStateUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d016      	beq.n	80042a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e00f      	b.n	80042a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3b01      	subs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429a:	2b80      	cmp	r3, #128	@ 0x80
 800429c:	d0f2      	beq.n	8004284 <SPI_EndRxTxTransaction+0x78>
 800429e:	e000      	b.n	80042a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80042a0:	bf00      	nop
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000000 	.word	0x20000000
 80042b0:	165e9f81 	.word	0x165e9f81

080042b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e042      	b.n	800434c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fd f97c 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2224      	movs	r2, #36	@ 0x24
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f973 	bl	80045e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800430c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800431c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800432c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08a      	sub	sp, #40	@ 0x28
 8004358:	af02      	add	r7, sp, #8
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b20      	cmp	r3, #32
 8004372:	d175      	bne.n	8004460 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_UART_Transmit+0x2c>
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e06e      	b.n	8004462 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2221      	movs	r2, #33	@ 0x21
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004392:	f7fd fe0f 	bl	8001fb4 <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ac:	d108      	bne.n	80043c0 <HAL_UART_Transmit+0x6c>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	e003      	b.n	80043c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043c8:	e02e      	b.n	8004428 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	2180      	movs	r1, #128	@ 0x80
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f848 	bl	800446a <UART_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e03a      	b.n	8004462 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	3302      	adds	r3, #2
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e007      	b.n	800441a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	781a      	ldrb	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	3301      	adds	r3, #1
 8004418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1cb      	bne.n	80043ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	2140      	movs	r1, #64	@ 0x40
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f814 	bl	800446a <UART_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e006      	b.n	8004462 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	4613      	mov	r3, r2
 8004478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447a:	e03b      	b.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d037      	beq.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004484:	f7fd fd96 	bl	8001fb4 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	6a3a      	ldr	r2, [r7, #32]
 8004490:	429a      	cmp	r2, r3
 8004492:	d302      	bcc.n	800449a <UART_WaitOnFlagUntilTimeout+0x30>
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e03a      	b.n	8004514 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d023      	beq.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b80      	cmp	r3, #128	@ 0x80
 80044b0:	d020      	beq.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b40      	cmp	r3, #64	@ 0x40
 80044b6:	d01d      	beq.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d116      	bne.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f81d 	bl	800451c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2208      	movs	r2, #8
 80044e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e00f      	b.n	8004514 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	429a      	cmp	r2, r3
 8004510:	d0b4      	beq.n	800447c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b095      	sub	sp, #84	@ 0x54
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800453a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004544:	643a      	str	r2, [r7, #64]	@ 0x40
 8004546:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800454a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3314      	adds	r3, #20
 800455e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	61fb      	str	r3, [r7, #28]
   return(result);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3314      	adds	r3, #20
 8004576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004578:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800457a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800457e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	2b01      	cmp	r3, #1
 8004592:	d119      	bne.n	80045c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 0310 	bic.w	r3, r3, #16
 80045aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045b4:	61ba      	str	r2, [r7, #24]
 80045b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6979      	ldr	r1, [r7, #20]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	613b      	str	r3, [r7, #16]
   return(result);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e5      	bne.n	8004594 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045d6:	bf00      	nop
 80045d8:	3754      	adds	r7, #84	@ 0x54
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e8:	b0c0      	sub	sp, #256	@ 0x100
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	68d9      	ldr	r1, [r3, #12]
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	ea40 0301 	orr.w	r3, r0, r1
 800460c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	431a      	orrs	r2, r3
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	431a      	orrs	r2, r3
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800463c:	f021 010c 	bic.w	r1, r1, #12
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800464a:	430b      	orrs	r3, r1
 800464c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465e:	6999      	ldr	r1, [r3, #24]
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	ea40 0301 	orr.w	r3, r0, r1
 800466a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4b8f      	ldr	r3, [pc, #572]	@ (80048b0 <UART_SetConfig+0x2cc>)
 8004674:	429a      	cmp	r2, r3
 8004676:	d005      	beq.n	8004684 <UART_SetConfig+0xa0>
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4b8d      	ldr	r3, [pc, #564]	@ (80048b4 <UART_SetConfig+0x2d0>)
 8004680:	429a      	cmp	r2, r3
 8004682:	d104      	bne.n	800468e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004684:	f7ff f82c 	bl	80036e0 <HAL_RCC_GetPCLK2Freq>
 8004688:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800468c:	e003      	b.n	8004696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800468e:	f7ff f813 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 8004692:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a0:	f040 810c 	bne.w	80048bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046b6:	4622      	mov	r2, r4
 80046b8:	462b      	mov	r3, r5
 80046ba:	1891      	adds	r1, r2, r2
 80046bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046be:	415b      	adcs	r3, r3
 80046c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046c6:	4621      	mov	r1, r4
 80046c8:	eb12 0801 	adds.w	r8, r2, r1
 80046cc:	4629      	mov	r1, r5
 80046ce:	eb43 0901 	adc.w	r9, r3, r1
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046e6:	4690      	mov	r8, r2
 80046e8:	4699      	mov	r9, r3
 80046ea:	4623      	mov	r3, r4
 80046ec:	eb18 0303 	adds.w	r3, r8, r3
 80046f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046f4:	462b      	mov	r3, r5
 80046f6:	eb49 0303 	adc.w	r3, r9, r3
 80046fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800470a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800470e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004712:	460b      	mov	r3, r1
 8004714:	18db      	adds	r3, r3, r3
 8004716:	653b      	str	r3, [r7, #80]	@ 0x50
 8004718:	4613      	mov	r3, r2
 800471a:	eb42 0303 	adc.w	r3, r2, r3
 800471e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004728:	f7fc fa6e 	bl	8000c08 <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4b61      	ldr	r3, [pc, #388]	@ (80048b8 <UART_SetConfig+0x2d4>)
 8004732:	fba3 2302 	umull	r2, r3, r3, r2
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	011c      	lsls	r4, r3, #4
 800473a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004744:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	1891      	adds	r1, r2, r2
 8004752:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004754:	415b      	adcs	r3, r3
 8004756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800475c:	4641      	mov	r1, r8
 800475e:	eb12 0a01 	adds.w	sl, r2, r1
 8004762:	4649      	mov	r1, r9
 8004764:	eb43 0b01 	adc.w	fp, r3, r1
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800477c:	4692      	mov	sl, r2
 800477e:	469b      	mov	fp, r3
 8004780:	4643      	mov	r3, r8
 8004782:	eb1a 0303 	adds.w	r3, sl, r3
 8004786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800478a:	464b      	mov	r3, r9
 800478c:	eb4b 0303 	adc.w	r3, fp, r3
 8004790:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047a8:	460b      	mov	r3, r1
 80047aa:	18db      	adds	r3, r3, r3
 80047ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ae:	4613      	mov	r3, r2
 80047b0:	eb42 0303 	adc.w	r3, r2, r3
 80047b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047be:	f7fc fa23 	bl	8000c08 <__aeabi_uldivmod>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	4b3b      	ldr	r3, [pc, #236]	@ (80048b8 <UART_SetConfig+0x2d4>)
 80047ca:	fba3 2301 	umull	r2, r3, r3, r1
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2264      	movs	r2, #100	@ 0x64
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	1acb      	subs	r3, r1, r3
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047de:	4b36      	ldr	r3, [pc, #216]	@ (80048b8 <UART_SetConfig+0x2d4>)
 80047e0:	fba3 2302 	umull	r2, r3, r3, r2
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047ec:	441c      	add	r4, r3
 80047ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004800:	4642      	mov	r2, r8
 8004802:	464b      	mov	r3, r9
 8004804:	1891      	adds	r1, r2, r2
 8004806:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004808:	415b      	adcs	r3, r3
 800480a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800480c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004810:	4641      	mov	r1, r8
 8004812:	1851      	adds	r1, r2, r1
 8004814:	6339      	str	r1, [r7, #48]	@ 0x30
 8004816:	4649      	mov	r1, r9
 8004818:	414b      	adcs	r3, r1
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004828:	4659      	mov	r1, fp
 800482a:	00cb      	lsls	r3, r1, #3
 800482c:	4651      	mov	r1, sl
 800482e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004832:	4651      	mov	r1, sl
 8004834:	00ca      	lsls	r2, r1, #3
 8004836:	4610      	mov	r0, r2
 8004838:	4619      	mov	r1, r3
 800483a:	4603      	mov	r3, r0
 800483c:	4642      	mov	r2, r8
 800483e:	189b      	adds	r3, r3, r2
 8004840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004844:	464b      	mov	r3, r9
 8004846:	460a      	mov	r2, r1
 8004848:	eb42 0303 	adc.w	r3, r2, r3
 800484c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800485c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004864:	460b      	mov	r3, r1
 8004866:	18db      	adds	r3, r3, r3
 8004868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800486a:	4613      	mov	r3, r2
 800486c:	eb42 0303 	adc.w	r3, r2, r3
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800487a:	f7fc f9c5 	bl	8000c08 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <UART_SetConfig+0x2d4>)
 8004884:	fba3 1302 	umull	r1, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	2164      	movs	r1, #100	@ 0x64
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	3332      	adds	r3, #50	@ 0x32
 8004896:	4a08      	ldr	r2, [pc, #32]	@ (80048b8 <UART_SetConfig+0x2d4>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 0207 	and.w	r2, r3, #7
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4422      	add	r2, r4
 80048aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048ac:	e106      	b.n	8004abc <UART_SetConfig+0x4d8>
 80048ae:	bf00      	nop
 80048b0:	40011000 	.word	0x40011000
 80048b4:	40011400 	.word	0x40011400
 80048b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048ce:	4642      	mov	r2, r8
 80048d0:	464b      	mov	r3, r9
 80048d2:	1891      	adds	r1, r2, r2
 80048d4:	6239      	str	r1, [r7, #32]
 80048d6:	415b      	adcs	r3, r3
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048de:	4641      	mov	r1, r8
 80048e0:	1854      	adds	r4, r2, r1
 80048e2:	4649      	mov	r1, r9
 80048e4:	eb43 0501 	adc.w	r5, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	00eb      	lsls	r3, r5, #3
 80048f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048f6:	00e2      	lsls	r2, r4, #3
 80048f8:	4614      	mov	r4, r2
 80048fa:	461d      	mov	r5, r3
 80048fc:	4643      	mov	r3, r8
 80048fe:	18e3      	adds	r3, r4, r3
 8004900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004904:	464b      	mov	r3, r9
 8004906:	eb45 0303 	adc.w	r3, r5, r3
 800490a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800491a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800492a:	4629      	mov	r1, r5
 800492c:	008b      	lsls	r3, r1, #2
 800492e:	4621      	mov	r1, r4
 8004930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004934:	4621      	mov	r1, r4
 8004936:	008a      	lsls	r2, r1, #2
 8004938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800493c:	f7fc f964 	bl	8000c08 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4b60      	ldr	r3, [pc, #384]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 8004946:	fba3 2302 	umull	r2, r3, r3, r2
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	011c      	lsls	r4, r3, #4
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004958:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800495c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	1891      	adds	r1, r2, r2
 8004966:	61b9      	str	r1, [r7, #24]
 8004968:	415b      	adcs	r3, r3
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004970:	4641      	mov	r1, r8
 8004972:	1851      	adds	r1, r2, r1
 8004974:	6139      	str	r1, [r7, #16]
 8004976:	4649      	mov	r1, r9
 8004978:	414b      	adcs	r3, r1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004988:	4659      	mov	r1, fp
 800498a:	00cb      	lsls	r3, r1, #3
 800498c:	4651      	mov	r1, sl
 800498e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004992:	4651      	mov	r1, sl
 8004994:	00ca      	lsls	r2, r1, #3
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	4603      	mov	r3, r0
 800499c:	4642      	mov	r2, r8
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049a4:	464b      	mov	r3, r9
 80049a6:	460a      	mov	r2, r1
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049c8:	4649      	mov	r1, r9
 80049ca:	008b      	lsls	r3, r1, #2
 80049cc:	4641      	mov	r1, r8
 80049ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d2:	4641      	mov	r1, r8
 80049d4:	008a      	lsls	r2, r1, #2
 80049d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049da:	f7fc f915 	bl	8000c08 <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	4b38      	ldr	r3, [pc, #224]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 80049e6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2264      	movs	r2, #100	@ 0x64
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	1acb      	subs	r3, r1, r3
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	3332      	adds	r3, #50	@ 0x32
 80049f8:	4a33      	ldr	r2, [pc, #204]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a04:	441c      	add	r4, r3
 8004a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a24:	4641      	mov	r1, r8
 8004a26:	1851      	adds	r1, r2, r1
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	414b      	adcs	r3, r1
 8004a2e:	607b      	str	r3, [r7, #4]
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a3c:	4659      	mov	r1, fp
 8004a3e:	00cb      	lsls	r3, r1, #3
 8004a40:	4651      	mov	r1, sl
 8004a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a46:	4651      	mov	r1, sl
 8004a48:	00ca      	lsls	r2, r1, #3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4642      	mov	r2, r8
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a56:	464b      	mov	r3, r9
 8004a58:	460a      	mov	r2, r1
 8004a5a:	eb42 0303 	adc.w	r3, r2, r3
 8004a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a78:	4649      	mov	r1, r9
 8004a7a:	008b      	lsls	r3, r1, #2
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a82:	4641      	mov	r1, r8
 8004a84:	008a      	lsls	r2, r1, #2
 8004a86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a8a:	f7fc f8bd 	bl	8000c08 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 8004a94:	fba3 1302 	umull	r1, r3, r3, r2
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	2164      	movs	r1, #100	@ 0x64
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	3332      	adds	r3, #50	@ 0x32
 8004aa6:	4a08      	ldr	r2, [pc, #32]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	f003 020f 	and.w	r2, r3, #15
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4422      	add	r2, r4
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac8:	51eb851f 	.word	0x51eb851f

08004acc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004acc:	b084      	sub	sp, #16
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	f107 001c 	add.w	r0, r7, #28
 8004ada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ade:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d123      	bne.n	8004b2e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d105      	bne.n	8004b22 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 faa0 	bl	8005068 <USB_CoreReset>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	73fb      	strb	r3, [r7, #15]
 8004b2c:	e01b      	b.n	8004b66 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa94 	bl	8005068 <USB_CoreReset>
 8004b40:	4603      	mov	r3, r0
 8004b42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b44:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b58:	e005      	b.n	8004b66 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b66:	7fbb      	ldrb	r3, [r7, #30]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10b      	bne.n	8004b84 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f043 0206 	orr.w	r2, r3, #6
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b90:	b004      	add	sp, #16
 8004b92:	4770      	bx	lr

08004b94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 0201 	bic.w	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d115      	bne.n	8004c04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004be4:	200a      	movs	r0, #10
 8004be6:	f7fd f9f1 	bl	8001fcc <HAL_Delay>
      ms += 10U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	330a      	adds	r3, #10
 8004bee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fa2b 	bl	800504c <USB_GetMode>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d01e      	beq.n	8004c3a <USB_SetCurrentMode+0x84>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c00:	d9f0      	bls.n	8004be4 <USB_SetCurrentMode+0x2e>
 8004c02:	e01a      	b.n	8004c3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d115      	bne.n	8004c36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c16:	200a      	movs	r0, #10
 8004c18:	f7fd f9d8 	bl	8001fcc <HAL_Delay>
      ms += 10U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	330a      	adds	r3, #10
 8004c20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa12 	bl	800504c <USB_GetMode>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <USB_SetCurrentMode+0x84>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c32:	d9f0      	bls.n	8004c16 <USB_SetCurrentMode+0x60>
 8004c34:	e001      	b.n	8004c3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e005      	b.n	8004c46 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c3e:	d101      	bne.n	8004c44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c50:	b084      	sub	sp, #16
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	e009      	b.n	8004c84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	3340      	adds	r3, #64	@ 0x40
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	3301      	adds	r3, #1
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b0e      	cmp	r3, #14
 8004c88:	d9f2      	bls.n	8004c70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11c      	bne.n	8004ccc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004cca:	e00b      	b.n	8004ce4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004cea:	461a      	mov	r2, r3
 8004cec:	2300      	movs	r3, #0
 8004cee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cf0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d10d      	bne.n	8004d14 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d104      	bne.n	8004d0a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d00:	2100      	movs	r1, #0
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f968 	bl	8004fd8 <USB_SetDevSpeed>
 8004d08:	e008      	b.n	8004d1c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f963 	bl	8004fd8 <USB_SetDevSpeed>
 8004d12:	e003      	b.n	8004d1c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d14:	2103      	movs	r1, #3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f95e 	bl	8004fd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d1c:	2110      	movs	r1, #16
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8fa 	bl	8004f18 <USB_FlushTxFifo>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f924 	bl	8004f7c <USB_FlushRxFifo>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d44:	461a      	mov	r2, r3
 8004d46:	2300      	movs	r3, #0
 8004d48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d50:	461a      	mov	r2, r3
 8004d52:	2300      	movs	r3, #0
 8004d54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	e043      	b.n	8004df0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d7e:	d118      	bne.n	8004db2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d92:	461a      	mov	r2, r3
 8004d94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e013      	b.n	8004dc4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da8:	461a      	mov	r2, r3
 8004daa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	e008      	b.n	8004dc4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de2:	461a      	mov	r2, r3
 8004de4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004de8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	3301      	adds	r3, #1
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004df4:	461a      	mov	r2, r3
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d3b5      	bcc.n	8004d68 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	e043      	b.n	8004e8a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e18:	d118      	bne.n	8004e4c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	e013      	b.n	8004e5e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e42:	461a      	mov	r2, r3
 8004e44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e008      	b.n	8004e5e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	3301      	adds	r3, #1
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e8e:	461a      	mov	r2, r3
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d3b5      	bcc.n	8004e02 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004eb6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004eb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	f043 0210 	orr.w	r2, r3, #16
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699a      	ldr	r2, [r3, #24]
 8004ed0:	4b10      	ldr	r3, [pc, #64]	@ (8004f14 <USB_DevInit+0x2c4>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ed8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f043 0208 	orr.w	r2, r3, #8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d107      	bne.n	8004f04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f10:	b004      	add	sp, #16
 8004f12:	4770      	bx	lr
 8004f14:	803c3800 	.word	0x803c3800

08004f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f32:	d901      	bls.n	8004f38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e01b      	b.n	8004f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	daf2      	bge.n	8004f26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	019b      	lsls	r3, r3, #6
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3301      	adds	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f5c:	d901      	bls.n	8004f62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e006      	b.n	8004f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d0f0      	beq.n	8004f50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f94:	d901      	bls.n	8004f9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e018      	b.n	8004fcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	daf2      	bge.n	8004f88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2210      	movs	r2, #16
 8004faa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fb8:	d901      	bls.n	8004fbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e006      	b.n	8004fcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d0f0      	beq.n	8004fac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	68f9      	ldr	r1, [r7, #12]
 8004ff4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800500a:	b480      	push	{r7}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005024:	f023 0303 	bic.w	r3, r3, #3
 8005028:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005038:	f043 0302 	orr.w	r3, r3, #2
 800503c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f003 0301 	and.w	r3, r3, #1
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005080:	d901      	bls.n	8005086 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e01b      	b.n	80050be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	daf2      	bge.n	8005074 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f043 0201 	orr.w	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3301      	adds	r3, #1
 80050a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050aa:	d901      	bls.n	80050b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e006      	b.n	80050be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d0f0      	beq.n	800509e <USB_CoreReset+0x36>

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <std>:
 80050cc:	2300      	movs	r3, #0
 80050ce:	b510      	push	{r4, lr}
 80050d0:	4604      	mov	r4, r0
 80050d2:	e9c0 3300 	strd	r3, r3, [r0]
 80050d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050da:	6083      	str	r3, [r0, #8]
 80050dc:	8181      	strh	r1, [r0, #12]
 80050de:	6643      	str	r3, [r0, #100]	@ 0x64
 80050e0:	81c2      	strh	r2, [r0, #14]
 80050e2:	6183      	str	r3, [r0, #24]
 80050e4:	4619      	mov	r1, r3
 80050e6:	2208      	movs	r2, #8
 80050e8:	305c      	adds	r0, #92	@ 0x5c
 80050ea:	f000 f9f9 	bl	80054e0 <memset>
 80050ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005124 <std+0x58>)
 80050f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80050f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <std+0x5c>)
 80050f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050f6:	4b0d      	ldr	r3, [pc, #52]	@ (800512c <std+0x60>)
 80050f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <std+0x64>)
 80050fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80050fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005134 <std+0x68>)
 8005100:	6224      	str	r4, [r4, #32]
 8005102:	429c      	cmp	r4, r3
 8005104:	d006      	beq.n	8005114 <std+0x48>
 8005106:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800510a:	4294      	cmp	r4, r2
 800510c:	d002      	beq.n	8005114 <std+0x48>
 800510e:	33d0      	adds	r3, #208	@ 0xd0
 8005110:	429c      	cmp	r4, r3
 8005112:	d105      	bne.n	8005120 <std+0x54>
 8005114:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800511c:	f000 ba58 	b.w	80055d0 <__retarget_lock_init_recursive>
 8005120:	bd10      	pop	{r4, pc}
 8005122:	bf00      	nop
 8005124:	08005331 	.word	0x08005331
 8005128:	08005353 	.word	0x08005353
 800512c:	0800538b 	.word	0x0800538b
 8005130:	080053af 	.word	0x080053af
 8005134:	20000858 	.word	0x20000858

08005138 <stdio_exit_handler>:
 8005138:	4a02      	ldr	r2, [pc, #8]	@ (8005144 <stdio_exit_handler+0xc>)
 800513a:	4903      	ldr	r1, [pc, #12]	@ (8005148 <stdio_exit_handler+0x10>)
 800513c:	4803      	ldr	r0, [pc, #12]	@ (800514c <stdio_exit_handler+0x14>)
 800513e:	f000 b869 	b.w	8005214 <_fwalk_sglue>
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c
 8005148:	08005e71 	.word	0x08005e71
 800514c:	2000001c 	.word	0x2000001c

08005150 <cleanup_stdio>:
 8005150:	6841      	ldr	r1, [r0, #4]
 8005152:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <cleanup_stdio+0x34>)
 8005154:	4299      	cmp	r1, r3
 8005156:	b510      	push	{r4, lr}
 8005158:	4604      	mov	r4, r0
 800515a:	d001      	beq.n	8005160 <cleanup_stdio+0x10>
 800515c:	f000 fe88 	bl	8005e70 <_fflush_r>
 8005160:	68a1      	ldr	r1, [r4, #8]
 8005162:	4b09      	ldr	r3, [pc, #36]	@ (8005188 <cleanup_stdio+0x38>)
 8005164:	4299      	cmp	r1, r3
 8005166:	d002      	beq.n	800516e <cleanup_stdio+0x1e>
 8005168:	4620      	mov	r0, r4
 800516a:	f000 fe81 	bl	8005e70 <_fflush_r>
 800516e:	68e1      	ldr	r1, [r4, #12]
 8005170:	4b06      	ldr	r3, [pc, #24]	@ (800518c <cleanup_stdio+0x3c>)
 8005172:	4299      	cmp	r1, r3
 8005174:	d004      	beq.n	8005180 <cleanup_stdio+0x30>
 8005176:	4620      	mov	r0, r4
 8005178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800517c:	f000 be78 	b.w	8005e70 <_fflush_r>
 8005180:	bd10      	pop	{r4, pc}
 8005182:	bf00      	nop
 8005184:	20000858 	.word	0x20000858
 8005188:	200008c0 	.word	0x200008c0
 800518c:	20000928 	.word	0x20000928

08005190 <global_stdio_init.part.0>:
 8005190:	b510      	push	{r4, lr}
 8005192:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <global_stdio_init.part.0+0x30>)
 8005194:	4c0b      	ldr	r4, [pc, #44]	@ (80051c4 <global_stdio_init.part.0+0x34>)
 8005196:	4a0c      	ldr	r2, [pc, #48]	@ (80051c8 <global_stdio_init.part.0+0x38>)
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	4620      	mov	r0, r4
 800519c:	2200      	movs	r2, #0
 800519e:	2104      	movs	r1, #4
 80051a0:	f7ff ff94 	bl	80050cc <std>
 80051a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051a8:	2201      	movs	r2, #1
 80051aa:	2109      	movs	r1, #9
 80051ac:	f7ff ff8e 	bl	80050cc <std>
 80051b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051b4:	2202      	movs	r2, #2
 80051b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ba:	2112      	movs	r1, #18
 80051bc:	f7ff bf86 	b.w	80050cc <std>
 80051c0:	20000990 	.word	0x20000990
 80051c4:	20000858 	.word	0x20000858
 80051c8:	08005139 	.word	0x08005139

080051cc <__sfp_lock_acquire>:
 80051cc:	4801      	ldr	r0, [pc, #4]	@ (80051d4 <__sfp_lock_acquire+0x8>)
 80051ce:	f000 ba00 	b.w	80055d2 <__retarget_lock_acquire_recursive>
 80051d2:	bf00      	nop
 80051d4:	20000999 	.word	0x20000999

080051d8 <__sfp_lock_release>:
 80051d8:	4801      	ldr	r0, [pc, #4]	@ (80051e0 <__sfp_lock_release+0x8>)
 80051da:	f000 b9fb 	b.w	80055d4 <__retarget_lock_release_recursive>
 80051de:	bf00      	nop
 80051e0:	20000999 	.word	0x20000999

080051e4 <__sinit>:
 80051e4:	b510      	push	{r4, lr}
 80051e6:	4604      	mov	r4, r0
 80051e8:	f7ff fff0 	bl	80051cc <__sfp_lock_acquire>
 80051ec:	6a23      	ldr	r3, [r4, #32]
 80051ee:	b11b      	cbz	r3, 80051f8 <__sinit+0x14>
 80051f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f4:	f7ff bff0 	b.w	80051d8 <__sfp_lock_release>
 80051f8:	4b04      	ldr	r3, [pc, #16]	@ (800520c <__sinit+0x28>)
 80051fa:	6223      	str	r3, [r4, #32]
 80051fc:	4b04      	ldr	r3, [pc, #16]	@ (8005210 <__sinit+0x2c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f5      	bne.n	80051f0 <__sinit+0xc>
 8005204:	f7ff ffc4 	bl	8005190 <global_stdio_init.part.0>
 8005208:	e7f2      	b.n	80051f0 <__sinit+0xc>
 800520a:	bf00      	nop
 800520c:	08005151 	.word	0x08005151
 8005210:	20000990 	.word	0x20000990

08005214 <_fwalk_sglue>:
 8005214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005218:	4607      	mov	r7, r0
 800521a:	4688      	mov	r8, r1
 800521c:	4614      	mov	r4, r2
 800521e:	2600      	movs	r6, #0
 8005220:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005224:	f1b9 0901 	subs.w	r9, r9, #1
 8005228:	d505      	bpl.n	8005236 <_fwalk_sglue+0x22>
 800522a:	6824      	ldr	r4, [r4, #0]
 800522c:	2c00      	cmp	r4, #0
 800522e:	d1f7      	bne.n	8005220 <_fwalk_sglue+0xc>
 8005230:	4630      	mov	r0, r6
 8005232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005236:	89ab      	ldrh	r3, [r5, #12]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d907      	bls.n	800524c <_fwalk_sglue+0x38>
 800523c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005240:	3301      	adds	r3, #1
 8005242:	d003      	beq.n	800524c <_fwalk_sglue+0x38>
 8005244:	4629      	mov	r1, r5
 8005246:	4638      	mov	r0, r7
 8005248:	47c0      	blx	r8
 800524a:	4306      	orrs	r6, r0
 800524c:	3568      	adds	r5, #104	@ 0x68
 800524e:	e7e9      	b.n	8005224 <_fwalk_sglue+0x10>

08005250 <iprintf>:
 8005250:	b40f      	push	{r0, r1, r2, r3}
 8005252:	b507      	push	{r0, r1, r2, lr}
 8005254:	4906      	ldr	r1, [pc, #24]	@ (8005270 <iprintf+0x20>)
 8005256:	ab04      	add	r3, sp, #16
 8005258:	6808      	ldr	r0, [r1, #0]
 800525a:	f853 2b04 	ldr.w	r2, [r3], #4
 800525e:	6881      	ldr	r1, [r0, #8]
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	f000 fadb 	bl	800581c <_vfiprintf_r>
 8005266:	b003      	add	sp, #12
 8005268:	f85d eb04 	ldr.w	lr, [sp], #4
 800526c:	b004      	add	sp, #16
 800526e:	4770      	bx	lr
 8005270:	20000018 	.word	0x20000018

08005274 <_puts_r>:
 8005274:	6a03      	ldr	r3, [r0, #32]
 8005276:	b570      	push	{r4, r5, r6, lr}
 8005278:	6884      	ldr	r4, [r0, #8]
 800527a:	4605      	mov	r5, r0
 800527c:	460e      	mov	r6, r1
 800527e:	b90b      	cbnz	r3, 8005284 <_puts_r+0x10>
 8005280:	f7ff ffb0 	bl	80051e4 <__sinit>
 8005284:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005286:	07db      	lsls	r3, r3, #31
 8005288:	d405      	bmi.n	8005296 <_puts_r+0x22>
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	0598      	lsls	r0, r3, #22
 800528e:	d402      	bmi.n	8005296 <_puts_r+0x22>
 8005290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005292:	f000 f99e 	bl	80055d2 <__retarget_lock_acquire_recursive>
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	0719      	lsls	r1, r3, #28
 800529a:	d502      	bpl.n	80052a2 <_puts_r+0x2e>
 800529c:	6923      	ldr	r3, [r4, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d135      	bne.n	800530e <_puts_r+0x9a>
 80052a2:	4621      	mov	r1, r4
 80052a4:	4628      	mov	r0, r5
 80052a6:	f000 f8c5 	bl	8005434 <__swsetup_r>
 80052aa:	b380      	cbz	r0, 800530e <_puts_r+0x9a>
 80052ac:	f04f 35ff 	mov.w	r5, #4294967295
 80052b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052b2:	07da      	lsls	r2, r3, #31
 80052b4:	d405      	bmi.n	80052c2 <_puts_r+0x4e>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	059b      	lsls	r3, r3, #22
 80052ba:	d402      	bmi.n	80052c2 <_puts_r+0x4e>
 80052bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052be:	f000 f989 	bl	80055d4 <__retarget_lock_release_recursive>
 80052c2:	4628      	mov	r0, r5
 80052c4:	bd70      	pop	{r4, r5, r6, pc}
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	da04      	bge.n	80052d4 <_puts_r+0x60>
 80052ca:	69a2      	ldr	r2, [r4, #24]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	dc17      	bgt.n	8005300 <_puts_r+0x8c>
 80052d0:	290a      	cmp	r1, #10
 80052d2:	d015      	beq.n	8005300 <_puts_r+0x8c>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	6022      	str	r2, [r4, #0]
 80052da:	7019      	strb	r1, [r3, #0]
 80052dc:	68a3      	ldr	r3, [r4, #8]
 80052de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052e2:	3b01      	subs	r3, #1
 80052e4:	60a3      	str	r3, [r4, #8]
 80052e6:	2900      	cmp	r1, #0
 80052e8:	d1ed      	bne.n	80052c6 <_puts_r+0x52>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da11      	bge.n	8005312 <_puts_r+0x9e>
 80052ee:	4622      	mov	r2, r4
 80052f0:	210a      	movs	r1, #10
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 f85f 	bl	80053b6 <__swbuf_r>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d0d7      	beq.n	80052ac <_puts_r+0x38>
 80052fc:	250a      	movs	r5, #10
 80052fe:	e7d7      	b.n	80052b0 <_puts_r+0x3c>
 8005300:	4622      	mov	r2, r4
 8005302:	4628      	mov	r0, r5
 8005304:	f000 f857 	bl	80053b6 <__swbuf_r>
 8005308:	3001      	adds	r0, #1
 800530a:	d1e7      	bne.n	80052dc <_puts_r+0x68>
 800530c:	e7ce      	b.n	80052ac <_puts_r+0x38>
 800530e:	3e01      	subs	r6, #1
 8005310:	e7e4      	b.n	80052dc <_puts_r+0x68>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	6022      	str	r2, [r4, #0]
 8005318:	220a      	movs	r2, #10
 800531a:	701a      	strb	r2, [r3, #0]
 800531c:	e7ee      	b.n	80052fc <_puts_r+0x88>
	...

08005320 <puts>:
 8005320:	4b02      	ldr	r3, [pc, #8]	@ (800532c <puts+0xc>)
 8005322:	4601      	mov	r1, r0
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	f7ff bfa5 	b.w	8005274 <_puts_r>
 800532a:	bf00      	nop
 800532c:	20000018 	.word	0x20000018

08005330 <__sread>:
 8005330:	b510      	push	{r4, lr}
 8005332:	460c      	mov	r4, r1
 8005334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005338:	f000 f8fc 	bl	8005534 <_read_r>
 800533c:	2800      	cmp	r0, #0
 800533e:	bfab      	itete	ge
 8005340:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005342:	89a3      	ldrhlt	r3, [r4, #12]
 8005344:	181b      	addge	r3, r3, r0
 8005346:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800534a:	bfac      	ite	ge
 800534c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800534e:	81a3      	strhlt	r3, [r4, #12]
 8005350:	bd10      	pop	{r4, pc}

08005352 <__swrite>:
 8005352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005356:	461f      	mov	r7, r3
 8005358:	898b      	ldrh	r3, [r1, #12]
 800535a:	05db      	lsls	r3, r3, #23
 800535c:	4605      	mov	r5, r0
 800535e:	460c      	mov	r4, r1
 8005360:	4616      	mov	r6, r2
 8005362:	d505      	bpl.n	8005370 <__swrite+0x1e>
 8005364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005368:	2302      	movs	r3, #2
 800536a:	2200      	movs	r2, #0
 800536c:	f000 f8d0 	bl	8005510 <_lseek_r>
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005376:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800537a:	81a3      	strh	r3, [r4, #12]
 800537c:	4632      	mov	r2, r6
 800537e:	463b      	mov	r3, r7
 8005380:	4628      	mov	r0, r5
 8005382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005386:	f000 b8e7 	b.w	8005558 <_write_r>

0800538a <__sseek>:
 800538a:	b510      	push	{r4, lr}
 800538c:	460c      	mov	r4, r1
 800538e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005392:	f000 f8bd 	bl	8005510 <_lseek_r>
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	bf15      	itete	ne
 800539c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800539e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053a6:	81a3      	strheq	r3, [r4, #12]
 80053a8:	bf18      	it	ne
 80053aa:	81a3      	strhne	r3, [r4, #12]
 80053ac:	bd10      	pop	{r4, pc}

080053ae <__sclose>:
 80053ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b2:	f000 b89d 	b.w	80054f0 <_close_r>

080053b6 <__swbuf_r>:
 80053b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b8:	460e      	mov	r6, r1
 80053ba:	4614      	mov	r4, r2
 80053bc:	4605      	mov	r5, r0
 80053be:	b118      	cbz	r0, 80053c8 <__swbuf_r+0x12>
 80053c0:	6a03      	ldr	r3, [r0, #32]
 80053c2:	b90b      	cbnz	r3, 80053c8 <__swbuf_r+0x12>
 80053c4:	f7ff ff0e 	bl	80051e4 <__sinit>
 80053c8:	69a3      	ldr	r3, [r4, #24]
 80053ca:	60a3      	str	r3, [r4, #8]
 80053cc:	89a3      	ldrh	r3, [r4, #12]
 80053ce:	071a      	lsls	r2, r3, #28
 80053d0:	d501      	bpl.n	80053d6 <__swbuf_r+0x20>
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	b943      	cbnz	r3, 80053e8 <__swbuf_r+0x32>
 80053d6:	4621      	mov	r1, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 f82b 	bl	8005434 <__swsetup_r>
 80053de:	b118      	cbz	r0, 80053e8 <__swbuf_r+0x32>
 80053e0:	f04f 37ff 	mov.w	r7, #4294967295
 80053e4:	4638      	mov	r0, r7
 80053e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	6922      	ldr	r2, [r4, #16]
 80053ec:	1a98      	subs	r0, r3, r2
 80053ee:	6963      	ldr	r3, [r4, #20]
 80053f0:	b2f6      	uxtb	r6, r6
 80053f2:	4283      	cmp	r3, r0
 80053f4:	4637      	mov	r7, r6
 80053f6:	dc05      	bgt.n	8005404 <__swbuf_r+0x4e>
 80053f8:	4621      	mov	r1, r4
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 fd38 	bl	8005e70 <_fflush_r>
 8005400:	2800      	cmp	r0, #0
 8005402:	d1ed      	bne.n	80053e0 <__swbuf_r+0x2a>
 8005404:	68a3      	ldr	r3, [r4, #8]
 8005406:	3b01      	subs	r3, #1
 8005408:	60a3      	str	r3, [r4, #8]
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	6022      	str	r2, [r4, #0]
 8005410:	701e      	strb	r6, [r3, #0]
 8005412:	6962      	ldr	r2, [r4, #20]
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	429a      	cmp	r2, r3
 8005418:	d004      	beq.n	8005424 <__swbuf_r+0x6e>
 800541a:	89a3      	ldrh	r3, [r4, #12]
 800541c:	07db      	lsls	r3, r3, #31
 800541e:	d5e1      	bpl.n	80053e4 <__swbuf_r+0x2e>
 8005420:	2e0a      	cmp	r6, #10
 8005422:	d1df      	bne.n	80053e4 <__swbuf_r+0x2e>
 8005424:	4621      	mov	r1, r4
 8005426:	4628      	mov	r0, r5
 8005428:	f000 fd22 	bl	8005e70 <_fflush_r>
 800542c:	2800      	cmp	r0, #0
 800542e:	d0d9      	beq.n	80053e4 <__swbuf_r+0x2e>
 8005430:	e7d6      	b.n	80053e0 <__swbuf_r+0x2a>
	...

08005434 <__swsetup_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4b29      	ldr	r3, [pc, #164]	@ (80054dc <__swsetup_r+0xa8>)
 8005438:	4605      	mov	r5, r0
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	460c      	mov	r4, r1
 800543e:	b118      	cbz	r0, 8005448 <__swsetup_r+0x14>
 8005440:	6a03      	ldr	r3, [r0, #32]
 8005442:	b90b      	cbnz	r3, 8005448 <__swsetup_r+0x14>
 8005444:	f7ff fece 	bl	80051e4 <__sinit>
 8005448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800544c:	0719      	lsls	r1, r3, #28
 800544e:	d422      	bmi.n	8005496 <__swsetup_r+0x62>
 8005450:	06da      	lsls	r2, r3, #27
 8005452:	d407      	bmi.n	8005464 <__swsetup_r+0x30>
 8005454:	2209      	movs	r2, #9
 8005456:	602a      	str	r2, [r5, #0]
 8005458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	f04f 30ff 	mov.w	r0, #4294967295
 8005462:	e033      	b.n	80054cc <__swsetup_r+0x98>
 8005464:	0758      	lsls	r0, r3, #29
 8005466:	d512      	bpl.n	800548e <__swsetup_r+0x5a>
 8005468:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800546a:	b141      	cbz	r1, 800547e <__swsetup_r+0x4a>
 800546c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005470:	4299      	cmp	r1, r3
 8005472:	d002      	beq.n	800547a <__swsetup_r+0x46>
 8005474:	4628      	mov	r0, r5
 8005476:	f000 f8af 	bl	80055d8 <_free_r>
 800547a:	2300      	movs	r3, #0
 800547c:	6363      	str	r3, [r4, #52]	@ 0x34
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005484:	81a3      	strh	r3, [r4, #12]
 8005486:	2300      	movs	r3, #0
 8005488:	6063      	str	r3, [r4, #4]
 800548a:	6923      	ldr	r3, [r4, #16]
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	f043 0308 	orr.w	r3, r3, #8
 8005494:	81a3      	strh	r3, [r4, #12]
 8005496:	6923      	ldr	r3, [r4, #16]
 8005498:	b94b      	cbnz	r3, 80054ae <__swsetup_r+0x7a>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054a4:	d003      	beq.n	80054ae <__swsetup_r+0x7a>
 80054a6:	4621      	mov	r1, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 fd2f 	bl	8005f0c <__smakebuf_r>
 80054ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054b2:	f013 0201 	ands.w	r2, r3, #1
 80054b6:	d00a      	beq.n	80054ce <__swsetup_r+0x9a>
 80054b8:	2200      	movs	r2, #0
 80054ba:	60a2      	str	r2, [r4, #8]
 80054bc:	6962      	ldr	r2, [r4, #20]
 80054be:	4252      	negs	r2, r2
 80054c0:	61a2      	str	r2, [r4, #24]
 80054c2:	6922      	ldr	r2, [r4, #16]
 80054c4:	b942      	cbnz	r2, 80054d8 <__swsetup_r+0xa4>
 80054c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054ca:	d1c5      	bne.n	8005458 <__swsetup_r+0x24>
 80054cc:	bd38      	pop	{r3, r4, r5, pc}
 80054ce:	0799      	lsls	r1, r3, #30
 80054d0:	bf58      	it	pl
 80054d2:	6962      	ldrpl	r2, [r4, #20]
 80054d4:	60a2      	str	r2, [r4, #8]
 80054d6:	e7f4      	b.n	80054c2 <__swsetup_r+0x8e>
 80054d8:	2000      	movs	r0, #0
 80054da:	e7f7      	b.n	80054cc <__swsetup_r+0x98>
 80054dc:	20000018 	.word	0x20000018

080054e0 <memset>:
 80054e0:	4402      	add	r2, r0
 80054e2:	4603      	mov	r3, r0
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d100      	bne.n	80054ea <memset+0xa>
 80054e8:	4770      	bx	lr
 80054ea:	f803 1b01 	strb.w	r1, [r3], #1
 80054ee:	e7f9      	b.n	80054e4 <memset+0x4>

080054f0 <_close_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4d06      	ldr	r5, [pc, #24]	@ (800550c <_close_r+0x1c>)
 80054f4:	2300      	movs	r3, #0
 80054f6:	4604      	mov	r4, r0
 80054f8:	4608      	mov	r0, r1
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	f7fc f976 	bl	80017ec <_close>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_close_r+0x1a>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_close_r+0x1a>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	20000994 	.word	0x20000994

08005510 <_lseek_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4d07      	ldr	r5, [pc, #28]	@ (8005530 <_lseek_r+0x20>)
 8005514:	4604      	mov	r4, r0
 8005516:	4608      	mov	r0, r1
 8005518:	4611      	mov	r1, r2
 800551a:	2200      	movs	r2, #0
 800551c:	602a      	str	r2, [r5, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f7fc f98b 	bl	800183a <_lseek>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_lseek_r+0x1e>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_lseek_r+0x1e>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	20000994 	.word	0x20000994

08005534 <_read_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4d07      	ldr	r5, [pc, #28]	@ (8005554 <_read_r+0x20>)
 8005538:	4604      	mov	r4, r0
 800553a:	4608      	mov	r0, r1
 800553c:	4611      	mov	r1, r2
 800553e:	2200      	movs	r2, #0
 8005540:	602a      	str	r2, [r5, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	f7fc f919 	bl	800177a <_read>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_read_r+0x1e>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_read_r+0x1e>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20000994 	.word	0x20000994

08005558 <_write_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d07      	ldr	r5, [pc, #28]	@ (8005578 <_write_r+0x20>)
 800555c:	4604      	mov	r4, r0
 800555e:	4608      	mov	r0, r1
 8005560:	4611      	mov	r1, r2
 8005562:	2200      	movs	r2, #0
 8005564:	602a      	str	r2, [r5, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7fc f924 	bl	80017b4 <_write>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_write_r+0x1e>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_write_r+0x1e>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	20000994 	.word	0x20000994

0800557c <__errno>:
 800557c:	4b01      	ldr	r3, [pc, #4]	@ (8005584 <__errno+0x8>)
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000018 	.word	0x20000018

08005588 <__libc_init_array>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4d0d      	ldr	r5, [pc, #52]	@ (80055c0 <__libc_init_array+0x38>)
 800558c:	4c0d      	ldr	r4, [pc, #52]	@ (80055c4 <__libc_init_array+0x3c>)
 800558e:	1b64      	subs	r4, r4, r5
 8005590:	10a4      	asrs	r4, r4, #2
 8005592:	2600      	movs	r6, #0
 8005594:	42a6      	cmp	r6, r4
 8005596:	d109      	bne.n	80055ac <__libc_init_array+0x24>
 8005598:	4d0b      	ldr	r5, [pc, #44]	@ (80055c8 <__libc_init_array+0x40>)
 800559a:	4c0c      	ldr	r4, [pc, #48]	@ (80055cc <__libc_init_array+0x44>)
 800559c:	f001 fcb0 	bl	8006f00 <_init>
 80055a0:	1b64      	subs	r4, r4, r5
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	2600      	movs	r6, #0
 80055a6:	42a6      	cmp	r6, r4
 80055a8:	d105      	bne.n	80055b6 <__libc_init_array+0x2e>
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b0:	4798      	blx	r3
 80055b2:	3601      	adds	r6, #1
 80055b4:	e7ee      	b.n	8005594 <__libc_init_array+0xc>
 80055b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ba:	4798      	blx	r3
 80055bc:	3601      	adds	r6, #1
 80055be:	e7f2      	b.n	80055a6 <__libc_init_array+0x1e>
 80055c0:	080070f0 	.word	0x080070f0
 80055c4:	080070f0 	.word	0x080070f0
 80055c8:	080070f0 	.word	0x080070f0
 80055cc:	080070f4 	.word	0x080070f4

080055d0 <__retarget_lock_init_recursive>:
 80055d0:	4770      	bx	lr

080055d2 <__retarget_lock_acquire_recursive>:
 80055d2:	4770      	bx	lr

080055d4 <__retarget_lock_release_recursive>:
 80055d4:	4770      	bx	lr
	...

080055d8 <_free_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4605      	mov	r5, r0
 80055dc:	2900      	cmp	r1, #0
 80055de:	d041      	beq.n	8005664 <_free_r+0x8c>
 80055e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e4:	1f0c      	subs	r4, r1, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bfb8      	it	lt
 80055ea:	18e4      	addlt	r4, r4, r3
 80055ec:	f000 f8e0 	bl	80057b0 <__malloc_lock>
 80055f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005668 <_free_r+0x90>)
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	b933      	cbnz	r3, 8005604 <_free_r+0x2c>
 80055f6:	6063      	str	r3, [r4, #4]
 80055f8:	6014      	str	r4, [r2, #0]
 80055fa:	4628      	mov	r0, r5
 80055fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005600:	f000 b8dc 	b.w	80057bc <__malloc_unlock>
 8005604:	42a3      	cmp	r3, r4
 8005606:	d908      	bls.n	800561a <_free_r+0x42>
 8005608:	6820      	ldr	r0, [r4, #0]
 800560a:	1821      	adds	r1, r4, r0
 800560c:	428b      	cmp	r3, r1
 800560e:	bf01      	itttt	eq
 8005610:	6819      	ldreq	r1, [r3, #0]
 8005612:	685b      	ldreq	r3, [r3, #4]
 8005614:	1809      	addeq	r1, r1, r0
 8005616:	6021      	streq	r1, [r4, #0]
 8005618:	e7ed      	b.n	80055f6 <_free_r+0x1e>
 800561a:	461a      	mov	r2, r3
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	b10b      	cbz	r3, 8005624 <_free_r+0x4c>
 8005620:	42a3      	cmp	r3, r4
 8005622:	d9fa      	bls.n	800561a <_free_r+0x42>
 8005624:	6811      	ldr	r1, [r2, #0]
 8005626:	1850      	adds	r0, r2, r1
 8005628:	42a0      	cmp	r0, r4
 800562a:	d10b      	bne.n	8005644 <_free_r+0x6c>
 800562c:	6820      	ldr	r0, [r4, #0]
 800562e:	4401      	add	r1, r0
 8005630:	1850      	adds	r0, r2, r1
 8005632:	4283      	cmp	r3, r0
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	d1e0      	bne.n	80055fa <_free_r+0x22>
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	6053      	str	r3, [r2, #4]
 800563e:	4408      	add	r0, r1
 8005640:	6010      	str	r0, [r2, #0]
 8005642:	e7da      	b.n	80055fa <_free_r+0x22>
 8005644:	d902      	bls.n	800564c <_free_r+0x74>
 8005646:	230c      	movs	r3, #12
 8005648:	602b      	str	r3, [r5, #0]
 800564a:	e7d6      	b.n	80055fa <_free_r+0x22>
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	1821      	adds	r1, r4, r0
 8005650:	428b      	cmp	r3, r1
 8005652:	bf04      	itt	eq
 8005654:	6819      	ldreq	r1, [r3, #0]
 8005656:	685b      	ldreq	r3, [r3, #4]
 8005658:	6063      	str	r3, [r4, #4]
 800565a:	bf04      	itt	eq
 800565c:	1809      	addeq	r1, r1, r0
 800565e:	6021      	streq	r1, [r4, #0]
 8005660:	6054      	str	r4, [r2, #4]
 8005662:	e7ca      	b.n	80055fa <_free_r+0x22>
 8005664:	bd38      	pop	{r3, r4, r5, pc}
 8005666:	bf00      	nop
 8005668:	200009a0 	.word	0x200009a0

0800566c <sbrk_aligned>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4e0f      	ldr	r6, [pc, #60]	@ (80056ac <sbrk_aligned+0x40>)
 8005670:	460c      	mov	r4, r1
 8005672:	6831      	ldr	r1, [r6, #0]
 8005674:	4605      	mov	r5, r0
 8005676:	b911      	cbnz	r1, 800567e <sbrk_aligned+0x12>
 8005678:	f000 fca6 	bl	8005fc8 <_sbrk_r>
 800567c:	6030      	str	r0, [r6, #0]
 800567e:	4621      	mov	r1, r4
 8005680:	4628      	mov	r0, r5
 8005682:	f000 fca1 	bl	8005fc8 <_sbrk_r>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d103      	bne.n	8005692 <sbrk_aligned+0x26>
 800568a:	f04f 34ff 	mov.w	r4, #4294967295
 800568e:	4620      	mov	r0, r4
 8005690:	bd70      	pop	{r4, r5, r6, pc}
 8005692:	1cc4      	adds	r4, r0, #3
 8005694:	f024 0403 	bic.w	r4, r4, #3
 8005698:	42a0      	cmp	r0, r4
 800569a:	d0f8      	beq.n	800568e <sbrk_aligned+0x22>
 800569c:	1a21      	subs	r1, r4, r0
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 fc92 	bl	8005fc8 <_sbrk_r>
 80056a4:	3001      	adds	r0, #1
 80056a6:	d1f2      	bne.n	800568e <sbrk_aligned+0x22>
 80056a8:	e7ef      	b.n	800568a <sbrk_aligned+0x1e>
 80056aa:	bf00      	nop
 80056ac:	2000099c 	.word	0x2000099c

080056b0 <_malloc_r>:
 80056b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b4:	1ccd      	adds	r5, r1, #3
 80056b6:	f025 0503 	bic.w	r5, r5, #3
 80056ba:	3508      	adds	r5, #8
 80056bc:	2d0c      	cmp	r5, #12
 80056be:	bf38      	it	cc
 80056c0:	250c      	movcc	r5, #12
 80056c2:	2d00      	cmp	r5, #0
 80056c4:	4606      	mov	r6, r0
 80056c6:	db01      	blt.n	80056cc <_malloc_r+0x1c>
 80056c8:	42a9      	cmp	r1, r5
 80056ca:	d904      	bls.n	80056d6 <_malloc_r+0x26>
 80056cc:	230c      	movs	r3, #12
 80056ce:	6033      	str	r3, [r6, #0]
 80056d0:	2000      	movs	r0, #0
 80056d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057ac <_malloc_r+0xfc>
 80056da:	f000 f869 	bl	80057b0 <__malloc_lock>
 80056de:	f8d8 3000 	ldr.w	r3, [r8]
 80056e2:	461c      	mov	r4, r3
 80056e4:	bb44      	cbnz	r4, 8005738 <_malloc_r+0x88>
 80056e6:	4629      	mov	r1, r5
 80056e8:	4630      	mov	r0, r6
 80056ea:	f7ff ffbf 	bl	800566c <sbrk_aligned>
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	4604      	mov	r4, r0
 80056f2:	d158      	bne.n	80057a6 <_malloc_r+0xf6>
 80056f4:	f8d8 4000 	ldr.w	r4, [r8]
 80056f8:	4627      	mov	r7, r4
 80056fa:	2f00      	cmp	r7, #0
 80056fc:	d143      	bne.n	8005786 <_malloc_r+0xd6>
 80056fe:	2c00      	cmp	r4, #0
 8005700:	d04b      	beq.n	800579a <_malloc_r+0xea>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	4639      	mov	r1, r7
 8005706:	4630      	mov	r0, r6
 8005708:	eb04 0903 	add.w	r9, r4, r3
 800570c:	f000 fc5c 	bl	8005fc8 <_sbrk_r>
 8005710:	4581      	cmp	r9, r0
 8005712:	d142      	bne.n	800579a <_malloc_r+0xea>
 8005714:	6821      	ldr	r1, [r4, #0]
 8005716:	1a6d      	subs	r5, r5, r1
 8005718:	4629      	mov	r1, r5
 800571a:	4630      	mov	r0, r6
 800571c:	f7ff ffa6 	bl	800566c <sbrk_aligned>
 8005720:	3001      	adds	r0, #1
 8005722:	d03a      	beq.n	800579a <_malloc_r+0xea>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	442b      	add	r3, r5
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	f8d8 3000 	ldr.w	r3, [r8]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	bb62      	cbnz	r2, 800578c <_malloc_r+0xdc>
 8005732:	f8c8 7000 	str.w	r7, [r8]
 8005736:	e00f      	b.n	8005758 <_malloc_r+0xa8>
 8005738:	6822      	ldr	r2, [r4, #0]
 800573a:	1b52      	subs	r2, r2, r5
 800573c:	d420      	bmi.n	8005780 <_malloc_r+0xd0>
 800573e:	2a0b      	cmp	r2, #11
 8005740:	d917      	bls.n	8005772 <_malloc_r+0xc2>
 8005742:	1961      	adds	r1, r4, r5
 8005744:	42a3      	cmp	r3, r4
 8005746:	6025      	str	r5, [r4, #0]
 8005748:	bf18      	it	ne
 800574a:	6059      	strne	r1, [r3, #4]
 800574c:	6863      	ldr	r3, [r4, #4]
 800574e:	bf08      	it	eq
 8005750:	f8c8 1000 	streq.w	r1, [r8]
 8005754:	5162      	str	r2, [r4, r5]
 8005756:	604b      	str	r3, [r1, #4]
 8005758:	4630      	mov	r0, r6
 800575a:	f000 f82f 	bl	80057bc <__malloc_unlock>
 800575e:	f104 000b 	add.w	r0, r4, #11
 8005762:	1d23      	adds	r3, r4, #4
 8005764:	f020 0007 	bic.w	r0, r0, #7
 8005768:	1ac2      	subs	r2, r0, r3
 800576a:	bf1c      	itt	ne
 800576c:	1a1b      	subne	r3, r3, r0
 800576e:	50a3      	strne	r3, [r4, r2]
 8005770:	e7af      	b.n	80056d2 <_malloc_r+0x22>
 8005772:	6862      	ldr	r2, [r4, #4]
 8005774:	42a3      	cmp	r3, r4
 8005776:	bf0c      	ite	eq
 8005778:	f8c8 2000 	streq.w	r2, [r8]
 800577c:	605a      	strne	r2, [r3, #4]
 800577e:	e7eb      	b.n	8005758 <_malloc_r+0xa8>
 8005780:	4623      	mov	r3, r4
 8005782:	6864      	ldr	r4, [r4, #4]
 8005784:	e7ae      	b.n	80056e4 <_malloc_r+0x34>
 8005786:	463c      	mov	r4, r7
 8005788:	687f      	ldr	r7, [r7, #4]
 800578a:	e7b6      	b.n	80056fa <_malloc_r+0x4a>
 800578c:	461a      	mov	r2, r3
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	42a3      	cmp	r3, r4
 8005792:	d1fb      	bne.n	800578c <_malloc_r+0xdc>
 8005794:	2300      	movs	r3, #0
 8005796:	6053      	str	r3, [r2, #4]
 8005798:	e7de      	b.n	8005758 <_malloc_r+0xa8>
 800579a:	230c      	movs	r3, #12
 800579c:	6033      	str	r3, [r6, #0]
 800579e:	4630      	mov	r0, r6
 80057a0:	f000 f80c 	bl	80057bc <__malloc_unlock>
 80057a4:	e794      	b.n	80056d0 <_malloc_r+0x20>
 80057a6:	6005      	str	r5, [r0, #0]
 80057a8:	e7d6      	b.n	8005758 <_malloc_r+0xa8>
 80057aa:	bf00      	nop
 80057ac:	200009a0 	.word	0x200009a0

080057b0 <__malloc_lock>:
 80057b0:	4801      	ldr	r0, [pc, #4]	@ (80057b8 <__malloc_lock+0x8>)
 80057b2:	f7ff bf0e 	b.w	80055d2 <__retarget_lock_acquire_recursive>
 80057b6:	bf00      	nop
 80057b8:	20000998 	.word	0x20000998

080057bc <__malloc_unlock>:
 80057bc:	4801      	ldr	r0, [pc, #4]	@ (80057c4 <__malloc_unlock+0x8>)
 80057be:	f7ff bf09 	b.w	80055d4 <__retarget_lock_release_recursive>
 80057c2:	bf00      	nop
 80057c4:	20000998 	.word	0x20000998

080057c8 <__sfputc_r>:
 80057c8:	6893      	ldr	r3, [r2, #8]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	b410      	push	{r4}
 80057d0:	6093      	str	r3, [r2, #8]
 80057d2:	da08      	bge.n	80057e6 <__sfputc_r+0x1e>
 80057d4:	6994      	ldr	r4, [r2, #24]
 80057d6:	42a3      	cmp	r3, r4
 80057d8:	db01      	blt.n	80057de <__sfputc_r+0x16>
 80057da:	290a      	cmp	r1, #10
 80057dc:	d103      	bne.n	80057e6 <__sfputc_r+0x1e>
 80057de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057e2:	f7ff bde8 	b.w	80053b6 <__swbuf_r>
 80057e6:	6813      	ldr	r3, [r2, #0]
 80057e8:	1c58      	adds	r0, r3, #1
 80057ea:	6010      	str	r0, [r2, #0]
 80057ec:	7019      	strb	r1, [r3, #0]
 80057ee:	4608      	mov	r0, r1
 80057f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <__sfputs_r>:
 80057f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f8:	4606      	mov	r6, r0
 80057fa:	460f      	mov	r7, r1
 80057fc:	4614      	mov	r4, r2
 80057fe:	18d5      	adds	r5, r2, r3
 8005800:	42ac      	cmp	r4, r5
 8005802:	d101      	bne.n	8005808 <__sfputs_r+0x12>
 8005804:	2000      	movs	r0, #0
 8005806:	e007      	b.n	8005818 <__sfputs_r+0x22>
 8005808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800580c:	463a      	mov	r2, r7
 800580e:	4630      	mov	r0, r6
 8005810:	f7ff ffda 	bl	80057c8 <__sfputc_r>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d1f3      	bne.n	8005800 <__sfputs_r+0xa>
 8005818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800581c <_vfiprintf_r>:
 800581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005820:	460d      	mov	r5, r1
 8005822:	b09d      	sub	sp, #116	@ 0x74
 8005824:	4614      	mov	r4, r2
 8005826:	4698      	mov	r8, r3
 8005828:	4606      	mov	r6, r0
 800582a:	b118      	cbz	r0, 8005834 <_vfiprintf_r+0x18>
 800582c:	6a03      	ldr	r3, [r0, #32]
 800582e:	b90b      	cbnz	r3, 8005834 <_vfiprintf_r+0x18>
 8005830:	f7ff fcd8 	bl	80051e4 <__sinit>
 8005834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005836:	07d9      	lsls	r1, r3, #31
 8005838:	d405      	bmi.n	8005846 <_vfiprintf_r+0x2a>
 800583a:	89ab      	ldrh	r3, [r5, #12]
 800583c:	059a      	lsls	r2, r3, #22
 800583e:	d402      	bmi.n	8005846 <_vfiprintf_r+0x2a>
 8005840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005842:	f7ff fec6 	bl	80055d2 <__retarget_lock_acquire_recursive>
 8005846:	89ab      	ldrh	r3, [r5, #12]
 8005848:	071b      	lsls	r3, r3, #28
 800584a:	d501      	bpl.n	8005850 <_vfiprintf_r+0x34>
 800584c:	692b      	ldr	r3, [r5, #16]
 800584e:	b99b      	cbnz	r3, 8005878 <_vfiprintf_r+0x5c>
 8005850:	4629      	mov	r1, r5
 8005852:	4630      	mov	r0, r6
 8005854:	f7ff fdee 	bl	8005434 <__swsetup_r>
 8005858:	b170      	cbz	r0, 8005878 <_vfiprintf_r+0x5c>
 800585a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800585c:	07dc      	lsls	r4, r3, #31
 800585e:	d504      	bpl.n	800586a <_vfiprintf_r+0x4e>
 8005860:	f04f 30ff 	mov.w	r0, #4294967295
 8005864:	b01d      	add	sp, #116	@ 0x74
 8005866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586a:	89ab      	ldrh	r3, [r5, #12]
 800586c:	0598      	lsls	r0, r3, #22
 800586e:	d4f7      	bmi.n	8005860 <_vfiprintf_r+0x44>
 8005870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005872:	f7ff feaf 	bl	80055d4 <__retarget_lock_release_recursive>
 8005876:	e7f3      	b.n	8005860 <_vfiprintf_r+0x44>
 8005878:	2300      	movs	r3, #0
 800587a:	9309      	str	r3, [sp, #36]	@ 0x24
 800587c:	2320      	movs	r3, #32
 800587e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005882:	f8cd 800c 	str.w	r8, [sp, #12]
 8005886:	2330      	movs	r3, #48	@ 0x30
 8005888:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005a38 <_vfiprintf_r+0x21c>
 800588c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005890:	f04f 0901 	mov.w	r9, #1
 8005894:	4623      	mov	r3, r4
 8005896:	469a      	mov	sl, r3
 8005898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800589c:	b10a      	cbz	r2, 80058a2 <_vfiprintf_r+0x86>
 800589e:	2a25      	cmp	r2, #37	@ 0x25
 80058a0:	d1f9      	bne.n	8005896 <_vfiprintf_r+0x7a>
 80058a2:	ebba 0b04 	subs.w	fp, sl, r4
 80058a6:	d00b      	beq.n	80058c0 <_vfiprintf_r+0xa4>
 80058a8:	465b      	mov	r3, fp
 80058aa:	4622      	mov	r2, r4
 80058ac:	4629      	mov	r1, r5
 80058ae:	4630      	mov	r0, r6
 80058b0:	f7ff ffa1 	bl	80057f6 <__sfputs_r>
 80058b4:	3001      	adds	r0, #1
 80058b6:	f000 80a7 	beq.w	8005a08 <_vfiprintf_r+0x1ec>
 80058ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058bc:	445a      	add	r2, fp
 80058be:	9209      	str	r2, [sp, #36]	@ 0x24
 80058c0:	f89a 3000 	ldrb.w	r3, [sl]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 809f 	beq.w	8005a08 <_vfiprintf_r+0x1ec>
 80058ca:	2300      	movs	r3, #0
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295
 80058d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058d4:	f10a 0a01 	add.w	sl, sl, #1
 80058d8:	9304      	str	r3, [sp, #16]
 80058da:	9307      	str	r3, [sp, #28]
 80058dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80058e2:	4654      	mov	r4, sl
 80058e4:	2205      	movs	r2, #5
 80058e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ea:	4853      	ldr	r0, [pc, #332]	@ (8005a38 <_vfiprintf_r+0x21c>)
 80058ec:	f7fa fc80 	bl	80001f0 <memchr>
 80058f0:	9a04      	ldr	r2, [sp, #16]
 80058f2:	b9d8      	cbnz	r0, 800592c <_vfiprintf_r+0x110>
 80058f4:	06d1      	lsls	r1, r2, #27
 80058f6:	bf44      	itt	mi
 80058f8:	2320      	movmi	r3, #32
 80058fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058fe:	0713      	lsls	r3, r2, #28
 8005900:	bf44      	itt	mi
 8005902:	232b      	movmi	r3, #43	@ 0x2b
 8005904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005908:	f89a 3000 	ldrb.w	r3, [sl]
 800590c:	2b2a      	cmp	r3, #42	@ 0x2a
 800590e:	d015      	beq.n	800593c <_vfiprintf_r+0x120>
 8005910:	9a07      	ldr	r2, [sp, #28]
 8005912:	4654      	mov	r4, sl
 8005914:	2000      	movs	r0, #0
 8005916:	f04f 0c0a 	mov.w	ip, #10
 800591a:	4621      	mov	r1, r4
 800591c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005920:	3b30      	subs	r3, #48	@ 0x30
 8005922:	2b09      	cmp	r3, #9
 8005924:	d94b      	bls.n	80059be <_vfiprintf_r+0x1a2>
 8005926:	b1b0      	cbz	r0, 8005956 <_vfiprintf_r+0x13a>
 8005928:	9207      	str	r2, [sp, #28]
 800592a:	e014      	b.n	8005956 <_vfiprintf_r+0x13a>
 800592c:	eba0 0308 	sub.w	r3, r0, r8
 8005930:	fa09 f303 	lsl.w	r3, r9, r3
 8005934:	4313      	orrs	r3, r2
 8005936:	9304      	str	r3, [sp, #16]
 8005938:	46a2      	mov	sl, r4
 800593a:	e7d2      	b.n	80058e2 <_vfiprintf_r+0xc6>
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	1d19      	adds	r1, r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	9103      	str	r1, [sp, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	bfbb      	ittet	lt
 8005948:	425b      	neglt	r3, r3
 800594a:	f042 0202 	orrlt.w	r2, r2, #2
 800594e:	9307      	strge	r3, [sp, #28]
 8005950:	9307      	strlt	r3, [sp, #28]
 8005952:	bfb8      	it	lt
 8005954:	9204      	strlt	r2, [sp, #16]
 8005956:	7823      	ldrb	r3, [r4, #0]
 8005958:	2b2e      	cmp	r3, #46	@ 0x2e
 800595a:	d10a      	bne.n	8005972 <_vfiprintf_r+0x156>
 800595c:	7863      	ldrb	r3, [r4, #1]
 800595e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005960:	d132      	bne.n	80059c8 <_vfiprintf_r+0x1ac>
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	1d1a      	adds	r2, r3, #4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	9203      	str	r2, [sp, #12]
 800596a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800596e:	3402      	adds	r4, #2
 8005970:	9305      	str	r3, [sp, #20]
 8005972:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005a48 <_vfiprintf_r+0x22c>
 8005976:	7821      	ldrb	r1, [r4, #0]
 8005978:	2203      	movs	r2, #3
 800597a:	4650      	mov	r0, sl
 800597c:	f7fa fc38 	bl	80001f0 <memchr>
 8005980:	b138      	cbz	r0, 8005992 <_vfiprintf_r+0x176>
 8005982:	9b04      	ldr	r3, [sp, #16]
 8005984:	eba0 000a 	sub.w	r0, r0, sl
 8005988:	2240      	movs	r2, #64	@ 0x40
 800598a:	4082      	lsls	r2, r0
 800598c:	4313      	orrs	r3, r2
 800598e:	3401      	adds	r4, #1
 8005990:	9304      	str	r3, [sp, #16]
 8005992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005996:	4829      	ldr	r0, [pc, #164]	@ (8005a3c <_vfiprintf_r+0x220>)
 8005998:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800599c:	2206      	movs	r2, #6
 800599e:	f7fa fc27 	bl	80001f0 <memchr>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d03f      	beq.n	8005a26 <_vfiprintf_r+0x20a>
 80059a6:	4b26      	ldr	r3, [pc, #152]	@ (8005a40 <_vfiprintf_r+0x224>)
 80059a8:	bb1b      	cbnz	r3, 80059f2 <_vfiprintf_r+0x1d6>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	3307      	adds	r3, #7
 80059ae:	f023 0307 	bic.w	r3, r3, #7
 80059b2:	3308      	adds	r3, #8
 80059b4:	9303      	str	r3, [sp, #12]
 80059b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059b8:	443b      	add	r3, r7
 80059ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80059bc:	e76a      	b.n	8005894 <_vfiprintf_r+0x78>
 80059be:	fb0c 3202 	mla	r2, ip, r2, r3
 80059c2:	460c      	mov	r4, r1
 80059c4:	2001      	movs	r0, #1
 80059c6:	e7a8      	b.n	800591a <_vfiprintf_r+0xfe>
 80059c8:	2300      	movs	r3, #0
 80059ca:	3401      	adds	r4, #1
 80059cc:	9305      	str	r3, [sp, #20]
 80059ce:	4619      	mov	r1, r3
 80059d0:	f04f 0c0a 	mov.w	ip, #10
 80059d4:	4620      	mov	r0, r4
 80059d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059da:	3a30      	subs	r2, #48	@ 0x30
 80059dc:	2a09      	cmp	r2, #9
 80059de:	d903      	bls.n	80059e8 <_vfiprintf_r+0x1cc>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0c6      	beq.n	8005972 <_vfiprintf_r+0x156>
 80059e4:	9105      	str	r1, [sp, #20]
 80059e6:	e7c4      	b.n	8005972 <_vfiprintf_r+0x156>
 80059e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80059ec:	4604      	mov	r4, r0
 80059ee:	2301      	movs	r3, #1
 80059f0:	e7f0      	b.n	80059d4 <_vfiprintf_r+0x1b8>
 80059f2:	ab03      	add	r3, sp, #12
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	462a      	mov	r2, r5
 80059f8:	4b12      	ldr	r3, [pc, #72]	@ (8005a44 <_vfiprintf_r+0x228>)
 80059fa:	a904      	add	r1, sp, #16
 80059fc:	4630      	mov	r0, r6
 80059fe:	f3af 8000 	nop.w
 8005a02:	4607      	mov	r7, r0
 8005a04:	1c78      	adds	r0, r7, #1
 8005a06:	d1d6      	bne.n	80059b6 <_vfiprintf_r+0x19a>
 8005a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a0a:	07d9      	lsls	r1, r3, #31
 8005a0c:	d405      	bmi.n	8005a1a <_vfiprintf_r+0x1fe>
 8005a0e:	89ab      	ldrh	r3, [r5, #12]
 8005a10:	059a      	lsls	r2, r3, #22
 8005a12:	d402      	bmi.n	8005a1a <_vfiprintf_r+0x1fe>
 8005a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a16:	f7ff fddd 	bl	80055d4 <__retarget_lock_release_recursive>
 8005a1a:	89ab      	ldrh	r3, [r5, #12]
 8005a1c:	065b      	lsls	r3, r3, #25
 8005a1e:	f53f af1f 	bmi.w	8005860 <_vfiprintf_r+0x44>
 8005a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a24:	e71e      	b.n	8005864 <_vfiprintf_r+0x48>
 8005a26:	ab03      	add	r3, sp, #12
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	462a      	mov	r2, r5
 8005a2c:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <_vfiprintf_r+0x228>)
 8005a2e:	a904      	add	r1, sp, #16
 8005a30:	4630      	mov	r0, r6
 8005a32:	f000 f879 	bl	8005b28 <_printf_i>
 8005a36:	e7e4      	b.n	8005a02 <_vfiprintf_r+0x1e6>
 8005a38:	08007084 	.word	0x08007084
 8005a3c:	0800708e 	.word	0x0800708e
 8005a40:	00000000 	.word	0x00000000
 8005a44:	080057f7 	.word	0x080057f7
 8005a48:	0800708a 	.word	0x0800708a

08005a4c <_printf_common>:
 8005a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a50:	4616      	mov	r6, r2
 8005a52:	4698      	mov	r8, r3
 8005a54:	688a      	ldr	r2, [r1, #8]
 8005a56:	690b      	ldr	r3, [r1, #16]
 8005a58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	bfb8      	it	lt
 8005a60:	4613      	movlt	r3, r2
 8005a62:	6033      	str	r3, [r6, #0]
 8005a64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a68:	4607      	mov	r7, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	b10a      	cbz	r2, 8005a72 <_printf_common+0x26>
 8005a6e:	3301      	adds	r3, #1
 8005a70:	6033      	str	r3, [r6, #0]
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	0699      	lsls	r1, r3, #26
 8005a76:	bf42      	ittt	mi
 8005a78:	6833      	ldrmi	r3, [r6, #0]
 8005a7a:	3302      	addmi	r3, #2
 8005a7c:	6033      	strmi	r3, [r6, #0]
 8005a7e:	6825      	ldr	r5, [r4, #0]
 8005a80:	f015 0506 	ands.w	r5, r5, #6
 8005a84:	d106      	bne.n	8005a94 <_printf_common+0x48>
 8005a86:	f104 0a19 	add.w	sl, r4, #25
 8005a8a:	68e3      	ldr	r3, [r4, #12]
 8005a8c:	6832      	ldr	r2, [r6, #0]
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	42ab      	cmp	r3, r5
 8005a92:	dc26      	bgt.n	8005ae2 <_printf_common+0x96>
 8005a94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a98:	6822      	ldr	r2, [r4, #0]
 8005a9a:	3b00      	subs	r3, #0
 8005a9c:	bf18      	it	ne
 8005a9e:	2301      	movne	r3, #1
 8005aa0:	0692      	lsls	r2, r2, #26
 8005aa2:	d42b      	bmi.n	8005afc <_printf_common+0xb0>
 8005aa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	4638      	mov	r0, r7
 8005aac:	47c8      	blx	r9
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d01e      	beq.n	8005af0 <_printf_common+0xa4>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	6922      	ldr	r2, [r4, #16]
 8005ab6:	f003 0306 	and.w	r3, r3, #6
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	bf02      	ittt	eq
 8005abe:	68e5      	ldreq	r5, [r4, #12]
 8005ac0:	6833      	ldreq	r3, [r6, #0]
 8005ac2:	1aed      	subeq	r5, r5, r3
 8005ac4:	68a3      	ldr	r3, [r4, #8]
 8005ac6:	bf0c      	ite	eq
 8005ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005acc:	2500      	movne	r5, #0
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	bfc4      	itt	gt
 8005ad2:	1a9b      	subgt	r3, r3, r2
 8005ad4:	18ed      	addgt	r5, r5, r3
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	341a      	adds	r4, #26
 8005ada:	42b5      	cmp	r5, r6
 8005adc:	d11a      	bne.n	8005b14 <_printf_common+0xc8>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	e008      	b.n	8005af4 <_printf_common+0xa8>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4652      	mov	r2, sl
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	4638      	mov	r0, r7
 8005aea:	47c8      	blx	r9
 8005aec:	3001      	adds	r0, #1
 8005aee:	d103      	bne.n	8005af8 <_printf_common+0xac>
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af8:	3501      	adds	r5, #1
 8005afa:	e7c6      	b.n	8005a8a <_printf_common+0x3e>
 8005afc:	18e1      	adds	r1, r4, r3
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	2030      	movs	r0, #48	@ 0x30
 8005b02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b06:	4422      	add	r2, r4
 8005b08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b10:	3302      	adds	r3, #2
 8005b12:	e7c7      	b.n	8005aa4 <_printf_common+0x58>
 8005b14:	2301      	movs	r3, #1
 8005b16:	4622      	mov	r2, r4
 8005b18:	4641      	mov	r1, r8
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	47c8      	blx	r9
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d0e6      	beq.n	8005af0 <_printf_common+0xa4>
 8005b22:	3601      	adds	r6, #1
 8005b24:	e7d9      	b.n	8005ada <_printf_common+0x8e>
	...

08005b28 <_printf_i>:
 8005b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	7e0f      	ldrb	r7, [r1, #24]
 8005b2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b30:	2f78      	cmp	r7, #120	@ 0x78
 8005b32:	4691      	mov	r9, r2
 8005b34:	4680      	mov	r8, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	469a      	mov	sl, r3
 8005b3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b3e:	d807      	bhi.n	8005b50 <_printf_i+0x28>
 8005b40:	2f62      	cmp	r7, #98	@ 0x62
 8005b42:	d80a      	bhi.n	8005b5a <_printf_i+0x32>
 8005b44:	2f00      	cmp	r7, #0
 8005b46:	f000 80d2 	beq.w	8005cee <_printf_i+0x1c6>
 8005b4a:	2f58      	cmp	r7, #88	@ 0x58
 8005b4c:	f000 80b9 	beq.w	8005cc2 <_printf_i+0x19a>
 8005b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b58:	e03a      	b.n	8005bd0 <_printf_i+0xa8>
 8005b5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b5e:	2b15      	cmp	r3, #21
 8005b60:	d8f6      	bhi.n	8005b50 <_printf_i+0x28>
 8005b62:	a101      	add	r1, pc, #4	@ (adr r1, 8005b68 <_printf_i+0x40>)
 8005b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b68:	08005bc1 	.word	0x08005bc1
 8005b6c:	08005bd5 	.word	0x08005bd5
 8005b70:	08005b51 	.word	0x08005b51
 8005b74:	08005b51 	.word	0x08005b51
 8005b78:	08005b51 	.word	0x08005b51
 8005b7c:	08005b51 	.word	0x08005b51
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005b51 	.word	0x08005b51
 8005b88:	08005b51 	.word	0x08005b51
 8005b8c:	08005b51 	.word	0x08005b51
 8005b90:	08005b51 	.word	0x08005b51
 8005b94:	08005cd5 	.word	0x08005cd5
 8005b98:	08005bff 	.word	0x08005bff
 8005b9c:	08005c8f 	.word	0x08005c8f
 8005ba0:	08005b51 	.word	0x08005b51
 8005ba4:	08005b51 	.word	0x08005b51
 8005ba8:	08005cf7 	.word	0x08005cf7
 8005bac:	08005b51 	.word	0x08005b51
 8005bb0:	08005bff 	.word	0x08005bff
 8005bb4:	08005b51 	.word	0x08005b51
 8005bb8:	08005b51 	.word	0x08005b51
 8005bbc:	08005c97 	.word	0x08005c97
 8005bc0:	6833      	ldr	r3, [r6, #0]
 8005bc2:	1d1a      	adds	r2, r3, #4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6032      	str	r2, [r6, #0]
 8005bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e09d      	b.n	8005d10 <_printf_i+0x1e8>
 8005bd4:	6833      	ldr	r3, [r6, #0]
 8005bd6:	6820      	ldr	r0, [r4, #0]
 8005bd8:	1d19      	adds	r1, r3, #4
 8005bda:	6031      	str	r1, [r6, #0]
 8005bdc:	0606      	lsls	r6, r0, #24
 8005bde:	d501      	bpl.n	8005be4 <_printf_i+0xbc>
 8005be0:	681d      	ldr	r5, [r3, #0]
 8005be2:	e003      	b.n	8005bec <_printf_i+0xc4>
 8005be4:	0645      	lsls	r5, r0, #25
 8005be6:	d5fb      	bpl.n	8005be0 <_printf_i+0xb8>
 8005be8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bec:	2d00      	cmp	r5, #0
 8005bee:	da03      	bge.n	8005bf8 <_printf_i+0xd0>
 8005bf0:	232d      	movs	r3, #45	@ 0x2d
 8005bf2:	426d      	negs	r5, r5
 8005bf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bf8:	4859      	ldr	r0, [pc, #356]	@ (8005d60 <_printf_i+0x238>)
 8005bfa:	230a      	movs	r3, #10
 8005bfc:	e011      	b.n	8005c22 <_printf_i+0xfa>
 8005bfe:	6821      	ldr	r1, [r4, #0]
 8005c00:	6833      	ldr	r3, [r6, #0]
 8005c02:	0608      	lsls	r0, r1, #24
 8005c04:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c08:	d402      	bmi.n	8005c10 <_printf_i+0xe8>
 8005c0a:	0649      	lsls	r1, r1, #25
 8005c0c:	bf48      	it	mi
 8005c0e:	b2ad      	uxthmi	r5, r5
 8005c10:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c12:	4853      	ldr	r0, [pc, #332]	@ (8005d60 <_printf_i+0x238>)
 8005c14:	6033      	str	r3, [r6, #0]
 8005c16:	bf14      	ite	ne
 8005c18:	230a      	movne	r3, #10
 8005c1a:	2308      	moveq	r3, #8
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c22:	6866      	ldr	r6, [r4, #4]
 8005c24:	60a6      	str	r6, [r4, #8]
 8005c26:	2e00      	cmp	r6, #0
 8005c28:	bfa2      	ittt	ge
 8005c2a:	6821      	ldrge	r1, [r4, #0]
 8005c2c:	f021 0104 	bicge.w	r1, r1, #4
 8005c30:	6021      	strge	r1, [r4, #0]
 8005c32:	b90d      	cbnz	r5, 8005c38 <_printf_i+0x110>
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	d04b      	beq.n	8005cd0 <_printf_i+0x1a8>
 8005c38:	4616      	mov	r6, r2
 8005c3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c3e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c42:	5dc7      	ldrb	r7, [r0, r7]
 8005c44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c48:	462f      	mov	r7, r5
 8005c4a:	42bb      	cmp	r3, r7
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	d9f4      	bls.n	8005c3a <_printf_i+0x112>
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d10b      	bne.n	8005c6c <_printf_i+0x144>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	07df      	lsls	r7, r3, #31
 8005c58:	d508      	bpl.n	8005c6c <_printf_i+0x144>
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	6861      	ldr	r1, [r4, #4]
 8005c5e:	4299      	cmp	r1, r3
 8005c60:	bfde      	ittt	le
 8005c62:	2330      	movle	r3, #48	@ 0x30
 8005c64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c6c:	1b92      	subs	r2, r2, r6
 8005c6e:	6122      	str	r2, [r4, #16]
 8005c70:	f8cd a000 	str.w	sl, [sp]
 8005c74:	464b      	mov	r3, r9
 8005c76:	aa03      	add	r2, sp, #12
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	f7ff fee6 	bl	8005a4c <_printf_common>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d14a      	bne.n	8005d1a <_printf_i+0x1f2>
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	b004      	add	sp, #16
 8005c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	f043 0320 	orr.w	r3, r3, #32
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	4833      	ldr	r0, [pc, #204]	@ (8005d64 <_printf_i+0x23c>)
 8005c98:	2778      	movs	r7, #120	@ 0x78
 8005c9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	6831      	ldr	r1, [r6, #0]
 8005ca2:	061f      	lsls	r7, r3, #24
 8005ca4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ca8:	d402      	bmi.n	8005cb0 <_printf_i+0x188>
 8005caa:	065f      	lsls	r7, r3, #25
 8005cac:	bf48      	it	mi
 8005cae:	b2ad      	uxthmi	r5, r5
 8005cb0:	6031      	str	r1, [r6, #0]
 8005cb2:	07d9      	lsls	r1, r3, #31
 8005cb4:	bf44      	itt	mi
 8005cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cba:	6023      	strmi	r3, [r4, #0]
 8005cbc:	b11d      	cbz	r5, 8005cc6 <_printf_i+0x19e>
 8005cbe:	2310      	movs	r3, #16
 8005cc0:	e7ac      	b.n	8005c1c <_printf_i+0xf4>
 8005cc2:	4827      	ldr	r0, [pc, #156]	@ (8005d60 <_printf_i+0x238>)
 8005cc4:	e7e9      	b.n	8005c9a <_printf_i+0x172>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f023 0320 	bic.w	r3, r3, #32
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	e7f6      	b.n	8005cbe <_printf_i+0x196>
 8005cd0:	4616      	mov	r6, r2
 8005cd2:	e7bd      	b.n	8005c50 <_printf_i+0x128>
 8005cd4:	6833      	ldr	r3, [r6, #0]
 8005cd6:	6825      	ldr	r5, [r4, #0]
 8005cd8:	6961      	ldr	r1, [r4, #20]
 8005cda:	1d18      	adds	r0, r3, #4
 8005cdc:	6030      	str	r0, [r6, #0]
 8005cde:	062e      	lsls	r6, r5, #24
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	d501      	bpl.n	8005ce8 <_printf_i+0x1c0>
 8005ce4:	6019      	str	r1, [r3, #0]
 8005ce6:	e002      	b.n	8005cee <_printf_i+0x1c6>
 8005ce8:	0668      	lsls	r0, r5, #25
 8005cea:	d5fb      	bpl.n	8005ce4 <_printf_i+0x1bc>
 8005cec:	8019      	strh	r1, [r3, #0]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	6123      	str	r3, [r4, #16]
 8005cf2:	4616      	mov	r6, r2
 8005cf4:	e7bc      	b.n	8005c70 <_printf_i+0x148>
 8005cf6:	6833      	ldr	r3, [r6, #0]
 8005cf8:	1d1a      	adds	r2, r3, #4
 8005cfa:	6032      	str	r2, [r6, #0]
 8005cfc:	681e      	ldr	r6, [r3, #0]
 8005cfe:	6862      	ldr	r2, [r4, #4]
 8005d00:	2100      	movs	r1, #0
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7fa fa74 	bl	80001f0 <memchr>
 8005d08:	b108      	cbz	r0, 8005d0e <_printf_i+0x1e6>
 8005d0a:	1b80      	subs	r0, r0, r6
 8005d0c:	6060      	str	r0, [r4, #4]
 8005d0e:	6863      	ldr	r3, [r4, #4]
 8005d10:	6123      	str	r3, [r4, #16]
 8005d12:	2300      	movs	r3, #0
 8005d14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d18:	e7aa      	b.n	8005c70 <_printf_i+0x148>
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	4649      	mov	r1, r9
 8005d20:	4640      	mov	r0, r8
 8005d22:	47d0      	blx	sl
 8005d24:	3001      	adds	r0, #1
 8005d26:	d0ad      	beq.n	8005c84 <_printf_i+0x15c>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	079b      	lsls	r3, r3, #30
 8005d2c:	d413      	bmi.n	8005d56 <_printf_i+0x22e>
 8005d2e:	68e0      	ldr	r0, [r4, #12]
 8005d30:	9b03      	ldr	r3, [sp, #12]
 8005d32:	4298      	cmp	r0, r3
 8005d34:	bfb8      	it	lt
 8005d36:	4618      	movlt	r0, r3
 8005d38:	e7a6      	b.n	8005c88 <_printf_i+0x160>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	4649      	mov	r1, r9
 8005d40:	4640      	mov	r0, r8
 8005d42:	47d0      	blx	sl
 8005d44:	3001      	adds	r0, #1
 8005d46:	d09d      	beq.n	8005c84 <_printf_i+0x15c>
 8005d48:	3501      	adds	r5, #1
 8005d4a:	68e3      	ldr	r3, [r4, #12]
 8005d4c:	9903      	ldr	r1, [sp, #12]
 8005d4e:	1a5b      	subs	r3, r3, r1
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	dcf2      	bgt.n	8005d3a <_printf_i+0x212>
 8005d54:	e7eb      	b.n	8005d2e <_printf_i+0x206>
 8005d56:	2500      	movs	r5, #0
 8005d58:	f104 0619 	add.w	r6, r4, #25
 8005d5c:	e7f5      	b.n	8005d4a <_printf_i+0x222>
 8005d5e:	bf00      	nop
 8005d60:	08007095 	.word	0x08007095
 8005d64:	080070a6 	.word	0x080070a6

08005d68 <__sflush_r>:
 8005d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d70:	0716      	lsls	r6, r2, #28
 8005d72:	4605      	mov	r5, r0
 8005d74:	460c      	mov	r4, r1
 8005d76:	d454      	bmi.n	8005e22 <__sflush_r+0xba>
 8005d78:	684b      	ldr	r3, [r1, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	dc02      	bgt.n	8005d84 <__sflush_r+0x1c>
 8005d7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dd48      	ble.n	8005e16 <__sflush_r+0xae>
 8005d84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	d045      	beq.n	8005e16 <__sflush_r+0xae>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d90:	682f      	ldr	r7, [r5, #0]
 8005d92:	6a21      	ldr	r1, [r4, #32]
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	d030      	beq.n	8005dfa <__sflush_r+0x92>
 8005d98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	0759      	lsls	r1, r3, #29
 8005d9e:	d505      	bpl.n	8005dac <__sflush_r+0x44>
 8005da0:	6863      	ldr	r3, [r4, #4]
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005da6:	b10b      	cbz	r3, 8005dac <__sflush_r+0x44>
 8005da8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005daa:	1ad2      	subs	r2, r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005db0:	6a21      	ldr	r1, [r4, #32]
 8005db2:	4628      	mov	r0, r5
 8005db4:	47b0      	blx	r6
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	d106      	bne.n	8005dca <__sflush_r+0x62>
 8005dbc:	6829      	ldr	r1, [r5, #0]
 8005dbe:	291d      	cmp	r1, #29
 8005dc0:	d82b      	bhi.n	8005e1a <__sflush_r+0xb2>
 8005dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005e6c <__sflush_r+0x104>)
 8005dc4:	410a      	asrs	r2, r1
 8005dc6:	07d6      	lsls	r6, r2, #31
 8005dc8:	d427      	bmi.n	8005e1a <__sflush_r+0xb2>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	6062      	str	r2, [r4, #4]
 8005dce:	04d9      	lsls	r1, r3, #19
 8005dd0:	6922      	ldr	r2, [r4, #16]
 8005dd2:	6022      	str	r2, [r4, #0]
 8005dd4:	d504      	bpl.n	8005de0 <__sflush_r+0x78>
 8005dd6:	1c42      	adds	r2, r0, #1
 8005dd8:	d101      	bne.n	8005dde <__sflush_r+0x76>
 8005dda:	682b      	ldr	r3, [r5, #0]
 8005ddc:	b903      	cbnz	r3, 8005de0 <__sflush_r+0x78>
 8005dde:	6560      	str	r0, [r4, #84]	@ 0x54
 8005de0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005de2:	602f      	str	r7, [r5, #0]
 8005de4:	b1b9      	cbz	r1, 8005e16 <__sflush_r+0xae>
 8005de6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005dea:	4299      	cmp	r1, r3
 8005dec:	d002      	beq.n	8005df4 <__sflush_r+0x8c>
 8005dee:	4628      	mov	r0, r5
 8005df0:	f7ff fbf2 	bl	80055d8 <_free_r>
 8005df4:	2300      	movs	r3, #0
 8005df6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005df8:	e00d      	b.n	8005e16 <__sflush_r+0xae>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b0      	blx	r6
 8005e00:	4602      	mov	r2, r0
 8005e02:	1c50      	adds	r0, r2, #1
 8005e04:	d1c9      	bne.n	8005d9a <__sflush_r+0x32>
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0c6      	beq.n	8005d9a <__sflush_r+0x32>
 8005e0c:	2b1d      	cmp	r3, #29
 8005e0e:	d001      	beq.n	8005e14 <__sflush_r+0xac>
 8005e10:	2b16      	cmp	r3, #22
 8005e12:	d11e      	bne.n	8005e52 <__sflush_r+0xea>
 8005e14:	602f      	str	r7, [r5, #0]
 8005e16:	2000      	movs	r0, #0
 8005e18:	e022      	b.n	8005e60 <__sflush_r+0xf8>
 8005e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e1e:	b21b      	sxth	r3, r3
 8005e20:	e01b      	b.n	8005e5a <__sflush_r+0xf2>
 8005e22:	690f      	ldr	r7, [r1, #16]
 8005e24:	2f00      	cmp	r7, #0
 8005e26:	d0f6      	beq.n	8005e16 <__sflush_r+0xae>
 8005e28:	0793      	lsls	r3, r2, #30
 8005e2a:	680e      	ldr	r6, [r1, #0]
 8005e2c:	bf08      	it	eq
 8005e2e:	694b      	ldreq	r3, [r1, #20]
 8005e30:	600f      	str	r7, [r1, #0]
 8005e32:	bf18      	it	ne
 8005e34:	2300      	movne	r3, #0
 8005e36:	eba6 0807 	sub.w	r8, r6, r7
 8005e3a:	608b      	str	r3, [r1, #8]
 8005e3c:	f1b8 0f00 	cmp.w	r8, #0
 8005e40:	dde9      	ble.n	8005e16 <__sflush_r+0xae>
 8005e42:	6a21      	ldr	r1, [r4, #32]
 8005e44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e46:	4643      	mov	r3, r8
 8005e48:	463a      	mov	r2, r7
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b0      	blx	r6
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	dc08      	bgt.n	8005e64 <__sflush_r+0xfc>
 8005e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e5a:	81a3      	strh	r3, [r4, #12]
 8005e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e64:	4407      	add	r7, r0
 8005e66:	eba8 0800 	sub.w	r8, r8, r0
 8005e6a:	e7e7      	b.n	8005e3c <__sflush_r+0xd4>
 8005e6c:	dfbffffe 	.word	0xdfbffffe

08005e70 <_fflush_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	690b      	ldr	r3, [r1, #16]
 8005e74:	4605      	mov	r5, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	b913      	cbnz	r3, 8005e80 <_fflush_r+0x10>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	b118      	cbz	r0, 8005e8a <_fflush_r+0x1a>
 8005e82:	6a03      	ldr	r3, [r0, #32]
 8005e84:	b90b      	cbnz	r3, 8005e8a <_fflush_r+0x1a>
 8005e86:	f7ff f9ad 	bl	80051e4 <__sinit>
 8005e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f3      	beq.n	8005e7a <_fflush_r+0xa>
 8005e92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e94:	07d0      	lsls	r0, r2, #31
 8005e96:	d404      	bmi.n	8005ea2 <_fflush_r+0x32>
 8005e98:	0599      	lsls	r1, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_fflush_r+0x32>
 8005e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e9e:	f7ff fb98 	bl	80055d2 <__retarget_lock_acquire_recursive>
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	f7ff ff5f 	bl	8005d68 <__sflush_r>
 8005eaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eac:	07da      	lsls	r2, r3, #31
 8005eae:	4605      	mov	r5, r0
 8005eb0:	d4e4      	bmi.n	8005e7c <_fflush_r+0xc>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	059b      	lsls	r3, r3, #22
 8005eb6:	d4e1      	bmi.n	8005e7c <_fflush_r+0xc>
 8005eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eba:	f7ff fb8b 	bl	80055d4 <__retarget_lock_release_recursive>
 8005ebe:	e7dd      	b.n	8005e7c <_fflush_r+0xc>

08005ec0 <__swhatbuf_r>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	b096      	sub	sp, #88	@ 0x58
 8005ecc:	4615      	mov	r5, r2
 8005ece:	461e      	mov	r6, r3
 8005ed0:	da0d      	bge.n	8005eee <__swhatbuf_r+0x2e>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ed8:	f04f 0100 	mov.w	r1, #0
 8005edc:	bf14      	ite	ne
 8005ede:	2340      	movne	r3, #64	@ 0x40
 8005ee0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	6031      	str	r1, [r6, #0]
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	b016      	add	sp, #88	@ 0x58
 8005eec:	bd70      	pop	{r4, r5, r6, pc}
 8005eee:	466a      	mov	r2, sp
 8005ef0:	f000 f848 	bl	8005f84 <_fstat_r>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	dbec      	blt.n	8005ed2 <__swhatbuf_r+0x12>
 8005ef8:	9901      	ldr	r1, [sp, #4]
 8005efa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005efe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f02:	4259      	negs	r1, r3
 8005f04:	4159      	adcs	r1, r3
 8005f06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f0a:	e7eb      	b.n	8005ee4 <__swhatbuf_r+0x24>

08005f0c <__smakebuf_r>:
 8005f0c:	898b      	ldrh	r3, [r1, #12]
 8005f0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f10:	079d      	lsls	r5, r3, #30
 8005f12:	4606      	mov	r6, r0
 8005f14:	460c      	mov	r4, r1
 8005f16:	d507      	bpl.n	8005f28 <__smakebuf_r+0x1c>
 8005f18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	6123      	str	r3, [r4, #16]
 8005f20:	2301      	movs	r3, #1
 8005f22:	6163      	str	r3, [r4, #20]
 8005f24:	b003      	add	sp, #12
 8005f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f28:	ab01      	add	r3, sp, #4
 8005f2a:	466a      	mov	r2, sp
 8005f2c:	f7ff ffc8 	bl	8005ec0 <__swhatbuf_r>
 8005f30:	9f00      	ldr	r7, [sp, #0]
 8005f32:	4605      	mov	r5, r0
 8005f34:	4639      	mov	r1, r7
 8005f36:	4630      	mov	r0, r6
 8005f38:	f7ff fbba 	bl	80056b0 <_malloc_r>
 8005f3c:	b948      	cbnz	r0, 8005f52 <__smakebuf_r+0x46>
 8005f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f42:	059a      	lsls	r2, r3, #22
 8005f44:	d4ee      	bmi.n	8005f24 <__smakebuf_r+0x18>
 8005f46:	f023 0303 	bic.w	r3, r3, #3
 8005f4a:	f043 0302 	orr.w	r3, r3, #2
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	e7e2      	b.n	8005f18 <__smakebuf_r+0xc>
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	6020      	str	r0, [r4, #0]
 8005f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f5a:	81a3      	strh	r3, [r4, #12]
 8005f5c:	9b01      	ldr	r3, [sp, #4]
 8005f5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f62:	b15b      	cbz	r3, 8005f7c <__smakebuf_r+0x70>
 8005f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 f81d 	bl	8005fa8 <_isatty_r>
 8005f6e:	b128      	cbz	r0, 8005f7c <__smakebuf_r+0x70>
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	f023 0303 	bic.w	r3, r3, #3
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	431d      	orrs	r5, r3
 8005f80:	81a5      	strh	r5, [r4, #12]
 8005f82:	e7cf      	b.n	8005f24 <__smakebuf_r+0x18>

08005f84 <_fstat_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d07      	ldr	r5, [pc, #28]	@ (8005fa4 <_fstat_r+0x20>)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	f7fb fc37 	bl	8001804 <_fstat>
 8005f96:	1c43      	adds	r3, r0, #1
 8005f98:	d102      	bne.n	8005fa0 <_fstat_r+0x1c>
 8005f9a:	682b      	ldr	r3, [r5, #0]
 8005f9c:	b103      	cbz	r3, 8005fa0 <_fstat_r+0x1c>
 8005f9e:	6023      	str	r3, [r4, #0]
 8005fa0:	bd38      	pop	{r3, r4, r5, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000994 	.word	0x20000994

08005fa8 <_isatty_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d06      	ldr	r5, [pc, #24]	@ (8005fc4 <_isatty_r+0x1c>)
 8005fac:	2300      	movs	r3, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	f7fb fc36 	bl	8001824 <_isatty>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_isatty_r+0x1a>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_isatty_r+0x1a>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	20000994 	.word	0x20000994

08005fc8 <_sbrk_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d06      	ldr	r5, [pc, #24]	@ (8005fe4 <_sbrk_r+0x1c>)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	602b      	str	r3, [r5, #0]
 8005fd4:	f7fb fc3e 	bl	8001854 <_sbrk>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_sbrk_r+0x1a>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_sbrk_r+0x1a>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20000994 	.word	0x20000994

08005fe8 <pow>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	ed2d 8b02 	vpush	{d8}
 8005fee:	eeb0 8a40 	vmov.f32	s16, s0
 8005ff2:	eef0 8a60 	vmov.f32	s17, s1
 8005ff6:	ec55 4b11 	vmov	r4, r5, d1
 8005ffa:	f000 f979 	bl	80062f0 <__ieee754_pow>
 8005ffe:	4622      	mov	r2, r4
 8006000:	462b      	mov	r3, r5
 8006002:	4620      	mov	r0, r4
 8006004:	4629      	mov	r1, r5
 8006006:	ec57 6b10 	vmov	r6, r7, d0
 800600a:	f7fa fd97 	bl	8000b3c <__aeabi_dcmpun>
 800600e:	2800      	cmp	r0, #0
 8006010:	d13b      	bne.n	800608a <pow+0xa2>
 8006012:	ec51 0b18 	vmov	r0, r1, d8
 8006016:	2200      	movs	r2, #0
 8006018:	2300      	movs	r3, #0
 800601a:	f7fa fd5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800601e:	b1b8      	cbz	r0, 8006050 <pow+0x68>
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa fd56 	bl	8000ad8 <__aeabi_dcmpeq>
 800602c:	2800      	cmp	r0, #0
 800602e:	d146      	bne.n	80060be <pow+0xd6>
 8006030:	ec45 4b10 	vmov	d0, r4, r5
 8006034:	f000 f874 	bl	8006120 <finite>
 8006038:	b338      	cbz	r0, 800608a <pow+0xa2>
 800603a:	2200      	movs	r2, #0
 800603c:	2300      	movs	r3, #0
 800603e:	4620      	mov	r0, r4
 8006040:	4629      	mov	r1, r5
 8006042:	f7fa fd53 	bl	8000aec <__aeabi_dcmplt>
 8006046:	b300      	cbz	r0, 800608a <pow+0xa2>
 8006048:	f7ff fa98 	bl	800557c <__errno>
 800604c:	2322      	movs	r3, #34	@ 0x22
 800604e:	e01b      	b.n	8006088 <pow+0xa0>
 8006050:	ec47 6b10 	vmov	d0, r6, r7
 8006054:	f000 f864 	bl	8006120 <finite>
 8006058:	b9e0      	cbnz	r0, 8006094 <pow+0xac>
 800605a:	eeb0 0a48 	vmov.f32	s0, s16
 800605e:	eef0 0a68 	vmov.f32	s1, s17
 8006062:	f000 f85d 	bl	8006120 <finite>
 8006066:	b1a8      	cbz	r0, 8006094 <pow+0xac>
 8006068:	ec45 4b10 	vmov	d0, r4, r5
 800606c:	f000 f858 	bl	8006120 <finite>
 8006070:	b180      	cbz	r0, 8006094 <pow+0xac>
 8006072:	4632      	mov	r2, r6
 8006074:	463b      	mov	r3, r7
 8006076:	4630      	mov	r0, r6
 8006078:	4639      	mov	r1, r7
 800607a:	f7fa fd5f 	bl	8000b3c <__aeabi_dcmpun>
 800607e:	2800      	cmp	r0, #0
 8006080:	d0e2      	beq.n	8006048 <pow+0x60>
 8006082:	f7ff fa7b 	bl	800557c <__errno>
 8006086:	2321      	movs	r3, #33	@ 0x21
 8006088:	6003      	str	r3, [r0, #0]
 800608a:	ecbd 8b02 	vpop	{d8}
 800608e:	ec47 6b10 	vmov	d0, r6, r7
 8006092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006094:	2200      	movs	r2, #0
 8006096:	2300      	movs	r3, #0
 8006098:	4630      	mov	r0, r6
 800609a:	4639      	mov	r1, r7
 800609c:	f7fa fd1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d0f2      	beq.n	800608a <pow+0xa2>
 80060a4:	eeb0 0a48 	vmov.f32	s0, s16
 80060a8:	eef0 0a68 	vmov.f32	s1, s17
 80060ac:	f000 f838 	bl	8006120 <finite>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d0ea      	beq.n	800608a <pow+0xa2>
 80060b4:	ec45 4b10 	vmov	d0, r4, r5
 80060b8:	f000 f832 	bl	8006120 <finite>
 80060bc:	e7c3      	b.n	8006046 <pow+0x5e>
 80060be:	4f01      	ldr	r7, [pc, #4]	@ (80060c4 <pow+0xdc>)
 80060c0:	2600      	movs	r6, #0
 80060c2:	e7e2      	b.n	800608a <pow+0xa2>
 80060c4:	3ff00000 	.word	0x3ff00000

080060c8 <sqrt>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	ed2d 8b02 	vpush	{d8}
 80060ce:	ec55 4b10 	vmov	r4, r5, d0
 80060d2:	f000 f831 	bl	8006138 <__ieee754_sqrt>
 80060d6:	4622      	mov	r2, r4
 80060d8:	462b      	mov	r3, r5
 80060da:	4620      	mov	r0, r4
 80060dc:	4629      	mov	r1, r5
 80060de:	eeb0 8a40 	vmov.f32	s16, s0
 80060e2:	eef0 8a60 	vmov.f32	s17, s1
 80060e6:	f7fa fd29 	bl	8000b3c <__aeabi_dcmpun>
 80060ea:	b990      	cbnz	r0, 8006112 <sqrt+0x4a>
 80060ec:	2200      	movs	r2, #0
 80060ee:	2300      	movs	r3, #0
 80060f0:	4620      	mov	r0, r4
 80060f2:	4629      	mov	r1, r5
 80060f4:	f7fa fcfa 	bl	8000aec <__aeabi_dcmplt>
 80060f8:	b158      	cbz	r0, 8006112 <sqrt+0x4a>
 80060fa:	f7ff fa3f 	bl	800557c <__errno>
 80060fe:	2321      	movs	r3, #33	@ 0x21
 8006100:	6003      	str	r3, [r0, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	2300      	movs	r3, #0
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	f7fa fba7 	bl	800085c <__aeabi_ddiv>
 800610e:	ec41 0b18 	vmov	d8, r0, r1
 8006112:	eeb0 0a48 	vmov.f32	s0, s16
 8006116:	eef0 0a68 	vmov.f32	s1, s17
 800611a:	ecbd 8b02 	vpop	{d8}
 800611e:	bd38      	pop	{r3, r4, r5, pc}

08006120 <finite>:
 8006120:	b082      	sub	sp, #8
 8006122:	ed8d 0b00 	vstr	d0, [sp]
 8006126:	9801      	ldr	r0, [sp, #4]
 8006128:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800612c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006130:	0fc0      	lsrs	r0, r0, #31
 8006132:	b002      	add	sp, #8
 8006134:	4770      	bx	lr
	...

08006138 <__ieee754_sqrt>:
 8006138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	4a68      	ldr	r2, [pc, #416]	@ (80062e0 <__ieee754_sqrt+0x1a8>)
 800613e:	ec55 4b10 	vmov	r4, r5, d0
 8006142:	43aa      	bics	r2, r5
 8006144:	462b      	mov	r3, r5
 8006146:	4621      	mov	r1, r4
 8006148:	d110      	bne.n	800616c <__ieee754_sqrt+0x34>
 800614a:	4622      	mov	r2, r4
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f7fa fa5a 	bl	8000608 <__aeabi_dmul>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4620      	mov	r0, r4
 800615a:	4629      	mov	r1, r5
 800615c:	f7fa f89e 	bl	800029c <__adddf3>
 8006160:	4604      	mov	r4, r0
 8006162:	460d      	mov	r5, r1
 8006164:	ec45 4b10 	vmov	d0, r4, r5
 8006168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616c:	2d00      	cmp	r5, #0
 800616e:	dc0e      	bgt.n	800618e <__ieee754_sqrt+0x56>
 8006170:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006174:	4322      	orrs	r2, r4
 8006176:	d0f5      	beq.n	8006164 <__ieee754_sqrt+0x2c>
 8006178:	b19d      	cbz	r5, 80061a2 <__ieee754_sqrt+0x6a>
 800617a:	4622      	mov	r2, r4
 800617c:	4620      	mov	r0, r4
 800617e:	4629      	mov	r1, r5
 8006180:	f7fa f88a 	bl	8000298 <__aeabi_dsub>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	f7fa fb68 	bl	800085c <__aeabi_ddiv>
 800618c:	e7e8      	b.n	8006160 <__ieee754_sqrt+0x28>
 800618e:	152a      	asrs	r2, r5, #20
 8006190:	d115      	bne.n	80061be <__ieee754_sqrt+0x86>
 8006192:	2000      	movs	r0, #0
 8006194:	e009      	b.n	80061aa <__ieee754_sqrt+0x72>
 8006196:	0acb      	lsrs	r3, r1, #11
 8006198:	3a15      	subs	r2, #21
 800619a:	0549      	lsls	r1, r1, #21
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0fa      	beq.n	8006196 <__ieee754_sqrt+0x5e>
 80061a0:	e7f7      	b.n	8006192 <__ieee754_sqrt+0x5a>
 80061a2:	462a      	mov	r2, r5
 80061a4:	e7fa      	b.n	800619c <__ieee754_sqrt+0x64>
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	3001      	adds	r0, #1
 80061aa:	02dc      	lsls	r4, r3, #11
 80061ac:	d5fb      	bpl.n	80061a6 <__ieee754_sqrt+0x6e>
 80061ae:	1e44      	subs	r4, r0, #1
 80061b0:	1b12      	subs	r2, r2, r4
 80061b2:	f1c0 0420 	rsb	r4, r0, #32
 80061b6:	fa21 f404 	lsr.w	r4, r1, r4
 80061ba:	4323      	orrs	r3, r4
 80061bc:	4081      	lsls	r1, r0
 80061be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80061c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061ca:	07d2      	lsls	r2, r2, #31
 80061cc:	bf5c      	itt	pl
 80061ce:	005b      	lslpl	r3, r3, #1
 80061d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80061d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80061d8:	bf58      	it	pl
 80061da:	0049      	lslpl	r1, r1, #1
 80061dc:	2600      	movs	r6, #0
 80061de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80061e2:	106d      	asrs	r5, r5, #1
 80061e4:	0049      	lsls	r1, r1, #1
 80061e6:	2016      	movs	r0, #22
 80061e8:	4632      	mov	r2, r6
 80061ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80061ee:	1917      	adds	r7, r2, r4
 80061f0:	429f      	cmp	r7, r3
 80061f2:	bfde      	ittt	le
 80061f4:	193a      	addle	r2, r7, r4
 80061f6:	1bdb      	suble	r3, r3, r7
 80061f8:	1936      	addle	r6, r6, r4
 80061fa:	0fcf      	lsrs	r7, r1, #31
 80061fc:	3801      	subs	r0, #1
 80061fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006202:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006206:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800620a:	d1f0      	bne.n	80061ee <__ieee754_sqrt+0xb6>
 800620c:	4604      	mov	r4, r0
 800620e:	2720      	movs	r7, #32
 8006210:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006214:	429a      	cmp	r2, r3
 8006216:	eb00 0e0c 	add.w	lr, r0, ip
 800621a:	db02      	blt.n	8006222 <__ieee754_sqrt+0xea>
 800621c:	d113      	bne.n	8006246 <__ieee754_sqrt+0x10e>
 800621e:	458e      	cmp	lr, r1
 8006220:	d811      	bhi.n	8006246 <__ieee754_sqrt+0x10e>
 8006222:	f1be 0f00 	cmp.w	lr, #0
 8006226:	eb0e 000c 	add.w	r0, lr, ip
 800622a:	da42      	bge.n	80062b2 <__ieee754_sqrt+0x17a>
 800622c:	2800      	cmp	r0, #0
 800622e:	db40      	blt.n	80062b2 <__ieee754_sqrt+0x17a>
 8006230:	f102 0801 	add.w	r8, r2, #1
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	458e      	cmp	lr, r1
 8006238:	bf88      	it	hi
 800623a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800623e:	eba1 010e 	sub.w	r1, r1, lr
 8006242:	4464      	add	r4, ip
 8006244:	4642      	mov	r2, r8
 8006246:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800624a:	3f01      	subs	r7, #1
 800624c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006250:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006254:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006258:	d1dc      	bne.n	8006214 <__ieee754_sqrt+0xdc>
 800625a:	4319      	orrs	r1, r3
 800625c:	d01b      	beq.n	8006296 <__ieee754_sqrt+0x15e>
 800625e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80062e4 <__ieee754_sqrt+0x1ac>
 8006262:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80062e8 <__ieee754_sqrt+0x1b0>
 8006266:	e9da 0100 	ldrd	r0, r1, [sl]
 800626a:	e9db 2300 	ldrd	r2, r3, [fp]
 800626e:	f7fa f813 	bl	8000298 <__aeabi_dsub>
 8006272:	e9da 8900 	ldrd	r8, r9, [sl]
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4640      	mov	r0, r8
 800627c:	4649      	mov	r1, r9
 800627e:	f7fa fc3f 	bl	8000b00 <__aeabi_dcmple>
 8006282:	b140      	cbz	r0, 8006296 <__ieee754_sqrt+0x15e>
 8006284:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006288:	e9da 0100 	ldrd	r0, r1, [sl]
 800628c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006290:	d111      	bne.n	80062b6 <__ieee754_sqrt+0x17e>
 8006292:	3601      	adds	r6, #1
 8006294:	463c      	mov	r4, r7
 8006296:	1072      	asrs	r2, r6, #1
 8006298:	0863      	lsrs	r3, r4, #1
 800629a:	07f1      	lsls	r1, r6, #31
 800629c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80062a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80062a4:	bf48      	it	mi
 80062a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80062aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80062ae:	4618      	mov	r0, r3
 80062b0:	e756      	b.n	8006160 <__ieee754_sqrt+0x28>
 80062b2:	4690      	mov	r8, r2
 80062b4:	e7be      	b.n	8006234 <__ieee754_sqrt+0xfc>
 80062b6:	f7f9 fff1 	bl	800029c <__adddf3>
 80062ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4640      	mov	r0, r8
 80062c4:	4649      	mov	r1, r9
 80062c6:	f7fa fc11 	bl	8000aec <__aeabi_dcmplt>
 80062ca:	b120      	cbz	r0, 80062d6 <__ieee754_sqrt+0x19e>
 80062cc:	1ca0      	adds	r0, r4, #2
 80062ce:	bf08      	it	eq
 80062d0:	3601      	addeq	r6, #1
 80062d2:	3402      	adds	r4, #2
 80062d4:	e7df      	b.n	8006296 <__ieee754_sqrt+0x15e>
 80062d6:	1c63      	adds	r3, r4, #1
 80062d8:	f023 0401 	bic.w	r4, r3, #1
 80062dc:	e7db      	b.n	8006296 <__ieee754_sqrt+0x15e>
 80062de:	bf00      	nop
 80062e0:	7ff00000 	.word	0x7ff00000
 80062e4:	20000070 	.word	0x20000070
 80062e8:	20000068 	.word	0x20000068
 80062ec:	00000000 	.word	0x00000000

080062f0 <__ieee754_pow>:
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	b091      	sub	sp, #68	@ 0x44
 80062f6:	ed8d 1b00 	vstr	d1, [sp]
 80062fa:	e9dd 1900 	ldrd	r1, r9, [sp]
 80062fe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006302:	ea5a 0001 	orrs.w	r0, sl, r1
 8006306:	ec57 6b10 	vmov	r6, r7, d0
 800630a:	d113      	bne.n	8006334 <__ieee754_pow+0x44>
 800630c:	19b3      	adds	r3, r6, r6
 800630e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006312:	4152      	adcs	r2, r2
 8006314:	4298      	cmp	r0, r3
 8006316:	4b98      	ldr	r3, [pc, #608]	@ (8006578 <__ieee754_pow+0x288>)
 8006318:	4193      	sbcs	r3, r2
 800631a:	f080 84ea 	bcs.w	8006cf2 <__ieee754_pow+0xa02>
 800631e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006322:	4630      	mov	r0, r6
 8006324:	4639      	mov	r1, r7
 8006326:	f7f9 ffb9 	bl	800029c <__adddf3>
 800632a:	ec41 0b10 	vmov	d0, r0, r1
 800632e:	b011      	add	sp, #68	@ 0x44
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	4a91      	ldr	r2, [pc, #580]	@ (800657c <__ieee754_pow+0x28c>)
 8006336:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800633a:	4590      	cmp	r8, r2
 800633c:	463d      	mov	r5, r7
 800633e:	4633      	mov	r3, r6
 8006340:	d806      	bhi.n	8006350 <__ieee754_pow+0x60>
 8006342:	d101      	bne.n	8006348 <__ieee754_pow+0x58>
 8006344:	2e00      	cmp	r6, #0
 8006346:	d1ea      	bne.n	800631e <__ieee754_pow+0x2e>
 8006348:	4592      	cmp	sl, r2
 800634a:	d801      	bhi.n	8006350 <__ieee754_pow+0x60>
 800634c:	d10e      	bne.n	800636c <__ieee754_pow+0x7c>
 800634e:	b169      	cbz	r1, 800636c <__ieee754_pow+0x7c>
 8006350:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006354:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006358:	431d      	orrs	r5, r3
 800635a:	d1e0      	bne.n	800631e <__ieee754_pow+0x2e>
 800635c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006360:	18db      	adds	r3, r3, r3
 8006362:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006366:	4152      	adcs	r2, r2
 8006368:	429d      	cmp	r5, r3
 800636a:	e7d4      	b.n	8006316 <__ieee754_pow+0x26>
 800636c:	2d00      	cmp	r5, #0
 800636e:	46c3      	mov	fp, r8
 8006370:	da3a      	bge.n	80063e8 <__ieee754_pow+0xf8>
 8006372:	4a83      	ldr	r2, [pc, #524]	@ (8006580 <__ieee754_pow+0x290>)
 8006374:	4592      	cmp	sl, r2
 8006376:	d84d      	bhi.n	8006414 <__ieee754_pow+0x124>
 8006378:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800637c:	4592      	cmp	sl, r2
 800637e:	f240 84c7 	bls.w	8006d10 <__ieee754_pow+0xa20>
 8006382:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006386:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800638a:	2a14      	cmp	r2, #20
 800638c:	dd0f      	ble.n	80063ae <__ieee754_pow+0xbe>
 800638e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006392:	fa21 f402 	lsr.w	r4, r1, r2
 8006396:	fa04 f202 	lsl.w	r2, r4, r2
 800639a:	428a      	cmp	r2, r1
 800639c:	f040 84b8 	bne.w	8006d10 <__ieee754_pow+0xa20>
 80063a0:	f004 0401 	and.w	r4, r4, #1
 80063a4:	f1c4 0402 	rsb	r4, r4, #2
 80063a8:	2900      	cmp	r1, #0
 80063aa:	d158      	bne.n	800645e <__ieee754_pow+0x16e>
 80063ac:	e00e      	b.n	80063cc <__ieee754_pow+0xdc>
 80063ae:	2900      	cmp	r1, #0
 80063b0:	d154      	bne.n	800645c <__ieee754_pow+0x16c>
 80063b2:	f1c2 0214 	rsb	r2, r2, #20
 80063b6:	fa4a f402 	asr.w	r4, sl, r2
 80063ba:	fa04 f202 	lsl.w	r2, r4, r2
 80063be:	4552      	cmp	r2, sl
 80063c0:	f040 84a3 	bne.w	8006d0a <__ieee754_pow+0xa1a>
 80063c4:	f004 0401 	and.w	r4, r4, #1
 80063c8:	f1c4 0402 	rsb	r4, r4, #2
 80063cc:	4a6d      	ldr	r2, [pc, #436]	@ (8006584 <__ieee754_pow+0x294>)
 80063ce:	4592      	cmp	sl, r2
 80063d0:	d12e      	bne.n	8006430 <__ieee754_pow+0x140>
 80063d2:	f1b9 0f00 	cmp.w	r9, #0
 80063d6:	f280 8494 	bge.w	8006d02 <__ieee754_pow+0xa12>
 80063da:	496a      	ldr	r1, [pc, #424]	@ (8006584 <__ieee754_pow+0x294>)
 80063dc:	4632      	mov	r2, r6
 80063de:	463b      	mov	r3, r7
 80063e0:	2000      	movs	r0, #0
 80063e2:	f7fa fa3b 	bl	800085c <__aeabi_ddiv>
 80063e6:	e7a0      	b.n	800632a <__ieee754_pow+0x3a>
 80063e8:	2400      	movs	r4, #0
 80063ea:	bbc1      	cbnz	r1, 800645e <__ieee754_pow+0x16e>
 80063ec:	4a63      	ldr	r2, [pc, #396]	@ (800657c <__ieee754_pow+0x28c>)
 80063ee:	4592      	cmp	sl, r2
 80063f0:	d1ec      	bne.n	80063cc <__ieee754_pow+0xdc>
 80063f2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80063f6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80063fa:	431a      	orrs	r2, r3
 80063fc:	f000 8479 	beq.w	8006cf2 <__ieee754_pow+0xa02>
 8006400:	4b61      	ldr	r3, [pc, #388]	@ (8006588 <__ieee754_pow+0x298>)
 8006402:	4598      	cmp	r8, r3
 8006404:	d908      	bls.n	8006418 <__ieee754_pow+0x128>
 8006406:	f1b9 0f00 	cmp.w	r9, #0
 800640a:	f2c0 8476 	blt.w	8006cfa <__ieee754_pow+0xa0a>
 800640e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006412:	e78a      	b.n	800632a <__ieee754_pow+0x3a>
 8006414:	2402      	movs	r4, #2
 8006416:	e7e8      	b.n	80063ea <__ieee754_pow+0xfa>
 8006418:	f1b9 0f00 	cmp.w	r9, #0
 800641c:	f04f 0000 	mov.w	r0, #0
 8006420:	f04f 0100 	mov.w	r1, #0
 8006424:	da81      	bge.n	800632a <__ieee754_pow+0x3a>
 8006426:	e9dd 0300 	ldrd	r0, r3, [sp]
 800642a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800642e:	e77c      	b.n	800632a <__ieee754_pow+0x3a>
 8006430:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006434:	d106      	bne.n	8006444 <__ieee754_pow+0x154>
 8006436:	4632      	mov	r2, r6
 8006438:	463b      	mov	r3, r7
 800643a:	4630      	mov	r0, r6
 800643c:	4639      	mov	r1, r7
 800643e:	f7fa f8e3 	bl	8000608 <__aeabi_dmul>
 8006442:	e772      	b.n	800632a <__ieee754_pow+0x3a>
 8006444:	4a51      	ldr	r2, [pc, #324]	@ (800658c <__ieee754_pow+0x29c>)
 8006446:	4591      	cmp	r9, r2
 8006448:	d109      	bne.n	800645e <__ieee754_pow+0x16e>
 800644a:	2d00      	cmp	r5, #0
 800644c:	db07      	blt.n	800645e <__ieee754_pow+0x16e>
 800644e:	ec47 6b10 	vmov	d0, r6, r7
 8006452:	b011      	add	sp, #68	@ 0x44
 8006454:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006458:	f7ff be6e 	b.w	8006138 <__ieee754_sqrt>
 800645c:	2400      	movs	r4, #0
 800645e:	ec47 6b10 	vmov	d0, r6, r7
 8006462:	9302      	str	r3, [sp, #8]
 8006464:	f000 fc88 	bl	8006d78 <fabs>
 8006468:	9b02      	ldr	r3, [sp, #8]
 800646a:	ec51 0b10 	vmov	r0, r1, d0
 800646e:	bb53      	cbnz	r3, 80064c6 <__ieee754_pow+0x1d6>
 8006470:	4b44      	ldr	r3, [pc, #272]	@ (8006584 <__ieee754_pow+0x294>)
 8006472:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8006476:	429a      	cmp	r2, r3
 8006478:	d002      	beq.n	8006480 <__ieee754_pow+0x190>
 800647a:	f1b8 0f00 	cmp.w	r8, #0
 800647e:	d122      	bne.n	80064c6 <__ieee754_pow+0x1d6>
 8006480:	f1b9 0f00 	cmp.w	r9, #0
 8006484:	da05      	bge.n	8006492 <__ieee754_pow+0x1a2>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	2000      	movs	r0, #0
 800648c:	493d      	ldr	r1, [pc, #244]	@ (8006584 <__ieee754_pow+0x294>)
 800648e:	f7fa f9e5 	bl	800085c <__aeabi_ddiv>
 8006492:	2d00      	cmp	r5, #0
 8006494:	f6bf af49 	bge.w	800632a <__ieee754_pow+0x3a>
 8006498:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800649c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80064a0:	ea58 0804 	orrs.w	r8, r8, r4
 80064a4:	d108      	bne.n	80064b8 <__ieee754_pow+0x1c8>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	f7f9 fef3 	bl	8000298 <__aeabi_dsub>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	e794      	b.n	80063e2 <__ieee754_pow+0xf2>
 80064b8:	2c01      	cmp	r4, #1
 80064ba:	f47f af36 	bne.w	800632a <__ieee754_pow+0x3a>
 80064be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80064c2:	4619      	mov	r1, r3
 80064c4:	e731      	b.n	800632a <__ieee754_pow+0x3a>
 80064c6:	0feb      	lsrs	r3, r5, #31
 80064c8:	3b01      	subs	r3, #1
 80064ca:	ea53 0204 	orrs.w	r2, r3, r4
 80064ce:	d102      	bne.n	80064d6 <__ieee754_pow+0x1e6>
 80064d0:	4632      	mov	r2, r6
 80064d2:	463b      	mov	r3, r7
 80064d4:	e7e9      	b.n	80064aa <__ieee754_pow+0x1ba>
 80064d6:	3c01      	subs	r4, #1
 80064d8:	431c      	orrs	r4, r3
 80064da:	d016      	beq.n	800650a <__ieee754_pow+0x21a>
 80064dc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006568 <__ieee754_pow+0x278>
 80064e0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80064e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064e8:	f240 8112 	bls.w	8006710 <__ieee754_pow+0x420>
 80064ec:	4b28      	ldr	r3, [pc, #160]	@ (8006590 <__ieee754_pow+0x2a0>)
 80064ee:	459a      	cmp	sl, r3
 80064f0:	4b25      	ldr	r3, [pc, #148]	@ (8006588 <__ieee754_pow+0x298>)
 80064f2:	d916      	bls.n	8006522 <__ieee754_pow+0x232>
 80064f4:	4598      	cmp	r8, r3
 80064f6:	d80b      	bhi.n	8006510 <__ieee754_pow+0x220>
 80064f8:	f1b9 0f00 	cmp.w	r9, #0
 80064fc:	da0b      	bge.n	8006516 <__ieee754_pow+0x226>
 80064fe:	2000      	movs	r0, #0
 8006500:	b011      	add	sp, #68	@ 0x44
 8006502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f000 bcf3 	b.w	8006ef0 <__math_oflow>
 800650a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006570 <__ieee754_pow+0x280>
 800650e:	e7e7      	b.n	80064e0 <__ieee754_pow+0x1f0>
 8006510:	f1b9 0f00 	cmp.w	r9, #0
 8006514:	dcf3      	bgt.n	80064fe <__ieee754_pow+0x20e>
 8006516:	2000      	movs	r0, #0
 8006518:	b011      	add	sp, #68	@ 0x44
 800651a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651e:	f000 bcdf 	b.w	8006ee0 <__math_uflow>
 8006522:	4598      	cmp	r8, r3
 8006524:	d20c      	bcs.n	8006540 <__ieee754_pow+0x250>
 8006526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	2300      	movs	r3, #0
 800652e:	f7fa fadd 	bl	8000aec <__aeabi_dcmplt>
 8006532:	3800      	subs	r0, #0
 8006534:	bf18      	it	ne
 8006536:	2001      	movne	r0, #1
 8006538:	f1b9 0f00 	cmp.w	r9, #0
 800653c:	daec      	bge.n	8006518 <__ieee754_pow+0x228>
 800653e:	e7df      	b.n	8006500 <__ieee754_pow+0x210>
 8006540:	4b10      	ldr	r3, [pc, #64]	@ (8006584 <__ieee754_pow+0x294>)
 8006542:	4598      	cmp	r8, r3
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	d924      	bls.n	8006594 <__ieee754_pow+0x2a4>
 800654a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800654e:	2300      	movs	r3, #0
 8006550:	f7fa facc 	bl	8000aec <__aeabi_dcmplt>
 8006554:	3800      	subs	r0, #0
 8006556:	bf18      	it	ne
 8006558:	2001      	movne	r0, #1
 800655a:	f1b9 0f00 	cmp.w	r9, #0
 800655e:	dccf      	bgt.n	8006500 <__ieee754_pow+0x210>
 8006560:	e7da      	b.n	8006518 <__ieee754_pow+0x228>
 8006562:	bf00      	nop
 8006564:	f3af 8000 	nop.w
 8006568:	00000000 	.word	0x00000000
 800656c:	3ff00000 	.word	0x3ff00000
 8006570:	00000000 	.word	0x00000000
 8006574:	bff00000 	.word	0xbff00000
 8006578:	fff00000 	.word	0xfff00000
 800657c:	7ff00000 	.word	0x7ff00000
 8006580:	433fffff 	.word	0x433fffff
 8006584:	3ff00000 	.word	0x3ff00000
 8006588:	3fefffff 	.word	0x3fefffff
 800658c:	3fe00000 	.word	0x3fe00000
 8006590:	43f00000 	.word	0x43f00000
 8006594:	4b5a      	ldr	r3, [pc, #360]	@ (8006700 <__ieee754_pow+0x410>)
 8006596:	f7f9 fe7f 	bl	8000298 <__aeabi_dsub>
 800659a:	a351      	add	r3, pc, #324	@ (adr r3, 80066e0 <__ieee754_pow+0x3f0>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	4604      	mov	r4, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	f7fa f830 	bl	8000608 <__aeabi_dmul>
 80065a8:	a34f      	add	r3, pc, #316	@ (adr r3, 80066e8 <__ieee754_pow+0x3f8>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	4606      	mov	r6, r0
 80065b0:	460f      	mov	r7, r1
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7fa f827 	bl	8000608 <__aeabi_dmul>
 80065ba:	4b52      	ldr	r3, [pc, #328]	@ (8006704 <__ieee754_pow+0x414>)
 80065bc:	4682      	mov	sl, r0
 80065be:	468b      	mov	fp, r1
 80065c0:	2200      	movs	r2, #0
 80065c2:	4620      	mov	r0, r4
 80065c4:	4629      	mov	r1, r5
 80065c6:	f7fa f81f 	bl	8000608 <__aeabi_dmul>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	a148      	add	r1, pc, #288	@ (adr r1, 80066f0 <__ieee754_pow+0x400>)
 80065d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065d4:	f7f9 fe60 	bl	8000298 <__aeabi_dsub>
 80065d8:	4622      	mov	r2, r4
 80065da:	462b      	mov	r3, r5
 80065dc:	f7fa f814 	bl	8000608 <__aeabi_dmul>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	2000      	movs	r0, #0
 80065e6:	4948      	ldr	r1, [pc, #288]	@ (8006708 <__ieee754_pow+0x418>)
 80065e8:	f7f9 fe56 	bl	8000298 <__aeabi_dsub>
 80065ec:	4622      	mov	r2, r4
 80065ee:	4680      	mov	r8, r0
 80065f0:	4689      	mov	r9, r1
 80065f2:	462b      	mov	r3, r5
 80065f4:	4620      	mov	r0, r4
 80065f6:	4629      	mov	r1, r5
 80065f8:	f7fa f806 	bl	8000608 <__aeabi_dmul>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4640      	mov	r0, r8
 8006602:	4649      	mov	r1, r9
 8006604:	f7fa f800 	bl	8000608 <__aeabi_dmul>
 8006608:	a33b      	add	r3, pc, #236	@ (adr r3, 80066f8 <__ieee754_pow+0x408>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f7f9 fffb 	bl	8000608 <__aeabi_dmul>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4650      	mov	r0, sl
 8006618:	4659      	mov	r1, fp
 800661a:	f7f9 fe3d 	bl	8000298 <__aeabi_dsub>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4680      	mov	r8, r0
 8006624:	4689      	mov	r9, r1
 8006626:	4630      	mov	r0, r6
 8006628:	4639      	mov	r1, r7
 800662a:	f7f9 fe37 	bl	800029c <__adddf3>
 800662e:	2400      	movs	r4, #0
 8006630:	4632      	mov	r2, r6
 8006632:	463b      	mov	r3, r7
 8006634:	4620      	mov	r0, r4
 8006636:	460d      	mov	r5, r1
 8006638:	f7f9 fe2e 	bl	8000298 <__aeabi_dsub>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7f9 fe28 	bl	8000298 <__aeabi_dsub>
 8006648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800664c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006650:	2300      	movs	r3, #0
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006658:	4606      	mov	r6, r0
 800665a:	460f      	mov	r7, r1
 800665c:	4652      	mov	r2, sl
 800665e:	465b      	mov	r3, fp
 8006660:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006664:	f7f9 fe18 	bl	8000298 <__aeabi_dsub>
 8006668:	4622      	mov	r2, r4
 800666a:	462b      	mov	r3, r5
 800666c:	f7f9 ffcc 	bl	8000608 <__aeabi_dmul>
 8006670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006674:	4680      	mov	r8, r0
 8006676:	4689      	mov	r9, r1
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7f9 ffc4 	bl	8000608 <__aeabi_dmul>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4640      	mov	r0, r8
 8006686:	4649      	mov	r1, r9
 8006688:	f7f9 fe08 	bl	800029c <__adddf3>
 800668c:	4652      	mov	r2, sl
 800668e:	465b      	mov	r3, fp
 8006690:	4606      	mov	r6, r0
 8006692:	460f      	mov	r7, r1
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f7f9 ffb6 	bl	8000608 <__aeabi_dmul>
 800669c:	460b      	mov	r3, r1
 800669e:	4602      	mov	r2, r0
 80066a0:	4680      	mov	r8, r0
 80066a2:	4689      	mov	r9, r1
 80066a4:	4630      	mov	r0, r6
 80066a6:	4639      	mov	r1, r7
 80066a8:	f7f9 fdf8 	bl	800029c <__adddf3>
 80066ac:	4b17      	ldr	r3, [pc, #92]	@ (800670c <__ieee754_pow+0x41c>)
 80066ae:	4299      	cmp	r1, r3
 80066b0:	4604      	mov	r4, r0
 80066b2:	460d      	mov	r5, r1
 80066b4:	468a      	mov	sl, r1
 80066b6:	468b      	mov	fp, r1
 80066b8:	f340 82ef 	ble.w	8006c9a <__ieee754_pow+0x9aa>
 80066bc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80066c0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80066c4:	4303      	orrs	r3, r0
 80066c6:	f000 81e8 	beq.w	8006a9a <__ieee754_pow+0x7aa>
 80066ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ce:	2200      	movs	r2, #0
 80066d0:	2300      	movs	r3, #0
 80066d2:	f7fa fa0b 	bl	8000aec <__aeabi_dcmplt>
 80066d6:	3800      	subs	r0, #0
 80066d8:	bf18      	it	ne
 80066da:	2001      	movne	r0, #1
 80066dc:	e710      	b.n	8006500 <__ieee754_pow+0x210>
 80066de:	bf00      	nop
 80066e0:	60000000 	.word	0x60000000
 80066e4:	3ff71547 	.word	0x3ff71547
 80066e8:	f85ddf44 	.word	0xf85ddf44
 80066ec:	3e54ae0b 	.word	0x3e54ae0b
 80066f0:	55555555 	.word	0x55555555
 80066f4:	3fd55555 	.word	0x3fd55555
 80066f8:	652b82fe 	.word	0x652b82fe
 80066fc:	3ff71547 	.word	0x3ff71547
 8006700:	3ff00000 	.word	0x3ff00000
 8006704:	3fd00000 	.word	0x3fd00000
 8006708:	3fe00000 	.word	0x3fe00000
 800670c:	408fffff 	.word	0x408fffff
 8006710:	4bd5      	ldr	r3, [pc, #852]	@ (8006a68 <__ieee754_pow+0x778>)
 8006712:	402b      	ands	r3, r5
 8006714:	2200      	movs	r2, #0
 8006716:	b92b      	cbnz	r3, 8006724 <__ieee754_pow+0x434>
 8006718:	4bd4      	ldr	r3, [pc, #848]	@ (8006a6c <__ieee754_pow+0x77c>)
 800671a:	f7f9 ff75 	bl	8000608 <__aeabi_dmul>
 800671e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006722:	468b      	mov	fp, r1
 8006724:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006728:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800672c:	4413      	add	r3, r2
 800672e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006730:	4bcf      	ldr	r3, [pc, #828]	@ (8006a70 <__ieee754_pow+0x780>)
 8006732:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006736:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800673a:	459b      	cmp	fp, r3
 800673c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006740:	dd08      	ble.n	8006754 <__ieee754_pow+0x464>
 8006742:	4bcc      	ldr	r3, [pc, #816]	@ (8006a74 <__ieee754_pow+0x784>)
 8006744:	459b      	cmp	fp, r3
 8006746:	f340 81a5 	ble.w	8006a94 <__ieee754_pow+0x7a4>
 800674a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800674c:	3301      	adds	r3, #1
 800674e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006750:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006754:	f04f 0a00 	mov.w	sl, #0
 8006758:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800675c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800675e:	4bc6      	ldr	r3, [pc, #792]	@ (8006a78 <__ieee754_pow+0x788>)
 8006760:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006764:	ed93 7b00 	vldr	d7, [r3]
 8006768:	4629      	mov	r1, r5
 800676a:	ec53 2b17 	vmov	r2, r3, d7
 800676e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006772:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006776:	f7f9 fd8f 	bl	8000298 <__aeabi_dsub>
 800677a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006786:	f7f9 fd89 	bl	800029c <__adddf3>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	2000      	movs	r0, #0
 8006790:	49ba      	ldr	r1, [pc, #744]	@ (8006a7c <__ieee754_pow+0x78c>)
 8006792:	f7fa f863 	bl	800085c <__aeabi_ddiv>
 8006796:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4630      	mov	r0, r6
 80067a0:	4639      	mov	r1, r7
 80067a2:	f7f9 ff31 	bl	8000608 <__aeabi_dmul>
 80067a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067aa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80067ae:	106d      	asrs	r5, r5, #1
 80067b0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80067b4:	f04f 0b00 	mov.w	fp, #0
 80067b8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80067bc:	4661      	mov	r1, ip
 80067be:	2200      	movs	r2, #0
 80067c0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80067c4:	4658      	mov	r0, fp
 80067c6:	46e1      	mov	r9, ip
 80067c8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80067cc:	4614      	mov	r4, r2
 80067ce:	461d      	mov	r5, r3
 80067d0:	f7f9 ff1a 	bl	8000608 <__aeabi_dmul>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7f9 fd5c 	bl	8000298 <__aeabi_dsub>
 80067e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067e4:	4606      	mov	r6, r0
 80067e6:	460f      	mov	r7, r1
 80067e8:	4620      	mov	r0, r4
 80067ea:	4629      	mov	r1, r5
 80067ec:	f7f9 fd54 	bl	8000298 <__aeabi_dsub>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067f8:	f7f9 fd4e 	bl	8000298 <__aeabi_dsub>
 80067fc:	465a      	mov	r2, fp
 80067fe:	464b      	mov	r3, r9
 8006800:	f7f9 ff02 	bl	8000608 <__aeabi_dmul>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4630      	mov	r0, r6
 800680a:	4639      	mov	r1, r7
 800680c:	f7f9 fd44 	bl	8000298 <__aeabi_dsub>
 8006810:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006814:	f7f9 fef8 	bl	8000608 <__aeabi_dmul>
 8006818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800681c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006820:	4610      	mov	r0, r2
 8006822:	4619      	mov	r1, r3
 8006824:	f7f9 fef0 	bl	8000608 <__aeabi_dmul>
 8006828:	a37d      	add	r3, pc, #500	@ (adr r3, 8006a20 <__ieee754_pow+0x730>)
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	4604      	mov	r4, r0
 8006830:	460d      	mov	r5, r1
 8006832:	f7f9 fee9 	bl	8000608 <__aeabi_dmul>
 8006836:	a37c      	add	r3, pc, #496	@ (adr r3, 8006a28 <__ieee754_pow+0x738>)
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f7f9 fd2e 	bl	800029c <__adddf3>
 8006840:	4622      	mov	r2, r4
 8006842:	462b      	mov	r3, r5
 8006844:	f7f9 fee0 	bl	8000608 <__aeabi_dmul>
 8006848:	a379      	add	r3, pc, #484	@ (adr r3, 8006a30 <__ieee754_pow+0x740>)
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f7f9 fd25 	bl	800029c <__adddf3>
 8006852:	4622      	mov	r2, r4
 8006854:	462b      	mov	r3, r5
 8006856:	f7f9 fed7 	bl	8000608 <__aeabi_dmul>
 800685a:	a377      	add	r3, pc, #476	@ (adr r3, 8006a38 <__ieee754_pow+0x748>)
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f7f9 fd1c 	bl	800029c <__adddf3>
 8006864:	4622      	mov	r2, r4
 8006866:	462b      	mov	r3, r5
 8006868:	f7f9 fece 	bl	8000608 <__aeabi_dmul>
 800686c:	a374      	add	r3, pc, #464	@ (adr r3, 8006a40 <__ieee754_pow+0x750>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fd13 	bl	800029c <__adddf3>
 8006876:	4622      	mov	r2, r4
 8006878:	462b      	mov	r3, r5
 800687a:	f7f9 fec5 	bl	8000608 <__aeabi_dmul>
 800687e:	a372      	add	r3, pc, #456	@ (adr r3, 8006a48 <__ieee754_pow+0x758>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f7f9 fd0a 	bl	800029c <__adddf3>
 8006888:	4622      	mov	r2, r4
 800688a:	4606      	mov	r6, r0
 800688c:	460f      	mov	r7, r1
 800688e:	462b      	mov	r3, r5
 8006890:	4620      	mov	r0, r4
 8006892:	4629      	mov	r1, r5
 8006894:	f7f9 feb8 	bl	8000608 <__aeabi_dmul>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4630      	mov	r0, r6
 800689e:	4639      	mov	r1, r7
 80068a0:	f7f9 feb2 	bl	8000608 <__aeabi_dmul>
 80068a4:	465a      	mov	r2, fp
 80068a6:	4604      	mov	r4, r0
 80068a8:	460d      	mov	r5, r1
 80068aa:	464b      	mov	r3, r9
 80068ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b0:	f7f9 fcf4 	bl	800029c <__adddf3>
 80068b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068b8:	f7f9 fea6 	bl	8000608 <__aeabi_dmul>
 80068bc:	4622      	mov	r2, r4
 80068be:	462b      	mov	r3, r5
 80068c0:	f7f9 fcec 	bl	800029c <__adddf3>
 80068c4:	465a      	mov	r2, fp
 80068c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068ca:	464b      	mov	r3, r9
 80068cc:	4658      	mov	r0, fp
 80068ce:	4649      	mov	r1, r9
 80068d0:	f7f9 fe9a 	bl	8000608 <__aeabi_dmul>
 80068d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006a80 <__ieee754_pow+0x790>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	4606      	mov	r6, r0
 80068da:	460f      	mov	r7, r1
 80068dc:	f7f9 fcde 	bl	800029c <__adddf3>
 80068e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068e4:	f7f9 fcda 	bl	800029c <__adddf3>
 80068e8:	46d8      	mov	r8, fp
 80068ea:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80068ee:	460d      	mov	r5, r1
 80068f0:	465a      	mov	r2, fp
 80068f2:	460b      	mov	r3, r1
 80068f4:	4640      	mov	r0, r8
 80068f6:	4649      	mov	r1, r9
 80068f8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80068fc:	f7f9 fe84 	bl	8000608 <__aeabi_dmul>
 8006900:	465c      	mov	r4, fp
 8006902:	4680      	mov	r8, r0
 8006904:	4689      	mov	r9, r1
 8006906:	4b5e      	ldr	r3, [pc, #376]	@ (8006a80 <__ieee754_pow+0x790>)
 8006908:	2200      	movs	r2, #0
 800690a:	4620      	mov	r0, r4
 800690c:	4629      	mov	r1, r5
 800690e:	f7f9 fcc3 	bl	8000298 <__aeabi_dsub>
 8006912:	4632      	mov	r2, r6
 8006914:	463b      	mov	r3, r7
 8006916:	f7f9 fcbf 	bl	8000298 <__aeabi_dsub>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006922:	f7f9 fcb9 	bl	8000298 <__aeabi_dsub>
 8006926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800692a:	f7f9 fe6d 	bl	8000608 <__aeabi_dmul>
 800692e:	4622      	mov	r2, r4
 8006930:	4606      	mov	r6, r0
 8006932:	460f      	mov	r7, r1
 8006934:	462b      	mov	r3, r5
 8006936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800693a:	f7f9 fe65 	bl	8000608 <__aeabi_dmul>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4630      	mov	r0, r6
 8006944:	4639      	mov	r1, r7
 8006946:	f7f9 fca9 	bl	800029c <__adddf3>
 800694a:	4606      	mov	r6, r0
 800694c:	460f      	mov	r7, r1
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4640      	mov	r0, r8
 8006954:	4649      	mov	r1, r9
 8006956:	f7f9 fca1 	bl	800029c <__adddf3>
 800695a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800695e:	a33c      	add	r3, pc, #240	@ (adr r3, 8006a50 <__ieee754_pow+0x760>)
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	4658      	mov	r0, fp
 8006966:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800696a:	460d      	mov	r5, r1
 800696c:	f7f9 fe4c 	bl	8000608 <__aeabi_dmul>
 8006970:	465c      	mov	r4, fp
 8006972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006976:	4642      	mov	r2, r8
 8006978:	464b      	mov	r3, r9
 800697a:	4620      	mov	r0, r4
 800697c:	4629      	mov	r1, r5
 800697e:	f7f9 fc8b 	bl	8000298 <__aeabi_dsub>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4630      	mov	r0, r6
 8006988:	4639      	mov	r1, r7
 800698a:	f7f9 fc85 	bl	8000298 <__aeabi_dsub>
 800698e:	a332      	add	r3, pc, #200	@ (adr r3, 8006a58 <__ieee754_pow+0x768>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f7f9 fe38 	bl	8000608 <__aeabi_dmul>
 8006998:	a331      	add	r3, pc, #196	@ (adr r3, 8006a60 <__ieee754_pow+0x770>)
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	4606      	mov	r6, r0
 80069a0:	460f      	mov	r7, r1
 80069a2:	4620      	mov	r0, r4
 80069a4:	4629      	mov	r1, r5
 80069a6:	f7f9 fe2f 	bl	8000608 <__aeabi_dmul>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4630      	mov	r0, r6
 80069b0:	4639      	mov	r1, r7
 80069b2:	f7f9 fc73 	bl	800029c <__adddf3>
 80069b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80069b8:	4b32      	ldr	r3, [pc, #200]	@ (8006a84 <__ieee754_pow+0x794>)
 80069ba:	4413      	add	r3, r2
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fc6c 	bl	800029c <__adddf3>
 80069c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80069ca:	f7f9 fdb3 	bl	8000534 <__aeabi_i2d>
 80069ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80069d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006a88 <__ieee754_pow+0x798>)
 80069d2:	4413      	add	r3, r2
 80069d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069d8:	4606      	mov	r6, r0
 80069da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069de:	460f      	mov	r7, r1
 80069e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069e4:	f7f9 fc5a 	bl	800029c <__adddf3>
 80069e8:	4642      	mov	r2, r8
 80069ea:	464b      	mov	r3, r9
 80069ec:	f7f9 fc56 	bl	800029c <__adddf3>
 80069f0:	4632      	mov	r2, r6
 80069f2:	463b      	mov	r3, r7
 80069f4:	f7f9 fc52 	bl	800029c <__adddf3>
 80069f8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80069fc:	4632      	mov	r2, r6
 80069fe:	463b      	mov	r3, r7
 8006a00:	4658      	mov	r0, fp
 8006a02:	460d      	mov	r5, r1
 8006a04:	f7f9 fc48 	bl	8000298 <__aeabi_dsub>
 8006a08:	4642      	mov	r2, r8
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	f7f9 fc44 	bl	8000298 <__aeabi_dsub>
 8006a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a14:	f7f9 fc40 	bl	8000298 <__aeabi_dsub>
 8006a18:	465c      	mov	r4, fp
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	e036      	b.n	8006a8c <__ieee754_pow+0x79c>
 8006a1e:	bf00      	nop
 8006a20:	4a454eef 	.word	0x4a454eef
 8006a24:	3fca7e28 	.word	0x3fca7e28
 8006a28:	93c9db65 	.word	0x93c9db65
 8006a2c:	3fcd864a 	.word	0x3fcd864a
 8006a30:	a91d4101 	.word	0xa91d4101
 8006a34:	3fd17460 	.word	0x3fd17460
 8006a38:	518f264d 	.word	0x518f264d
 8006a3c:	3fd55555 	.word	0x3fd55555
 8006a40:	db6fabff 	.word	0xdb6fabff
 8006a44:	3fdb6db6 	.word	0x3fdb6db6
 8006a48:	33333303 	.word	0x33333303
 8006a4c:	3fe33333 	.word	0x3fe33333
 8006a50:	e0000000 	.word	0xe0000000
 8006a54:	3feec709 	.word	0x3feec709
 8006a58:	dc3a03fd 	.word	0xdc3a03fd
 8006a5c:	3feec709 	.word	0x3feec709
 8006a60:	145b01f5 	.word	0x145b01f5
 8006a64:	be3e2fe0 	.word	0xbe3e2fe0
 8006a68:	7ff00000 	.word	0x7ff00000
 8006a6c:	43400000 	.word	0x43400000
 8006a70:	0003988e 	.word	0x0003988e
 8006a74:	000bb679 	.word	0x000bb679
 8006a78:	080070d8 	.word	0x080070d8
 8006a7c:	3ff00000 	.word	0x3ff00000
 8006a80:	40080000 	.word	0x40080000
 8006a84:	080070b8 	.word	0x080070b8
 8006a88:	080070c8 	.word	0x080070c8
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a92:	e5d7      	b.n	8006644 <__ieee754_pow+0x354>
 8006a94:	f04f 0a01 	mov.w	sl, #1
 8006a98:	e65e      	b.n	8006758 <__ieee754_pow+0x468>
 8006a9a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8006d6c <__ieee754_pow+0xa7c>)
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	f7f9 fbfa 	bl	800029c <__adddf3>
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	e9cd 0100 	strd	r0, r1, [sp]
 8006aae:	464b      	mov	r3, r9
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	f7f9 fbf0 	bl	8000298 <__aeabi_dsub>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ac0:	f7fa f832 	bl	8000b28 <__aeabi_dcmpgt>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	f47f ae00 	bne.w	80066ca <__ieee754_pow+0x3da>
 8006aca:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006ace:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006ad2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006ad6:	fa43 fa0a 	asr.w	sl, r3, sl
 8006ada:	44da      	add	sl, fp
 8006adc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006ae0:	489d      	ldr	r0, [pc, #628]	@ (8006d58 <__ieee754_pow+0xa68>)
 8006ae2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006ae6:	4108      	asrs	r0, r1
 8006ae8:	ea00 030a 	and.w	r3, r0, sl
 8006aec:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006af0:	f1c1 0114 	rsb	r1, r1, #20
 8006af4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006af8:	fa4a fa01 	asr.w	sl, sl, r1
 8006afc:	f1bb 0f00 	cmp.w	fp, #0
 8006b00:	4640      	mov	r0, r8
 8006b02:	4649      	mov	r1, r9
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	bfb8      	it	lt
 8006b0a:	f1ca 0a00 	rsblt	sl, sl, #0
 8006b0e:	f7f9 fbc3 	bl	8000298 <__aeabi_dsub>
 8006b12:	4680      	mov	r8, r0
 8006b14:	4689      	mov	r9, r1
 8006b16:	4632      	mov	r2, r6
 8006b18:	463b      	mov	r3, r7
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	f7f9 fbbd 	bl	800029c <__adddf3>
 8006b22:	2400      	movs	r4, #0
 8006b24:	a37c      	add	r3, pc, #496	@ (adr r3, 8006d18 <__ieee754_pow+0xa28>)
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	f7f9 fd6b 	bl	8000608 <__aeabi_dmul>
 8006b32:	4642      	mov	r2, r8
 8006b34:	e9cd 0100 	strd	r0, r1, [sp]
 8006b38:	464b      	mov	r3, r9
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fbab 	bl	8000298 <__aeabi_dsub>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4630      	mov	r0, r6
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f7f9 fba5 	bl	8000298 <__aeabi_dsub>
 8006b4e:	a374      	add	r3, pc, #464	@ (adr r3, 8006d20 <__ieee754_pow+0xa30>)
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fd58 	bl	8000608 <__aeabi_dmul>
 8006b58:	a373      	add	r3, pc, #460	@ (adr r3, 8006d28 <__ieee754_pow+0xa38>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	4680      	mov	r8, r0
 8006b60:	4689      	mov	r9, r1
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	f7f9 fd4f 	bl	8000608 <__aeabi_dmul>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4640      	mov	r0, r8
 8006b70:	4649      	mov	r1, r9
 8006b72:	f7f9 fb93 	bl	800029c <__adddf3>
 8006b76:	4604      	mov	r4, r0
 8006b78:	460d      	mov	r5, r1
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b82:	f7f9 fb8b 	bl	800029c <__adddf3>
 8006b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	4689      	mov	r9, r1
 8006b8e:	f7f9 fb83 	bl	8000298 <__aeabi_dsub>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 fb7d 	bl	8000298 <__aeabi_dsub>
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	460f      	mov	r7, r1
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	4649      	mov	r1, r9
 8006baa:	f7f9 fd2d 	bl	8000608 <__aeabi_dmul>
 8006bae:	a360      	add	r3, pc, #384	@ (adr r3, 8006d30 <__ieee754_pow+0xa40>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	f7f9 fd26 	bl	8000608 <__aeabi_dmul>
 8006bbc:	a35e      	add	r3, pc, #376	@ (adr r3, 8006d38 <__ieee754_pow+0xa48>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f7f9 fb69 	bl	8000298 <__aeabi_dsub>
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	462b      	mov	r3, r5
 8006bca:	f7f9 fd1d 	bl	8000608 <__aeabi_dmul>
 8006bce:	a35c      	add	r3, pc, #368	@ (adr r3, 8006d40 <__ieee754_pow+0xa50>)
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f7f9 fb62 	bl	800029c <__adddf3>
 8006bd8:	4622      	mov	r2, r4
 8006bda:	462b      	mov	r3, r5
 8006bdc:	f7f9 fd14 	bl	8000608 <__aeabi_dmul>
 8006be0:	a359      	add	r3, pc, #356	@ (adr r3, 8006d48 <__ieee754_pow+0xa58>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f7f9 fb57 	bl	8000298 <__aeabi_dsub>
 8006bea:	4622      	mov	r2, r4
 8006bec:	462b      	mov	r3, r5
 8006bee:	f7f9 fd0b 	bl	8000608 <__aeabi_dmul>
 8006bf2:	a357      	add	r3, pc, #348	@ (adr r3, 8006d50 <__ieee754_pow+0xa60>)
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f7f9 fb50 	bl	800029c <__adddf3>
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	462b      	mov	r3, r5
 8006c00:	f7f9 fd02 	bl	8000608 <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7f9 fb44 	bl	8000298 <__aeabi_dsub>
 8006c10:	4604      	mov	r4, r0
 8006c12:	460d      	mov	r5, r1
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	f7f9 fcf4 	bl	8000608 <__aeabi_dmul>
 8006c20:	2200      	movs	r2, #0
 8006c22:	e9cd 0100 	strd	r0, r1, [sp]
 8006c26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7f9 fb33 	bl	8000298 <__aeabi_dsub>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c3a:	f7f9 fe0f 	bl	800085c <__aeabi_ddiv>
 8006c3e:	4632      	mov	r2, r6
 8006c40:	4604      	mov	r4, r0
 8006c42:	460d      	mov	r5, r1
 8006c44:	463b      	mov	r3, r7
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f7f9 fcdd 	bl	8000608 <__aeabi_dmul>
 8006c4e:	4632      	mov	r2, r6
 8006c50:	463b      	mov	r3, r7
 8006c52:	f7f9 fb23 	bl	800029c <__adddf3>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7f9 fb1b 	bl	8000298 <__aeabi_dsub>
 8006c62:	4642      	mov	r2, r8
 8006c64:	464b      	mov	r3, r9
 8006c66:	f7f9 fb17 	bl	8000298 <__aeabi_dsub>
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	493b      	ldr	r1, [pc, #236]	@ (8006d5c <__ieee754_pow+0xa6c>)
 8006c70:	2000      	movs	r0, #0
 8006c72:	f7f9 fb11 	bl	8000298 <__aeabi_dsub>
 8006c76:	ec41 0b10 	vmov	d0, r0, r1
 8006c7a:	ee10 3a90 	vmov	r3, s1
 8006c7e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c86:	da30      	bge.n	8006cea <__ieee754_pow+0x9fa>
 8006c88:	4650      	mov	r0, sl
 8006c8a:	f000 f87d 	bl	8006d88 <scalbn>
 8006c8e:	ec51 0b10 	vmov	r0, r1, d0
 8006c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c96:	f7ff bbd2 	b.w	800643e <__ieee754_pow+0x14e>
 8006c9a:	4c31      	ldr	r4, [pc, #196]	@ (8006d60 <__ieee754_pow+0xa70>)
 8006c9c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	d91a      	bls.n	8006cda <__ieee754_pow+0x9ea>
 8006ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8006d64 <__ieee754_pow+0xa74>)
 8006ca6:	440b      	add	r3, r1
 8006ca8:	4303      	orrs	r3, r0
 8006caa:	d009      	beq.n	8006cc0 <__ieee754_pow+0x9d0>
 8006cac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f7f9 ff1a 	bl	8000aec <__aeabi_dcmplt>
 8006cb8:	3800      	subs	r0, #0
 8006cba:	bf18      	it	ne
 8006cbc:	2001      	movne	r0, #1
 8006cbe:	e42b      	b.n	8006518 <__ieee754_pow+0x228>
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	f7f9 fae8 	bl	8000298 <__aeabi_dsub>
 8006cc8:	4632      	mov	r2, r6
 8006cca:	463b      	mov	r3, r7
 8006ccc:	f7f9 ff22 	bl	8000b14 <__aeabi_dcmpge>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d1eb      	bne.n	8006cac <__ieee754_pow+0x9bc>
 8006cd4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8006d74 <__ieee754_pow+0xa84>
 8006cd8:	e6f7      	b.n	8006aca <__ieee754_pow+0x7da>
 8006cda:	469a      	mov	sl, r3
 8006cdc:	4b22      	ldr	r3, [pc, #136]	@ (8006d68 <__ieee754_pow+0xa78>)
 8006cde:	459a      	cmp	sl, r3
 8006ce0:	f63f aef3 	bhi.w	8006aca <__ieee754_pow+0x7da>
 8006ce4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006ce8:	e715      	b.n	8006b16 <__ieee754_pow+0x826>
 8006cea:	ec51 0b10 	vmov	r0, r1, d0
 8006cee:	4619      	mov	r1, r3
 8006cf0:	e7cf      	b.n	8006c92 <__ieee754_pow+0x9a2>
 8006cf2:	491a      	ldr	r1, [pc, #104]	@ (8006d5c <__ieee754_pow+0xa6c>)
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f7ff bb18 	b.w	800632a <__ieee754_pow+0x3a>
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	f7ff bb14 	b.w	800632a <__ieee754_pow+0x3a>
 8006d02:	4630      	mov	r0, r6
 8006d04:	4639      	mov	r1, r7
 8006d06:	f7ff bb10 	b.w	800632a <__ieee754_pow+0x3a>
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	f7ff bb5e 	b.w	80063cc <__ieee754_pow+0xdc>
 8006d10:	2400      	movs	r4, #0
 8006d12:	f7ff bb49 	b.w	80063a8 <__ieee754_pow+0xb8>
 8006d16:	bf00      	nop
 8006d18:	00000000 	.word	0x00000000
 8006d1c:	3fe62e43 	.word	0x3fe62e43
 8006d20:	fefa39ef 	.word	0xfefa39ef
 8006d24:	3fe62e42 	.word	0x3fe62e42
 8006d28:	0ca86c39 	.word	0x0ca86c39
 8006d2c:	be205c61 	.word	0xbe205c61
 8006d30:	72bea4d0 	.word	0x72bea4d0
 8006d34:	3e663769 	.word	0x3e663769
 8006d38:	c5d26bf1 	.word	0xc5d26bf1
 8006d3c:	3ebbbd41 	.word	0x3ebbbd41
 8006d40:	af25de2c 	.word	0xaf25de2c
 8006d44:	3f11566a 	.word	0x3f11566a
 8006d48:	16bebd93 	.word	0x16bebd93
 8006d4c:	3f66c16c 	.word	0x3f66c16c
 8006d50:	5555553e 	.word	0x5555553e
 8006d54:	3fc55555 	.word	0x3fc55555
 8006d58:	fff00000 	.word	0xfff00000
 8006d5c:	3ff00000 	.word	0x3ff00000
 8006d60:	4090cbff 	.word	0x4090cbff
 8006d64:	3f6f3400 	.word	0x3f6f3400
 8006d68:	3fe00000 	.word	0x3fe00000
 8006d6c:	652b82fe 	.word	0x652b82fe
 8006d70:	3c971547 	.word	0x3c971547
 8006d74:	4090cc00 	.word	0x4090cc00

08006d78 <fabs>:
 8006d78:	ec51 0b10 	vmov	r0, r1, d0
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006d82:	ec43 2b10 	vmov	d0, r2, r3
 8006d86:	4770      	bx	lr

08006d88 <scalbn>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	ec55 4b10 	vmov	r4, r5, d0
 8006d8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006d92:	4606      	mov	r6, r0
 8006d94:	462b      	mov	r3, r5
 8006d96:	b991      	cbnz	r1, 8006dbe <scalbn+0x36>
 8006d98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006d9c:	4323      	orrs	r3, r4
 8006d9e:	d03d      	beq.n	8006e1c <scalbn+0x94>
 8006da0:	4b35      	ldr	r3, [pc, #212]	@ (8006e78 <scalbn+0xf0>)
 8006da2:	4620      	mov	r0, r4
 8006da4:	4629      	mov	r1, r5
 8006da6:	2200      	movs	r2, #0
 8006da8:	f7f9 fc2e 	bl	8000608 <__aeabi_dmul>
 8006dac:	4b33      	ldr	r3, [pc, #204]	@ (8006e7c <scalbn+0xf4>)
 8006dae:	429e      	cmp	r6, r3
 8006db0:	4604      	mov	r4, r0
 8006db2:	460d      	mov	r5, r1
 8006db4:	da0f      	bge.n	8006dd6 <scalbn+0x4e>
 8006db6:	a328      	add	r3, pc, #160	@ (adr r3, 8006e58 <scalbn+0xd0>)
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	e01e      	b.n	8006dfc <scalbn+0x74>
 8006dbe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006dc2:	4291      	cmp	r1, r2
 8006dc4:	d10b      	bne.n	8006dde <scalbn+0x56>
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	4620      	mov	r0, r4
 8006dca:	4629      	mov	r1, r5
 8006dcc:	f7f9 fa66 	bl	800029c <__adddf3>
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	460d      	mov	r5, r1
 8006dd4:	e022      	b.n	8006e1c <scalbn+0x94>
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006ddc:	3936      	subs	r1, #54	@ 0x36
 8006dde:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006de2:	4296      	cmp	r6, r2
 8006de4:	dd0d      	ble.n	8006e02 <scalbn+0x7a>
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006e60 <scalbn+0xd8>)
 8006dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dee:	da02      	bge.n	8006df6 <scalbn+0x6e>
 8006df0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006e68 <scalbn+0xe0>)
 8006df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006df6:	a31a      	add	r3, pc, #104	@ (adr r3, 8006e60 <scalbn+0xd8>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 fc04 	bl	8000608 <__aeabi_dmul>
 8006e00:	e7e6      	b.n	8006dd0 <scalbn+0x48>
 8006e02:	1872      	adds	r2, r6, r1
 8006e04:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006e08:	428a      	cmp	r2, r1
 8006e0a:	dcec      	bgt.n	8006de6 <scalbn+0x5e>
 8006e0c:	2a00      	cmp	r2, #0
 8006e0e:	dd08      	ble.n	8006e22 <scalbn+0x9a>
 8006e10:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006e14:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006e18:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e1c:	ec45 4b10 	vmov	d0, r4, r5
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
 8006e22:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006e26:	da08      	bge.n	8006e3a <scalbn+0xb2>
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	a10b      	add	r1, pc, #44	@ (adr r1, 8006e58 <scalbn+0xd0>)
 8006e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e30:	dac1      	bge.n	8006db6 <scalbn+0x2e>
 8006e32:	a10f      	add	r1, pc, #60	@ (adr r1, 8006e70 <scalbn+0xe8>)
 8006e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e38:	e7bd      	b.n	8006db6 <scalbn+0x2e>
 8006e3a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006e3e:	3236      	adds	r2, #54	@ 0x36
 8006e40:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006e44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e48:	4620      	mov	r0, r4
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e80 <scalbn+0xf8>)
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	2200      	movs	r2, #0
 8006e50:	e7d4      	b.n	8006dfc <scalbn+0x74>
 8006e52:	bf00      	nop
 8006e54:	f3af 8000 	nop.w
 8006e58:	c2f8f359 	.word	0xc2f8f359
 8006e5c:	01a56e1f 	.word	0x01a56e1f
 8006e60:	8800759c 	.word	0x8800759c
 8006e64:	7e37e43c 	.word	0x7e37e43c
 8006e68:	8800759c 	.word	0x8800759c
 8006e6c:	fe37e43c 	.word	0xfe37e43c
 8006e70:	c2f8f359 	.word	0xc2f8f359
 8006e74:	81a56e1f 	.word	0x81a56e1f
 8006e78:	43500000 	.word	0x43500000
 8006e7c:	ffff3cb0 	.word	0xffff3cb0
 8006e80:	3c900000 	.word	0x3c900000

08006e84 <with_errno>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	ed2d 8b02 	vpush	{d8}
 8006e8a:	eeb0 8a40 	vmov.f32	s16, s0
 8006e8e:	eef0 8a60 	vmov.f32	s17, s1
 8006e92:	4604      	mov	r4, r0
 8006e94:	f7fe fb72 	bl	800557c <__errno>
 8006e98:	eeb0 0a48 	vmov.f32	s0, s16
 8006e9c:	eef0 0a68 	vmov.f32	s1, s17
 8006ea0:	ecbd 8b02 	vpop	{d8}
 8006ea4:	6004      	str	r4, [r0, #0]
 8006ea6:	bd10      	pop	{r4, pc}

08006ea8 <xflow>:
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	b507      	push	{r0, r1, r2, lr}
 8006eac:	ec51 0b10 	vmov	r0, r1, d0
 8006eb0:	b183      	cbz	r3, 8006ed4 <xflow+0x2c>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006eb8:	e9cd 2300 	strd	r2, r3, [sp]
 8006ebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ec0:	f7f9 fba2 	bl	8000608 <__aeabi_dmul>
 8006ec4:	ec41 0b10 	vmov	d0, r0, r1
 8006ec8:	2022      	movs	r0, #34	@ 0x22
 8006eca:	b003      	add	sp, #12
 8006ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed0:	f7ff bfd8 	b.w	8006e84 <with_errno>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	e7ee      	b.n	8006eb8 <xflow+0x10>
 8006eda:	0000      	movs	r0, r0
 8006edc:	0000      	movs	r0, r0
	...

08006ee0 <__math_uflow>:
 8006ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006ee8 <__math_uflow+0x8>
 8006ee4:	f7ff bfe0 	b.w	8006ea8 <xflow>
 8006ee8:	00000000 	.word	0x00000000
 8006eec:	10000000 	.word	0x10000000

08006ef0 <__math_oflow>:
 8006ef0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006ef8 <__math_oflow+0x8>
 8006ef4:	f7ff bfd8 	b.w	8006ea8 <xflow>
 8006ef8:	00000000 	.word	0x00000000
 8006efc:	70000000 	.word	0x70000000

08006f00 <_init>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr

08006f0c <_fini>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	bf00      	nop
 8006f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f12:	bc08      	pop	{r3}
 8006f14:	469e      	mov	lr, r3
 8006f16:	4770      	bx	lr
